{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> FastAPI-fastkit: Fast, easy-to-use starter kit for new users of Python and FastAPI </p> <p> </p> <p>This project was created to speed up the configuration of the development environment needed to develop Python-based web apps for new users of Python and FastAPI.</p> <p>This project was inspired by the <code>SpringBoot initializer</code> &amp; Python Django's <code>django-admin</code> cli operation.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\u26a1 Immediate FastAPI project creation : Super-fast FastAPI workspace &amp; project creation via CLI, inspired by <code>django-admin</code> feature of Python Django</li> <li>\ud83c\udfa8 Prettier CLI outputs : Beautiful CLI experience powered by rich library</li> <li>\ud83d\udccb Standards-based FastAPI project templates : All FastAPI-fastkit templates are based on Python standards and FastAPI's common use patterns</li> <li>\ud83d\udd0d Automated template quality assurance : Weekly automated testing ensures all templates remain functional and up-to-date</li> <li>\ud83d\ude80 Multiple project templates : Choose from various pre-configured templates for different use cases (async CRUD, Docker, PostgreSQL, etc.)</li> <li>\ud83d\udce6 Multiple package manager support : Choose your preferred Python package manager (pip, uv, pdm, poetry) for dependency management</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>FastAPI-fastkit</code> at your Python environment.</p> <pre><code>$ pip install FastAPI-fastkit\n---&gt; 100%\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#create-a-new-fastapi-project-workspace-environment-immediately","title":"Create a new FastAPI project workspace environment immediately","text":"<p>You can now start new FastAPI project really fast with FastAPI-fastkit!</p> <p>Create a new FastAPI project workspace immediately with:</p> <pre><code>$ fastkit init\nEnter the project name: my-awesome-project\nEnter the author name: John Doe\nEnter the author email: john@example.com\nEnter the project description: My awesome FastAPI project\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 my-awesome-project         \u2502\n\u2502 Author       \u2502 John Doe                   \u2502\n\u2502 Author Email \u2502 john@example.com           \u2502\n\u2502 Description  \u2502 My awesome FastAPI project \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nAvailable Stacks and Dependencies:\n           MINIMAL Stack\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 pydantic          \u2502\n\u2502 Dependency 4 \u2502 pydantic-settings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n           STANDARD Stack\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 sqlalchemy        \u2502\n\u2502 Dependency 4 \u2502 alembic           \u2502\n\u2502 Dependency 5 \u2502 pytest            \u2502\n\u2502 Dependency 6 \u2502 pydantic          \u2502\n\u2502 Dependency 7 \u2502 pydantic-settings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n             FULL Stack\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 sqlalchemy        \u2502\n\u2502 Dependency 4 \u2502 alembic           \u2502\n\u2502 Dependency 5 \u2502 pytest            \u2502\n\u2502 Dependency 6 \u2502 redis             \u2502\n\u2502 Dependency 7 \u2502 celery            \u2502\n\u2502 Dependency 8 \u2502 pydantic          \u2502\n\u2502 Dependency 9 \u2502 pydantic-settings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect stack (minimal, standard, full): minimal\n\nAvailable Package Managers:\n                   Package Managers\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PIP    \u2502 Standard Python package manager            \u2502\n\u2502 UV     \u2502 Fast Python package manager                \u2502\n\u2502 PDM    \u2502 Modern Python dependency management        \u2502\n\u2502 POETRY \u2502 Python dependency management and packaging \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\nFastAPI project will deploy at '~your-project-path~'\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Info \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2139 Injected metadata into setup.py                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Info \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2139 Injected metadata into config file                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n        Creating Project:\n       my-awesome-project\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Component         \u2502 Collected \u2502\n\u2502 fastapi           \u2502 \u2713         \u2502\n\u2502 uvicorn           \u2502 \u2713         \u2502\n\u2502 pydantic          \u2502 \u2713         \u2502\n\u2502 pydantic-settings \u2502 \u2713         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCreating virtual environment...\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Info \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2139 venv created at                                    \u2502\n\u2502 ~your-project-path~/my-awesome-project/.venv         \u2502\n\u2502 To activate the virtual environment, run:            \u2502\n\u2502                                                      \u2502\n\u2502     source                                           \u2502\n\u2502 ~your-project-path~/my-awesome-project/.venv/bin/act \u2502\n\u2502 ivate                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nInstalling dependencies...\n\u2819 Setting up project environment...Collecting &lt;packages~&gt;\n\n---&gt; 100%\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Success \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2728 Dependencies installed successfully                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Success \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2728 FastAPI project 'my-awesome-project' has been      \u2502\n\u2502 created successfully and saved to                     \u2502\n\u2502 ~your-project-path~!                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Info \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2139 To start your project, run 'fastkit runserver' at  \u2502\n\u2502 newly created FastAPI project directory              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>This command will create a new FastAPI project workspace environment with Python virtual environment.</p>"},{"location":"#add-a-new-route-to-the-fastapi-project","title":"Add a new route to the FastAPI project","text":"<p><code>FastAPI-fastkit</code> makes it easy to expand your FastAPI project.</p> <p>Add a new route endpoint to your FastAPI project with:</p> <pre><code>$ fastkit addroute my-awesome-project user\n                       Adding New Route\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project          \u2502 my-awesome-project                       \u2502\n\u2502 Route Name       \u2502 user                                     \u2502\n\u2502 Target Directory \u2502 ~your-project-path~                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDo you want to add route 'user' to project 'my-awesome-project'? [Y/n]: y\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Info \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2139 Updated main.py to include the API router          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Success \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2728 Successfully added new route 'user' to project     \u2502\n\u2502 `my-awesome-project`                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"#place-a-structured-fastapi-demo-project-immediately","title":"Place a structured FastAPI demo project immediately","text":"<p>You can also start with a structured FastAPI demo project.</p> <p>Demo projects are consist of various tech stacks with simple item CRUD endpoints implemented.</p> <p>Place a structured FastAPI demo project immediately with:</p> <pre><code>$ fastkit startdemo\nEnter the project name: my-awesome-demo\nEnter the author name: John Doe\nEnter the author email: john@example.com\nEnter the project description: My awesome FastAPI demo\nDeploying FastAPI project using 'fastapi-default' template\nTemplate path:\n/~fastapi_fastkit-package-path~/fastapi_project_template/fastapi-default\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 my-awesome-demo         \u2502\n\u2502 Author       \u2502 John Doe                \u2502\n\u2502 Author Email \u2502 john@example.com        \u2502\n\u2502 Description  \u2502 My awesome FastAPI demo \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       Template Dependencies\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 pydantic          \u2502\n\u2502 Dependency 4 \u2502 pydantic-settings \u2502\n\u2502 Dependency 5 \u2502 python-dotenv     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nAvailable Package Managers:\n                   Package Managers\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PIP    \u2502 Standard Python package manager            \u2502\n\u2502 UV     \u2502 Fast Python package manager                \u2502\n\u2502 PDM    \u2502 Modern Python dependency management        \u2502\n\u2502 POETRY \u2502 Python dependency management and packaging \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\nFastAPI template project will deploy at '~your-project-path~'\n\n---&gt; 100%\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Success \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2728 Dependencies installed successfully                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Success \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2728 FastAPI project 'my-awesome-demo' from             \u2502\n\u2502 'fastapi-default' has been created and saved to       \u2502\n\u2502 ~your-project-path~!                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>To view the list of available FastAPI demos, check with:</p> <pre><code>$ fastkit list-templates\n                      Available Templates\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 fastapi-custom-response \u2502 Async Item Management API with    \u2502\n\u2502                         \u2502 Custom Response System            \u2502\n\u2502 fastapi-dockerized      \u2502 Dockerized FastAPI Item           \u2502\n\u2502                         \u2502 Management API                    \u2502\n\u2502 fastapi-empty           \u2502 No description                    \u2502\n\u2502 fastapi-async-crud      \u2502 Async Item Management API Server  \u2502\n\u2502 fastapi-psql-orm        \u2502 Dockerized FastAPI Item           \u2502\n\u2502                         \u2502 Management API with PostgreSQL    \u2502\n\u2502 fastapi-default         \u2502 Simple FastAPI Project            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>For comprehensive guides and detailed usage instructions, explore our documentation:</p> <ul> <li>\ud83d\udcda User Guide - Detailed installation and usage guides</li> <li>\ud83c\udfaf Tutorial - Step-by-step tutorials for beginners</li> <li>\ud83d\udcd6 CLI Reference - Complete command reference</li> <li>\ud83d\udd0d Template Quality Assurance - Automated testing and quality standards</li> </ul>"},{"location":"#template-based-tutorials","title":"\ud83d\ude80 Template-based Tutorials","text":"<p>Learn FastAPI development through practical use cases with our pre-built templates:</p>"},{"location":"#core-tutorials","title":"\ud83d\udcd6 Core Tutorials","text":"<ul> <li>Building a Basic API Server - Create your first FastAPI server using the <code>fastapi-default</code> template</li> <li>Building an Asynchronous CRUD API - Develop a high-performance async API with the <code>fastapi-async-crud</code> template</li> </ul>"},{"location":"#database-infrastructure","title":"\ud83d\uddc4\ufe0f Database &amp; Infrastructure","text":"<ul> <li>Integrating with a Database - Utilize PostgreSQL + SQLAlchemy with the <code>fastapi-psql-orm</code> template</li> <li>Dockerizing and Deploying - Set up a production deployment environment using the <code>fastapi-dockerized</code> template</li> </ul>"},{"location":"#advanced-features","title":"\u26a1 Advanced Features","text":"<ul> <li>Custom Response Handling &amp; Advanced API Design - Build enterprise-grade APIs with the <code>fastapi-custom-response</code> template</li> <li>Integrating with MCP - Create an API server integrated with AI models using the <code>fastapi-mcp</code> template</li> </ul> <p>Each tutorial provides: - \u2705 Practical Examples - Code you can use directly in real projects - \u2705 Step-by-Step Guides - Detailed explanations for beginners to follow easily - \u2705 Best Practices - Industry-standard patterns and security considerations - \u2705 Extension Methods - Guidance for taking your project to the next level</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions from the community! FastAPI-fastkit is designed to help newcomers to Python and FastAPI, and your contributions can make a significant impact.</p>"},{"location":"#what-you-can-contribute","title":"What You Can Contribute","text":"<ul> <li>\ud83d\ude80 New FastAPI templates - Add templates for different use cases</li> <li>\ud83d\udc1b Bug fixes - Help us improve stability and reliability</li> <li>\ud83d\udcda Documentation - Improve guides, examples, and translations</li> <li>\ud83e\uddea Tests - Increase test coverage and add integration tests</li> <li>\ud83d\udca1 Features - Suggest and implement new CLI features</li> </ul>"},{"location":"#getting-started-with-contributing","title":"Getting Started with Contributing","text":"<p>To get started with contributing to FastAPI-fastkit, please refer to our comprehensive guides:</p> <ul> <li>Development Setup - Complete guide for setting up your development environment</li> <li>Code Guidelines - Coding standards and best practices</li> <li>CONTRIBUTING.md - Comprehensive contribution guide</li> <li>CODE_OF_CONDUCT.md - Project principles and community standards</li> <li>SECURITY.md - Security guidelines and reporting</li> </ul>"},{"location":"#significance-of-fastapi-fastkit","title":"Significance of FastAPI-fastkit","text":"<p>FastAPI-fastkit aims to provide a fast and easy-to-use starter kit for new users of Python and FastAPI.</p> <p>This idea was initiated with the aim of helping FastAPI newcomers learn from the beginning, which aligns with the production significance of the FastAPI-cli package added with the FastAPI 0.111.0 version update.</p> <p>As someone who has been using and loving FastAPI for a long time, I wanted to develop a project that could help fulfill the wonderful motivation that FastAPI developer tiangolo has expressed.</p> <p>FastAPI-fastkit bridges the gap between getting started and building production-ready applications by providing:</p> <ul> <li>Immediate productivity for newcomers who might be overwhelmed by setup complexity</li> <li>Best practices built into every template, helping users learn proper FastAPI patterns</li> <li>Scalable foundations that grow with users as they advance from beginners to experts</li> <li>Community-driven templates that reflect real-world FastAPI usage patterns</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Ready to get started with FastAPI-fastkit? Follow these next steps:</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<ol> <li>Installation: Install FastAPI-fastkit</li> <li>Quick Start: Create your first project in 5 minutes</li> <li>Getting Started Tutorial: Step-by-step detailed tutorial</li> </ol>"},{"location":"#advanced-learning","title":"\ud83d\udcda Advanced Learning","text":"<ul> <li>Creating Projects: Create projects with different stacks</li> <li>Adding Routes: Add API endpoints to your project</li> <li>Using Templates: Use pre-built project templates</li> </ul>"},{"location":"#contributing_1","title":"\ud83d\udee0\ufe0f Contributing","text":"<p>Want to contribute to FastAPI-fastkit?</p> <ul> <li>Development Setup: Set up your development environment</li> <li>Code Guidelines: Follow our coding standards and best practices</li> <li>Contributing Guidelines: Comprehensive contribution guide</li> </ul>"},{"location":"#reference","title":"\ud83d\udd0d Reference","text":"<ul> <li>CLI Reference: Complete CLI command reference</li> <li>Template Quality Assurance: Automated testing and quality standards</li> <li>FAQ: Frequently asked questions</li> <li>GitHub Repository: Source code and issue tracking</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v115-2025-09-14","title":"v1.1.5 (2025-09-14)","text":""},{"location":"changelog/#improvements","title":"Improvements","text":"<ul> <li>Adaptive Console Sizing: Enhanced terminal output display</li> <li>Console width is 80% of terminal width, capped at 120 characters</li> <li>Console height is terminal height minus buffer (5 lines)</li> <li>Automatic terminal size detection with fallback to default sizes (80x24)</li> <li>Dynamic sizing based on actual terminal dimensions</li> </ul>"},{"location":"changelog/#fixes","title":"Fixes","text":"<ul> <li>Text Truncation Prevention: Completely eliminated text truncation in CLI output</li> <li>Template names and descriptions are now fully displayed without \"...\" truncation</li> <li>Table columns automatically adjust to content length to prevent text cutting</li> <li>Added <code>overflow=\"fold\"</code> and <code>no_wrap=False</code> settings to Rich tables</li> <li>Template listing now shows complete template names (e.g., <code>fastapi-custom-response</code> instead of <code>fastapi-custom-respo...</code>)</li> <li>Fixing the object <code>console</code> not found error</li> <li>this critical error was occurred every version before this version.</li> <li>this error was occurred because of the mismatched logic between distribute github actions workflow and the top <code>__init__.py</code> file of fastkit project package.</li> <li>This issue was discovered during the development of version 1.1.2, and I spent a lot of time troubleshooting it. I believe this was due to my lack of development experience. I sincerely apologize.</li> </ul>"},{"location":"changelog/#v114-deprecated","title":"v1.1.4 (deprecated)","text":"<p>this version was hotfix build, but it is deprecated.</p> <p>The issues that were being addressed during the development of this version remained unresolved and were fixed in version v1.1.5.</p> <p>For more details, please refer to the CHANGELOG.md file for v1.1.5.</p>"},{"location":"changelog/#v113-2025-09-13","title":"v1.1.3 (2025-09-13)","text":""},{"location":"changelog/#templates","title":"Templates","text":"<ul> <li>add <code>fastapi-single-module</code> template</li> <li>update <code>fastapi-psql-orm</code> template : fix dockerfile &amp; docker-compose.yml scripts errors</li> </ul>"},{"location":"changelog/#v112-2025-09-05","title":"v1.1.2 (2025-09-05)","text":""},{"location":"changelog/#improvements_1","title":"Improvements","text":"<ul> <li>add a feature of <code>fastkit init</code>, <code>fastkit startdemo</code> command to define to make a new project folder at current working directory</li> <li>add <code>setuptools</code> package at <code>fastapi-empty</code> template's dependency list.</li> <li>add a feature of <code>fastkit addroute</code>command to recognize current working project (with cmd option <code>.</code>).</li> </ul>"},{"location":"changelog/#v111-2025-08-15","title":"v1.1.1 (2025-08-15)","text":""},{"location":"changelog/#improvements_2","title":"Improvements","text":"<ul> <li>fix template inspection workflow &amp; script</li> <li>fixing uv supportation compatibility</li> <li>for now, template inspection is running with <code>uv</code> package manager</li> </ul>"},{"location":"changelog/#v110-2025-08-08","title":"v1.1.0 (2025-08-08)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Package Manager Support: Add comprehensive support for multiple Python package managers</li> <li>Support for UV (default), PDM, Poetry, and PIP package managers</li> <li>Interactive package manager selection in <code>fastkit init</code> and <code>fastkit startdemo</code> commands</li> <li><code>--package-manager</code> CLI option for non-interactive usage</li> <li>Automatic generation of appropriate dependency files (<code>pyproject.toml</code> for UV/PDM/Poetry, <code>requirements.txt</code> for PIP)</li> <li> <p>PEP 621 compliant project metadata for modern package managers</p> </li> <li> <p>Automated Template Testing System: Revolutionary zero-configuration template testing</p> </li> <li>Dynamic template discovery - new templates are automatically tested</li> <li>Comprehensive end-to-end testing with actual project creation</li> <li>Multi-package manager compatibility testing</li> <li>Virtual environment creation and dependency installation validation</li> <li>Project structure and FastAPI integration verification</li> <li>Parameterized testing with pytest for scalable test execution</li> </ul>"},{"location":"changelog/#improvements_3","title":"Improvements","text":"<ul> <li>Enhanced CLI Experience: Package manager selection with interactive prompts and helpful descriptions</li> <li>Better Template Quality Assurance: Multi-layer quality assurance with static inspection and dynamic testing</li> <li>Improved Developer Experience: Zero boilerplate test configuration for template contributors</li> <li>Cross-Platform Compatibility: Enhanced support for different package manager workflows</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>Updated all user guides with package manager selection examples</li> <li>Enhanced CLI reference with comprehensive package manager documentation</li> <li>Updated contributing guidelines with new automated testing system</li> <li>Improved template creation guide with zero-configuration testing instructions</li> <li>Enhanced template quality assurance documentation</li> </ul>"},{"location":"changelog/#technical","title":"Technical","text":"<ul> <li>Implemented BasePackageManager abstract class with concrete implementations</li> <li>Added PackageManagerFactory for dynamic package manager instantiation</li> <li>Enhanced project metadata injection for all package managers</li> <li>Improved test infrastructure with dynamic template discovery</li> <li>Updated CI/CD pipelines for multi-package manager testing</li> </ul>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Default Package Manager: Changed from PIP to UV for better performance</li> <li>CLI Prompts: Added package manager selection step in interactive commands</li> </ul>"},{"location":"changelog/#v102-2025-07-02","title":"v1.0.2 (2025-07-02)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>add logging feature at <code>--debug</code> mode option : debugging log will be stored at package directory</li> </ul>"},{"location":"changelog/#maintenances","title":"Maintenances","text":"<ul> <li>add coverage test report and apply it at pre-commit hook</li> </ul>"},{"location":"changelog/#v101-2025-06-27","title":"v1.0.1 (2025-06-27)","text":""},{"location":"changelog/#fixes_1","title":"Fixes","text":"<ul> <li>bump <code>h11</code> version from 0.14.0 to 0.16.0</li> </ul>"},{"location":"changelog/#documentations","title":"Documentations","text":"<ul> <li>add github.io site for FastAPI-fastkit (with termynal &amp; mkdocs-material)</li> </ul>"},{"location":"changelog/#maintenances_1","title":"Maintenances","text":"<ul> <li>add a test case : test_cli_extended.py</li> </ul>"},{"location":"changelog/#v100-2025-03-01","title":"v1.0.0 (2025-03-01)","text":"<p>official release version</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>rename some <code>fastkit</code> commands:</li> <li><code>fastkit startup</code> -&gt; <code>fastkit startdemo</code></li> <li><code>fastkit startproject</code> -&gt; <code>fastkit init</code></li> <li>add <code>fastkit addroute</code> command : for adding a route to project</li> <li>add <code>fastkit runserver</code> command : for running FastAPI server</li> </ul>"},{"location":"changelog/#documentations_1","title":"Documentations","text":"<ul> <li>complete contribution guides</li> </ul>"},{"location":"changelog/#v011-2025-02-21","title":"v0.1.1 (2025-02-21)","text":"<p>pre-release version</p>"},{"location":"changelog/#fixes_2","title":"Fixes","text":"<ul> <li>modified template metadata injection modules</li> </ul>"},{"location":"changelog/#v010-2025-02-13","title":"v0.1.0 (2025-02-13)","text":"<p>initial release : pre-release version</p>"},{"location":"changelog/#templates_1","title":"Templates","text":"<ul> <li>add <code>fastapi-default</code> template</li> <li>add <code>fastapi-asnyc-crud</code> template</li> <li>add <code>fastapi-customized-response</code> template</li> <li>add <code>fastapi-dockerized</code> template</li> <li>add <code>fastapi-psql-orm</code> template</li> </ul>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>add <code>fastkit</code> command line base structure : <code>fastkit &lt;command&gt;</code></li> <li>add <code>fastkit --help</code> command : for more information about fastkit command</li> <li>add <code>fastkit --version</code> command : for version information</li> <li>add <code>fastkit --debug</code> command : for debugging information</li> <li>add <code>fastkit echo</code> command : for echo test</li> <li>add <code>fastkit list-templates</code> command : for listing available templates</li> <li>add <code>fastkit startup</code> command : for starting project with template</li> <li>add <code>fastkit startproject</code>command : for starting empty FastAPI project</li> <li>add <code>fastkit deleteproject</code> command : for deleting project</li> </ul>"},{"location":"changelog/#maintenances_2","title":"Maintenances","text":"<ul> <li>add test cases including template test cases</li> </ul>"},{"location":"changelog/#chores","title":"Chores","text":"<ul> <li>add version tag system</li> <li>add pr-branching methods</li> </ul>"},{"location":"contributing/code-guidelines/","title":"Code Guidelines","text":"<p>Comprehensive coding standards and best practices for contributing to FastAPI-fastkit.</p>"},{"location":"contributing/code-guidelines/#overview","title":"Overview","text":"<p>These guidelines ensure code quality, consistency, and maintainability across the FastAPI-fastkit project. Following these standards helps create a codebase that is easy to read, maintain, and extend.</p>"},{"location":"contributing/code-guidelines/#python-code-style","title":"Python Code Style","text":""},{"location":"contributing/code-guidelines/#pep-8-compliance","title":"PEP 8 Compliance","text":"<p>Follow PEP 8 with these specific configurations:</p> <ul> <li>Line length: 88 characters (Black default)</li> <li>Indentation: 4 spaces (no tabs)</li> <li>Trailing commas: Required in multi-line structures</li> <li>String quotes: Double quotes preferred</li> </ul>"},{"location":"contributing/code-guidelines/#code-formatting","title":"Code Formatting","text":"<p>We use Black for automatic code formatting:</p> <pre><code># Good \u2705\ndef create_project(\n    name: str,\n    template: str,\n    options: Dict[str, Any],\n) -&gt; ProjectResult:\n    \"\"\"Create a new FastAPI project.\"\"\"\n    return ProjectResult(name=name, template=template)\n\n# Bad \u274c\ndef create_project(name: str, template: str, options: Dict[str,Any])-&gt;ProjectResult:\n    \"\"\"Create a new FastAPI project.\"\"\"\n    return ProjectResult(name=name,template=template)\n</code></pre>"},{"location":"contributing/code-guidelines/#import-organization","title":"Import Organization","text":"<p>Use isort to organize imports:</p> <pre><code># Standard library imports\nimport os\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, List, Optional, Union\n\n# Third-party imports\nimport click\nimport pydantic\nfrom fastapi import FastAPI\n\n# Local imports\nfrom fastapi_fastkit.commands import BaseCommand\nfrom fastapi_fastkit.utils import validation\nfrom fastapi_fastkit.templates.manager import TemplateManager\n</code></pre>"},{"location":"contributing/code-guidelines/#type-hinting","title":"Type Hinting","text":""},{"location":"contributing/code-guidelines/#required-type-hints","title":"Required Type Hints","text":"<p>All public functions and methods must include type hints:</p> <pre><code># Good \u2705\ndef validate_project_name(name: str) -&gt; bool:\n    \"\"\"Validate project name format.\"\"\"\n    return name.isidentifier() and not name.startswith('_')\n\ndef create_files(\n    files: List[Path],\n    template_data: Dict[str, Any]\n) -&gt; List[Path]:\n    \"\"\"Create files from template data.\"\"\"\n    created_files = []\n    for file_path in files:\n        # Implementation...\n        created_files.append(file_path)\n    return created_files\n\n# Bad \u274c\ndef validate_project_name(name):\n    return name.isidentifier() and not name.startswith('_')\n</code></pre>"},{"location":"contributing/code-guidelines/#complex-type-annotations","title":"Complex Type Annotations","text":"<p>Use proper type annotations for complex structures:</p> <pre><code>from typing import Dict, List, Optional, Union, Tuple, Any\nfrom pathlib import Path\n\n# Type aliases for complex types\nProjectConfig = Dict[str, Union[str, bool, List[str]]]\nFileMapping = Dict[Path, str]\nValidationResult = Tuple[bool, Optional[str]]\n\ndef process_template(\n    template_path: Path,\n    config: ProjectConfig,\n    output_dir: Optional[Path] = None,\n) -&gt; ValidationResult:\n    \"\"\"Process template with configuration.\"\"\"\n    # Implementation...\n    return True, None\n</code></pre>"},{"location":"contributing/code-guidelines/#naming-conventions","title":"Naming Conventions","text":""},{"location":"contributing/code-guidelines/#variables-and-functions","title":"Variables and Functions","text":"<ul> <li>snake_case for variables and functions</li> <li>Descriptive names that explain purpose</li> <li>Avoid abbreviations unless commonly understood</li> </ul> <pre><code># Good \u2705\nproject_name = \"my-api\"\ntemplate_directory = Path(\"templates\")\nuser_input_data = get_user_input()\n\ndef validate_email_address(email: str) -&gt; bool:\n    \"\"\"Validate email address format.\"\"\"\n    return \"@\" in email and \".\" in email\n\n# Bad \u274c\nproj_nm = \"my-api\"\ntemp_dir = Path(\"templates\")\nusr_data = get_input()\n\ndef validate_email(e):\n    return \"@\" in e and \".\" in e\n</code></pre>"},{"location":"contributing/code-guidelines/#classes","title":"Classes","text":"<ul> <li>PascalCase for class names</li> <li>Descriptive and specific names</li> </ul> <pre><code># Good \u2705\nclass ProjectTemplate:\n    \"\"\"Represents a FastAPI project template.\"\"\"\n    pass\n\nclass TemplateValidationError(Exception):\n    \"\"\"Raised when template validation fails.\"\"\"\n    pass\n\nclass UserInputHandler:\n    \"\"\"Handles user input validation and processing.\"\"\"\n    pass\n\n# Bad \u274c\nclass Template:\n    pass\n\nclass Error(Exception):\n    pass\n\nclass Handler:\n    pass\n</code></pre>"},{"location":"contributing/code-guidelines/#constants","title":"Constants","text":"<ul> <li>UPPER_CASE with underscores</li> <li>Module-level constants only</li> </ul> <pre><code># Good \u2705\nDEFAULT_TEMPLATE_NAME = \"fastapi-default\"\nMAX_PROJECT_NAME_LENGTH = 50\nSUPPORTED_PYTHON_VERSIONS = [\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\"]\n\n# Bad \u274c\ndefault_template = \"fastapi-default\"\nmaxLength = 50\nversions = [\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\"]\n</code></pre>"},{"location":"contributing/code-guidelines/#documentation-standards","title":"Documentation Standards","text":""},{"location":"contributing/code-guidelines/#docstrings","title":"Docstrings","text":"<p>Use Google-style docstrings for all public APIs:</p> <pre><code>def create_project_structure(\n    project_name: str,\n    template_path: Path,\n    output_directory: Optional[Path] = None,\n    overwrite: bool = False,\n) -&gt; List[Path]:\n    \"\"\"Create project structure from template.\n\n    Creates a new FastAPI project structure by copying and processing\n    template files. Supports variable substitution and file customization.\n\n    Args:\n        project_name: Name of the project to create. Must be a valid\n            Python identifier.\n        template_path: Path to the template directory containing\n            source files and configuration.\n        output_directory: Directory where project will be created.\n            Defaults to current working directory.\n        overwrite: Whether to overwrite existing files. If False,\n            raises error when files exist.\n\n    Returns:\n        List of created file paths in order of creation.\n\n    Raises:\n        ValueError: If project_name is invalid or empty.\n        FileExistsError: If output directory exists and overwrite is False.\n        TemplateNotFoundError: If template_path doesn't exist.\n        PermissionError: If insufficient permissions to create files.\n\n    Example:\n        ```python\n        template_path = Path(\"templates/fastapi-default\")\n        created_files = create_project_structure(\n            project_name=\"my-api\",\n            template_path=template_path,\n            output_directory=Path(\"./projects\"),\n            overwrite=False\n        )\n        print(f\"Created {len(created_files)} files\")\n        ```\n    \"\"\"\n    # Implementation here...\n    pass\n</code></pre>"},{"location":"contributing/code-guidelines/#comments","title":"Comments","text":"<ul> <li>Explain WHY, not WHAT</li> <li>Use sparingly - code should be self-documenting</li> <li>Update comments when code changes</li> </ul> <pre><code># Good \u2705\ndef validate_dependencies(requirements: List[str]) -&gt; bool:\n    \"\"\"Validate project dependencies.\"\"\"\n    # Skip validation in development mode to allow experimental packages\n    if os.getenv(\"FASTKIT_DEV_MODE\"):\n        return True\n\n    # Check each requirement against known security vulnerabilities\n    for requirement in requirements:\n        if is_vulnerable_package(requirement):\n            return False\n\n    return True\n\n# Bad \u274c\ndef validate_dependencies(requirements: List[str]) -&gt; bool:\n    \"\"\"Validate project dependencies.\"\"\"\n    # Check if dev mode\n    if os.getenv(\"FASTKIT_DEV_MODE\"):\n        return True\n\n    # Loop through requirements\n    for requirement in requirements:\n        # Check if vulnerable\n        if is_vulnerable_package(requirement):\n            return False\n\n    # Return true\n    return True\n</code></pre>"},{"location":"contributing/code-guidelines/#error-handling","title":"Error Handling","text":""},{"location":"contributing/code-guidelines/#exception-handling","title":"Exception Handling","text":"<ul> <li>Catch specific exceptions whenever possible</li> <li>Provide meaningful error messages</li> <li>Log errors appropriately</li> </ul> <pre><code># Good \u2705\ndef load_template_config(template_path: Path) -&gt; Dict[str, Any]:\n    \"\"\"Load template configuration from file.\"\"\"\n    config_file = template_path / \"template.yaml\"\n\n    try:\n        with open(config_file, 'r') as f:\n            return yaml.safe_load(f)\n    except FileNotFoundError:\n        raise TemplateNotFoundError(\n            f\"Template configuration not found: {config_file}\"\n        )\n    except yaml.YAMLError as e:\n        raise TemplateConfigError(\n            f\"Invalid YAML syntax in {config_file}: {e}\"\n        )\n    except PermissionError:\n        raise TemplateAccessError(\n            f\"Permission denied reading {config_file}\"\n        )\n\n# Bad \u274c\ndef load_template_config(template_path: Path) -&gt; Dict[str, Any]:\n    \"\"\"Load template configuration from file.\"\"\"\n    config_file = template_path / \"template.yaml\"\n\n    try:\n        with open(config_file, 'r') as f:\n            return yaml.safe_load(f)\n    except Exception as e:\n        raise Exception(f\"Error loading config: {e}\")\n</code></pre>"},{"location":"contributing/code-guidelines/#custom-exceptions","title":"Custom Exceptions","text":"<p>Define specific exceptions for different error conditions:</p> <pre><code>class FastKitError(Exception):\n    \"\"\"Base exception for FastAPI-fastkit errors.\"\"\"\n    pass\n\nclass ProjectCreationError(FastKitError):\n    \"\"\"Raised when project creation fails.\"\"\"\n    pass\n\nclass TemplateNotFoundError(FastKitError):\n    \"\"\"Raised when template is not found.\"\"\"\n    pass\n\nclass ValidationError(FastKitError):\n    \"\"\"Raised when input validation fails.\"\"\"\n\n    def __init__(self, message: str, field: str = None):\n        super().__init__(message)\n        self.field = field\n</code></pre>"},{"location":"contributing/code-guidelines/#testing-standards","title":"Testing Standards","text":""},{"location":"contributing/code-guidelines/#test-structure","title":"Test Structure","text":"<p>Organize tests with clear structure and naming:</p> <pre><code>class TestProjectCreation:\n    \"\"\"Test project creation functionality.\"\"\"\n\n    def test_create_project_with_valid_name(self, tmp_path):\n        \"\"\"Test project creation with valid project name.\"\"\"\n        project_name = \"test-project\"\n        result = create_project(project_name, template=\"minimal\", output=tmp_path)\n\n        assert result.success is True\n        assert (tmp_path / project_name).exists()\n        assert (tmp_path / project_name / \"src\" / \"main.py\").exists()\n\n    def test_create_project_with_invalid_name(self):\n        \"\"\"Test project creation fails with invalid name.\"\"\"\n        with pytest.raises(ValueError, match=\"Invalid project name\"):\n            create_project(\"invalid-project-name!\", template=\"minimal\")\n\n    def test_create_project_overwrites_existing(self, tmp_path):\n        \"\"\"Test project creation overwrites existing directory when forced.\"\"\"\n        project_name = \"existing-project\"\n        project_dir = tmp_path / project_name\n        project_dir.mkdir()\n\n        result = create_project(\n            project_name,\n            template=\"minimal\",\n            output=tmp_path,\n            overwrite=True\n        )\n\n        assert result.success is True\n        assert project_dir.exists()\n</code></pre>"},{"location":"contributing/code-guidelines/#test-coverage","title":"Test Coverage","text":"<ul> <li>Aim for 90%+ coverage on new code</li> <li>Test edge cases and error conditions</li> <li>Mock external dependencies</li> </ul> <pre><code>def test_template_download_with_network_error(mock_requests):\n    \"\"\"Test template download handles network errors gracefully.\"\"\"\n    mock_requests.get.side_effect = requests.ConnectionError(\"Network unreachable\")\n\n    with pytest.raises(TemplateDownloadError, match=\"Network error\"):\n        download_template(\"https://example.com/template.zip\")\n\ndef test_file_creation_with_permission_error(mock_open):\n    \"\"\"Test file creation handles permission errors.\"\"\"\n    mock_open.side_effect = PermissionError(\"Permission denied\")\n\n    with pytest.raises(FileCreationError, match=\"Permission denied\"):\n        create_file(Path(\"/restricted/file.py\"), content=\"test\")\n</code></pre>"},{"location":"contributing/code-guidelines/#import-guidelines","title":"Import Guidelines","text":""},{"location":"contributing/code-guidelines/#import-organization_1","title":"Import Organization","text":"<ol> <li>Standard library imports first</li> <li>Third-party imports second</li> <li>Local application imports last</li> <li>Blank line between each group</li> </ol> <pre><code># Standard library\nimport os\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, List, Optional\n\n# Third-party\nimport click\nimport pydantic\nimport yaml\nfrom fastapi import FastAPI\n\n# Local application\nfrom fastapi_fastkit.commands.base import BaseCommand\nfrom fastapi_fastkit.utils.validation import validate_project_name\nfrom fastapi_fastkit.templates import TemplateManager\n</code></pre>"},{"location":"contributing/code-guidelines/#import-best-practices","title":"Import Best Practices","text":"<ul> <li>Avoid wildcard imports (<code>from module import *</code>)</li> <li>Use absolute imports for clarity</li> <li>Import modules, not specific items when importing many items</li> </ul> <pre><code># Good \u2705\nfrom fastapi_fastkit.utils import validation, files, formatting\n\n# Good \u2705 (when importing few items)\nfrom fastapi_fastkit.utils.validation import validate_email, validate_project_name\n\n# Bad \u274c\nfrom fastapi_fastkit.utils.validation import *\n\n# Bad \u274c (when importing many items)\nfrom fastapi_fastkit.utils.validation import (\n    validate_email, validate_project_name, validate_template_name,\n    validate_dependencies, validate_python_version, validate_directory\n)\n</code></pre>"},{"location":"contributing/code-guidelines/#security-guidelines","title":"Security Guidelines","text":""},{"location":"contributing/code-guidelines/#input-validation","title":"Input Validation","text":"<p>Always validate and sanitize user input:</p> <pre><code>def validate_project_name(name: str) -&gt; str:\n    \"\"\"Validate and sanitize project name.\"\"\"\n    if not name:\n        raise ValueError(\"Project name cannot be empty\")\n\n    if not name.isidentifier():\n        raise ValueError(\"Project name must be a valid Python identifier\")\n\n    if name.startswith('_'):\n        raise ValueError(\"Project name cannot start with underscore\")\n\n    if len(name) &gt; 50:\n        raise ValueError(\"Project name too long (max 50 characters)\")\n\n    # Sanitize by removing dangerous characters\n    sanitized = re.sub(r'[^a-zA-Z0-9_-]', '', name)\n\n    return sanitized\n</code></pre>"},{"location":"contributing/code-guidelines/#file-operations","title":"File Operations","text":"<p>Be careful with file paths and operations:</p> <pre><code>def create_file_safely(file_path: Path, content: str, base_dir: Path) -&gt; None:\n    \"\"\"Create file safely within base directory.\"\"\"\n    # Resolve to prevent directory traversal attacks\n    resolved_path = file_path.resolve()\n    resolved_base = base_dir.resolve()\n\n    # Ensure file is within base directory\n    try:\n        resolved_path.relative_to(resolved_base)\n    except ValueError:\n        raise SecurityError(f\"File path outside base directory: {file_path}\")\n\n    # Create parent directories safely\n    resolved_path.parent.mkdir(parents=True, exist_ok=True)\n\n    # Write file with appropriate permissions\n    resolved_path.write_text(content, encoding='utf-8')\n    resolved_path.chmod(0o644)  # Read/write for owner, read for others\n</code></pre>"},{"location":"contributing/code-guidelines/#performance-guidelines","title":"Performance Guidelines","text":""},{"location":"contributing/code-guidelines/#efficient-code-practices","title":"Efficient Code Practices","text":"<ul> <li>Use generators for large datasets</li> <li>Avoid premature optimization</li> <li>Profile before optimizing</li> </ul> <pre><code># Good \u2705 - Generator for memory efficiency\ndef process_large_template(template_files: List[Path]) -&gt; Iterator[ProcessedFile]:\n    \"\"\"Process template files efficiently.\"\"\"\n    for file_path in template_files:\n        content = file_path.read_text()\n        processed_content = process_template_content(content)\n        yield ProcessedFile(path=file_path, content=processed_content)\n\n# Bad \u274c - Loads everything into memory\ndef process_large_template(template_files: List[Path]) -&gt; List[ProcessedFile]:\n    \"\"\"Process template files.\"\"\"\n    results = []\n    for file_path in template_files:\n        content = file_path.read_text()\n        processed_content = process_template_content(content)\n        results.append(ProcessedFile(path=file_path, content=processed_content))\n    return results\n</code></pre>"},{"location":"contributing/code-guidelines/#caching","title":"Caching","text":"<p>Use caching for expensive operations:</p> <pre><code>from functools import lru_cache\n\n@lru_cache(maxsize=128)\ndef get_template_metadata(template_path: Path) -&gt; TemplateMetadata:\n    \"\"\"Get template metadata with caching.\"\"\"\n    config_file = template_path / \"template.yaml\"\n\n    if not config_file.exists():\n        return TemplateMetadata(name=template_path.name)\n\n    config = yaml.safe_load(config_file.read_text())\n    return TemplateMetadata.from_config(config)\n</code></pre>"},{"location":"contributing/code-guidelines/#git-commit-guidelines","title":"Git Commit Guidelines","text":""},{"location":"contributing/code-guidelines/#commit-message-format","title":"Commit Message Format","text":"<p>Use conventional commit format:</p> <pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre>"},{"location":"contributing/code-guidelines/#commit-types","title":"Commit Types","text":"<ul> <li>feat: New feature</li> <li>fix: Bug fix</li> <li>docs: Documentation changes</li> <li>style: Code style changes (formatting, etc.)</li> <li>refactor: Code refactoring</li> <li>test: Adding or updating tests</li> <li>chore: Maintenance tasks</li> </ul>"},{"location":"contributing/code-guidelines/#examples","title":"Examples","text":"<pre><code># Good \u2705\nfeat(cli): add template validation command\n\nAdd new command to validate template structure and configuration.\nThe command checks for required files, validates YAML syntax,\nand ensures template follows conventions.\n\nCloses #123\n\n# Good \u2705\nfix(templates): handle missing dependency files gracefully\n\nWhen a template references a requirements file that doesn't exist,\nshow a clear error message instead of crashing.\n\n# Bad \u274c\nupdate stuff\n\n# Bad \u274c\nFixed bug\n</code></pre>"},{"location":"contributing/code-guidelines/#code-review-guidelines","title":"Code Review Guidelines","text":""},{"location":"contributing/code-guidelines/#for-authors","title":"For Authors","text":"<p>Before submitting code for review:</p> <ol> <li>Run all tests and ensure they pass</li> <li>Check code coverage is maintained</li> <li>Update documentation if needed</li> <li>Follow commit message conventions</li> <li>Keep pull requests focused and small</li> </ol>"},{"location":"contributing/code-guidelines/#for-reviewers","title":"For Reviewers","text":"<p>When reviewing code:</p> <ol> <li>Check functionality - does it work as intended?</li> <li>Review tests - are edge cases covered?</li> <li>Verify documentation - is it clear and up-to-date?</li> <li>Check code style - follows project conventions?</li> <li>Consider security - any potential vulnerabilities?</li> </ol>"},{"location":"contributing/code-guidelines/#review-checklist","title":"Review Checklist","text":"<ul> <li>[ ] Code follows style guidelines</li> <li>[ ] Tests are comprehensive and pass</li> <li>[ ] Documentation is updated</li> <li>[ ] No security vulnerabilities</li> <li>[ ] Performance considerations addressed</li> <li>[ ] Error handling is appropriate</li> <li>[ ] Commit messages follow conventions</li> </ul>"},{"location":"contributing/code-guidelines/#tools-and-automation","title":"Tools and Automation","text":""},{"location":"contributing/code-guidelines/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>We use pre-commit hooks to enforce standards:</p> <pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/psf/black\n    rev: 23.1.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/pycqa/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n\n  - repo: https://github.com/pycqa/flake8\n    rev: 6.0.0\n    hooks:\n      - id: flake8\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.0.1\n    hooks:\n      - id: mypy\n</code></pre>"},{"location":"contributing/code-guidelines/#ide-configuration","title":"IDE Configuration","text":"<p>Recommended VS Code settings:</p> <pre><code>{\n    \"python.linting.enabled\": true,\n    \"python.linting.flake8Enabled\": true,\n    \"python.linting.mypyEnabled\": true,\n    \"python.formatting.provider\": \"black\",\n    \"python.sortImports.path\": \"isort\",\n    \"editor.formatOnSave\": true,\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": true\n    }\n}\n</code></pre>"},{"location":"contributing/code-guidelines/#next-steps","title":"Next Steps","text":"<p>After reviewing these guidelines:</p> <ol> <li>Set up development environment following Development Setup</li> <li>Practice with small contributions to familiarize yourself</li> <li>Ask questions in GitHub Discussions if anything is unclear</li> <li>Review existing code to see these guidelines in practice</li> </ol> <p>Quick Reference</p> <ul> <li>Use <code>make check-all</code> to verify your code follows all guidelines</li> <li>Set up pre-commit hooks to catch issues early</li> <li>When in doubt, look at existing code for examples</li> <li>Don't hesitate to ask for help in code reviews</li> </ul> <p>Following these guidelines helps maintain FastAPI-fastkit's high code quality and makes collaboration easier for everyone! \ud83d\ude80</p>"},{"location":"contributing/development-setup/","title":"Development Setup","text":"<p>A comprehensive guide for setting up a development environment to contribute to FastAPI-fastkit.</p>"},{"location":"contributing/development-setup/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Python 3.12 or higher installed</li> <li>Git installed and configured</li> <li>Basic knowledge of Python and FastAPI</li> <li>Text editor or IDE (VS Code, PyCharm, etc.)</li> </ul>"},{"location":"contributing/development-setup/#quick-setup-with-makefile","title":"Quick Setup with Makefile","text":"<p>FastAPI-fastkit provides a Makefile for easy development setup:</p> <pre><code>$ git clone https://github.com/bnbong/FastAPI-fastkit.git\n$ cd FastAPI-fastkit\n$ make install-dev\nSetting up development environment...\nCreating virtual environment...\nInstalling dependencies...\nInstalling pre-commit hooks...\n\u2705 Development environment ready!\n</code></pre> <p>This single command: - Creates a virtual environment - Installs all dependencies - Sets up pre-commit hooks - Configures development tools</p>"},{"location":"contributing/development-setup/#manual-setup","title":"Manual Setup","text":"<p>If you prefer manual setup or the Makefile doesn't work on your system:</p>"},{"location":"contributing/development-setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>$ git clone https://github.com/bnbong/FastAPI-fastkit.git\n$ cd FastAPI-fastkit\n</code></pre>"},{"location":"contributing/development-setup/#2-create-virtual-environment","title":"2. Create Virtual Environment","text":"<pre><code>$ python -m venv .venv\n$ source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre>"},{"location":"contributing/development-setup/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code># Install package in editable mode with development dependencies\n$ pip install -e \".[dev]\"\n\n# Or install from requirements files\n$ pip install -r requirements.txt\n$ pip install -r requirements-dev.txt\n</code></pre>"},{"location":"contributing/development-setup/#4-set-up-pre-commit-hooks","title":"4. Set Up Pre-commit Hooks","text":"<pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre>"},{"location":"contributing/development-setup/#5-verify-installation","title":"5. Verify Installation","text":"<pre><code>$ fastkit --version\nFastAPI-fastkit version 1.0.0-dev\n\n$ python -m pytest tests/\n======================== test session starts ========================\ncollected 45 items\ntests/test_cli.py::test_init_command PASSED\ntests/test_templates.py::test_template_listing PASSED\n...\n======================== 45 passed in 2.34s ========================\n</code></pre>"},{"location":"contributing/development-setup/#development-tools","title":"Development Tools","text":"<p>The development environment includes several tools to maintain code quality:</p>"},{"location":"contributing/development-setup/#code-formatting","title":"Code Formatting","text":"<p>Black - Code formatter:</p> <pre><code>$ black src/ tests/\nreformatted src/main.py\nreformatted tests/test_cli.py\nAll done! \u2728 \ud83c\udf70 \u2728\n</code></pre> <p>isort - Import sorter:</p> <pre><code>$ isort src/ tests/\nFixing import order in src/main.py\n</code></pre>"},{"location":"contributing/development-setup/#code-linting","title":"Code Linting","text":"<p>flake8 - Style guide enforcement:</p> <pre><code>$ flake8 src/ tests/\nsrc/main.py:45:80: E501 line too long (82 &gt; 79 characters)\n</code></pre> <p>mypy - Type checking:</p> <pre><code>$ mypy src/\nSuccess: no issues found in 12 source files\n</code></pre>"},{"location":"contributing/development-setup/#available-make-commands","title":"Available Make Commands","text":"<p>The project Makefile provides convenient commands for common development tasks:</p>"},{"location":"contributing/development-setup/#setup-commands","title":"Setup Commands","text":"Command Description <code>make install</code> Install package in production mode <code>make install-dev</code> Install package with development dependencies <code>make clean</code> Clean build artifacts and cache files"},{"location":"contributing/development-setup/#code-quality-commands","title":"Code Quality Commands","text":"Command Description <code>make format</code> Format code with black and isort <code>make lint</code> Run flake8 linting <code>make type-check</code> Run mypy type checking <code>make security</code> Run bandit security checks <code>make check-all</code> Run all quality checks"},{"location":"contributing/development-setup/#testing-commands","title":"Testing Commands","text":"Command Description <code>make test</code> Run all tests <code>make test-unit</code> Run unit tests only <code>make test-integration</code> Run integration tests only <code>make test-coverage</code> Run tests with coverage report <code>make test-watch</code> Run tests in watch mode"},{"location":"contributing/development-setup/#documentation-commands","title":"Documentation Commands","text":"Command Description <code>make docs-serve</code> Serve documentation locally <code>make docs-build</code> Build documentation <code>make docs-deploy</code> Deploy documentation to GitHub Pages"},{"location":"contributing/development-setup/#examples","title":"Examples","text":"<pre><code># Format code and run all checks\n$ make format lint type-check security\nRunning black...\nRunning isort...\nRunning flake8...\nRunning mypy...\nRunning bandit...\n\u2705 All checks passed!\n\n# Run tests with coverage\n$ make test-coverage\n======================== test session starts ========================\ncollected 45 items\ntests/test_cli.py::test_init_command PASSED\n...\n======================== 45 passed in 2.34s ========================\n\n---------- coverage: platform darwin, python 3.12.1-final-0 ----------\nName                     Stmts   Miss  Cover\n--------------------------------------------\nsrc/main.py                 45      2    96%\nsrc/cli.py                  89      5    94%\nsrc/templates.py            67      3    96%\n--------------------------------------------\nTOTAL                      201     10    95%\n</code></pre>"},{"location":"contributing/development-setup/#project-structure","title":"Project Structure","text":"<p>Understanding the project structure is crucial for development:</p> <pre><code>FastAPI-fastkit/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 fastapi_fastkit/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 cli.py                  # CLI command implementations\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 init.py            # Project initialization\n\u2502       \u2502   \u251c\u2500\u2500 addroute.py        # Route addition\n\u2502       \u2502   \u251c\u2500\u2500 startdemo.py       # Template demos\n\u2502       \u2502   \u2514\u2500\u2500 runserver.py       # Development server\n\u2502       \u251c\u2500\u2500 templates/             # Project templates\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u2514\u2500\u2500 manager.py         # Template management\n\u2502       \u251c\u2500\u2500 utils/                 # Utility functions\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 files.py           # File operations\n\u2502       \u2502   \u251c\u2500\u2500 validation.py      # Input validation\n\u2502       \u2502   \u2514\u2500\u2500 formatting.py      # Output formatting\n\u2502       \u2514\u2500\u2500 fastapi_project_template/  # Default template\n\u2502           \u251c\u2500\u2500 src/\n\u2502           \u251c\u2500\u2500 tests/\n\u2502           \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_cli.py               # CLI testing\n\u2502   \u251c\u2500\u2500 test_commands/            # Command-specific tests\n\u2502   \u251c\u2500\u2500 test_templates/           # Template testing\n\u2502   \u251c\u2500\u2500 test_utils/               # Utility testing\n\u2502   \u2514\u2500\u2500 conftest.py               # Test configuration\n\u251c\u2500\u2500 docs/                         # Documentation\n\u251c\u2500\u2500 scripts/                      # Development scripts\n\u251c\u2500\u2500 requirements.txt              # Production dependencies\n\u251c\u2500\u2500 requirements-dev.txt          # Development dependencies\n\u251c\u2500\u2500 setup.py                      # Package configuration\n\u251c\u2500\u2500 Makefile                      # Development commands\n\u251c\u2500\u2500 .pre-commit-config.yaml       # Pre-commit configuration\n\u251c\u2500\u2500 pyproject.toml               # Project metadata\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"contributing/development-setup/#key-directories","title":"Key Directories","text":"<p><code>src/fastapi_fastkit/</code> - Main package source code - <code>cli.py</code> - Main CLI entry point - <code>commands/</code> - Individual command implementations - <code>templates/</code> - Template management system - <code>utils/</code> - Shared utility functions</p> <p><code>tests/</code> - Test suite - <code>test_cli.py</code> - CLI integration tests - <code>test_commands/</code> - Command-specific unit tests - <code>test_templates/</code> - Template system tests</p> <p><code>docs/</code> - Documentation (MkDocs) - User guides, tutorials, and API reference</p>"},{"location":"contributing/development-setup/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/development-setup/#1-create-a-feature-branch","title":"1. Create a Feature Branch","text":"<pre><code>$ git checkout -b feature/add-new-template\nSwitched to a new branch 'feature/add-new-template'\n</code></pre>"},{"location":"contributing/development-setup/#2-make-changes","title":"2. Make Changes","text":"<p>Edit code, add features, fix bugs...</p>"},{"location":"contributing/development-setup/#3-run-tests-and-checks","title":"3. Run Tests and Checks","text":"<pre><code>$ make check-all test\nRunning all quality checks...\nRunning all tests...\n\u2705 All checks and tests passed!\n</code></pre>"},{"location":"contributing/development-setup/#4-commit-changes","title":"4. Commit Changes","text":"<p>Pre-commit hooks will automatically run:</p> <pre><code>$ git add .\n$ git commit -m \"Add new FastAPI template with authentication\"\nblack....................................................................Passed\nisort....................................................................Passed\nflake8...................................................................Passed\nmypy.....................................................................Passed\nbandit...................................................................Passed\n[feature/add-new-template abc1234] Add new FastAPI template with authentication\n</code></pre>"},{"location":"contributing/development-setup/#5-push-and-create-pull-request","title":"5. Push and Create Pull Request","text":"<pre><code>$ git push origin feature/add-new-template\n$ gh pr create --title \"Add new FastAPI template with authentication\"\n</code></pre>"},{"location":"contributing/development-setup/#testing","title":"Testing","text":""},{"location":"contributing/development-setup/#running-tests","title":"Running Tests","text":"<p>All tests:</p> <pre><code>$ make test\n# or\n$ python -m pytest\n</code></pre> <p>Specific test file:</p> <pre><code>$ python -m pytest tests/test_cli.py -v\n</code></pre> <p>With coverage:</p> <pre><code>$ make test-coverage\n# or\n$ python -m pytest --cov=src --cov-report=html\n</code></pre> <p>Watch mode for development:</p> <pre><code>$ make test-watch\n# or\n$ ptw tests/\n</code></pre>"},{"location":"contributing/development-setup/#writing-tests","title":"Writing Tests","text":"<p>When adding new features, always include tests:</p> <pre><code># tests/test_commands/test_new_feature.py\nimport pytest\nfrom fastapi_fastkit.commands.new_feature import NewFeatureCommand\n\nclass TestNewFeatureCommand:\n    def test_command_success(self):\n        \"\"\"Test successful command execution\"\"\"\n        command = NewFeatureCommand()\n        result = command.execute(valid_args)\n        assert result.success is True\n        assert result.message == \"Feature executed successfully\"\n\n    def test_command_validation_error(self):\n        \"\"\"Test command with invalid arguments\"\"\"\n        command = NewFeatureCommand()\n        with pytest.raises(ValueError, match=\"Invalid argument\"):\n            command.execute(invalid_args)\n\n    def test_command_edge_case(self):\n        \"\"\"Test edge case handling\"\"\"\n        command = NewFeatureCommand()\n        result = command.execute(edge_case_args)\n        assert result.success is True\n        assert \"warning\" in result.message.lower()\n</code></pre>"},{"location":"contributing/development-setup/#test-categories","title":"Test Categories","text":"<p>Unit Tests - Test individual functions and classes:</p> <pre><code>def test_validate_project_name():\n    assert validate_project_name(\"valid-name\") is True\n    assert validate_project_name(\"invalid name!\") is False\n</code></pre> <p>Integration Tests - Test command interactions:</p> <pre><code>def test_init_command_creates_project(tmp_path):\n    result = runner.invoke(cli, ['init'], input='test-project\\n...')\n    assert result.exit_code == 0\n    assert (tmp_path / \"test-project\").exists()\n</code></pre> <p>End-to-End Tests - Test complete workflows:</p> <pre><code>def test_full_project_creation_workflow(tmp_path):\n    # Create project\n    result = runner.invoke(cli, ['init'], input='...')\n    assert result.exit_code == 0\n\n    # Add route\n    result = runner.invoke(cli, ['addroute', 'test-project', 'users'])\n    assert result.exit_code == 0\n\n    # Verify files exist\n    assert (tmp_path / \"test-project\" / \"src\" / \"api\" / \"routes\" / \"users.py\").exists()\n</code></pre>"},{"location":"contributing/development-setup/#documentation","title":"Documentation","text":""},{"location":"contributing/development-setup/#serving-documentation-locally","title":"Serving Documentation Locally","text":"<pre><code>$ make docs-serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  Documentation built in 0.43 seconds\nINFO     -  [14:30:00] Serving on http://127.0.0.1:8000/\n</code></pre>"},{"location":"contributing/development-setup/#building-documentation","title":"Building Documentation","text":"<pre><code>$ make docs-build\nINFO     -  Building documentation...\nINFO     -  Documentation built in 0.43 seconds\n</code></pre>"},{"location":"contributing/development-setup/#writing-documentation","title":"Writing Documentation","text":"<p>Documentation is written in Markdown and built with MkDocs. Here's an example structure:</p> <p>Feature Guide Template:</p> <pre><code># New Feature Guide\n\nThis guide explains how to use the new feature.\n\n## Prerequisites\n\n- FastAPI-fastkit installed\n- Basic Python knowledge\n\n## Usage\n\n&lt;div class=\"termy\"&gt;\n\n```console\n$ fastkit new-feature --option value\n\u2705 Feature executed successfully!\n```\n\n&lt;/div&gt;\n\n!!! tip \"Pro Tip\"\n    Use `--help` to see all available options.\n</code></pre>"},{"location":"contributing/development-setup/#code-style-guidelines","title":"Code Style Guidelines","text":""},{"location":"contributing/development-setup/#python-code-style","title":"Python Code Style","text":"<p>Follow PEP 8 with these specific rules:</p> <ul> <li>Line length: 88 characters (Black default)</li> <li>Imports: Organized with isort</li> <li>Type hints: Required for all public functions</li> <li>Docstrings: Google style for all public APIs</li> </ul>"},{"location":"contributing/development-setup/#example","title":"Example","text":"<pre><code>from typing import List, Optional\nfrom pathlib import Path\n\ndef create_project_structure(\n    project_name: str,\n    template_path: Path,\n    output_dir: Optional[Path] = None,\n) -&gt; List[Path]:\n    \"\"\"Create project structure from template.\n\n    Args:\n        project_name: Name of the project to create\n        template_path: Path to the template directory\n        output_dir: Output directory, defaults to current directory\n\n    Returns:\n        List of created file paths\n\n    Raises:\n        ValueError: If project_name is invalid\n        FileNotFoundError: If template_path doesn't exist\n    \"\"\"\n    if not project_name.isidentifier():\n        raise ValueError(f\"Invalid project name: {project_name}\")\n\n    if not template_path.exists():\n        raise FileNotFoundError(f\"Template not found: {template_path}\")\n\n    # Implementation here...\n    return created_files\n</code></pre>"},{"location":"contributing/development-setup/#environment-variables","title":"Environment Variables","text":"<p>For development, you can set these environment variables:</p> Variable Description Default <code>FASTKIT_DEBUG</code> Enable debug logging <code>False</code> <code>FASTKIT_DEV_MODE</code> Enable development features <code>False</code> <code>FASTKIT_TEMPLATE_DIR</code> Custom template directory Built-in templates <code>FASTKIT_CONFIG_DIR</code> Configuration directory <code>~/.fastkit</code> <pre><code>$ export FASTKIT_DEBUG=true\n$ export FASTKIT_DEV_MODE=true\n$ fastkit init\nDEBUG: Loading configuration from /home/user/.fastkit/\nDEBUG: Available templates: ['fastapi-default', ...]\n</code></pre>"},{"location":"contributing/development-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"contributing/development-setup/#common-issues","title":"Common Issues","text":"<p>1. Pre-commit hooks fail:</p> <pre><code>$ git commit -m \"Fix bug\"\nblack....................................................................Failed\nhookid: black\n\nFiles were modified by this hook. Additional output:\n\nwould reformat src/cli.py\n</code></pre> <p>Solution: Run formatters and commit again:</p> <pre><code>$ make format\n$ git add .\n$ git commit -m \"Fix bug\"\n</code></pre> <p>2. Tests fail on different Python versions:</p> <p>Solution: Use tox to test multiple Python versions:</p> <pre><code>$ pip install tox\n$ tox\npy38: commands succeeded\npy39: commands succeeded\npy310: commands succeeded\npy311: commands succeeded\npy312: commands succeeded\n</code></pre> <p>3. Import errors in development:</p> <p>Solution: Install package in editable mode:</p> <pre><code>$ pip install -e .\n</code></pre>"},{"location":"contributing/development-setup/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>GitHub Discussions: Ask questions and share ideas</li> <li>Documentation: Check the User Guide</li> </ul>"},{"location":"contributing/development-setup/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"contributing/development-setup/#before-submitting-a-pr","title":"Before Submitting a PR","text":"<ol> <li>Run all checks: <code>make check-all test</code></li> <li>Update documentation if needed</li> <li>Add tests for new features</li> <li>Update CHANGELOG.md</li> <li>Follow commit message conventions</li> </ol>"},{"location":"contributing/development-setup/#commit-message-format","title":"Commit Message Format","text":"<pre><code>type(scope): brief description\n\nLonger description if needed\n\nFixes #123\n</code></pre> <p>Types:</p> <ul> <li><code>feat</code>: New feature</li> <li><code>fix</code>: Bug fix</li> <li><code>docs</code>: Documentation changes</li> <li><code>style</code>: Code style changes</li> <li><code>refactor</code>: Code refactoring</li> <li><code>test</code>: Test additions/changes</li> <li><code>chore</code>: Maintenance tasks</li> </ul> <p>Examples:</p> <pre><code>feat(cli): add new template command\n\nAdd support for creating projects from custom templates.\nThe command accepts a template path and creates a new\nproject with the specified configuration.\n\nFixes #45\n\nfix(templates): handle missing template files gracefully\n\nWhen a template file is missing, show a clear error message\ninstead of crashing with a stack trace.\n\nFixes #67\n</code></pre>"},{"location":"contributing/development-setup/#release-process","title":"Release Process","text":"<p>For maintainers, the release process is:</p> <ol> <li>Update version in <code>setup.py</code> and <code>__init__.py</code></li> <li>Update CHANGELOG.md</li> <li>Create release PR</li> <li>Tag release after merge</li> <li>GitHub Actions automatically builds and publishes</li> </ol> <pre><code>$ git tag v1.2.0\n$ git push origin v1.2.0\n</code></pre>"},{"location":"contributing/development-setup/#next-steps","title":"Next Steps","text":"<p>Now that your development environment is set up:</p> <ol> <li>Explore the codebase to understand the architecture</li> <li>Run the test suite to ensure everything works</li> <li>Pick an issue from GitHub to work on</li> <li>Join discussions to connect with other contributors</li> </ol> <p>Happy coding! \ud83d\ude80</p> <p>Development Tips</p> <ul> <li>Use <code>make check-all</code> before committing</li> <li>Write tests first (TDD approach)</li> <li>Keep commits small and focused</li> <li>Update documentation with new features</li> </ul>"},{"location":"contributing/template-creation-guide/","title":"FastAPI Template Creation Guide","text":"<p>A comprehensive guide for adding new FastAPI project templates to FastAPI-fastkit.</p>"},{"location":"contributing/template-creation-guide/#overview","title":"\ud83c\udfaf Overview","text":"<p>Adding a new template follows a 5-step process:</p> <ol> <li>\ud83d\udccb Planning &amp; Design - Define template purpose and structure</li> <li>\ud83c\udfd7\ufe0f Template Implementation - Create required structure and files</li> <li>\ud83d\udd0d Local Validation - Validate template using inspector</li> <li>\ud83d\udcda Documentation - Write README and usage guide</li> <li>\ud83d\ude80 Submission &amp; Review - Create PR and community review</li> </ol>"},{"location":"contributing/template-creation-guide/#step-1-planning-design","title":"\ud83d\udccb Step 1: Planning &amp; Design","text":""},{"location":"contributing/template-creation-guide/#define-template-purpose","title":"Define Template Purpose","text":"<p>Before creating a new template, answer these questions:</p> <ul> <li>What is the unique value of this template?</li> <li>How does it differentiate from existing templates?</li> <li>Which user group is the target audience?</li> <li>What technology stack will it include?</li> </ul>"},{"location":"contributing/template-creation-guide/#template-naming-convention","title":"Template Naming Convention","text":"<pre><code>fastapi-{purpose}-{stack}\n</code></pre> <p>Examples: - <code>fastapi-microservice</code> (Microservice template) - <code>fastapi-graphql</code> (GraphQL integration template) - <code>fastapi-auth-jwt</code> (JWT authentication template)</p>"},{"location":"contributing/template-creation-guide/#technology-stack-planning","title":"Technology Stack Planning","text":"<p>Pre-define the main technologies to include:</p> <pre><code># Example: fastapi-microservice template\ncore_dependencies:\n  - fastapi\n  - uvicorn\n  - pydantic\n  - pydantic-settings\n\nadditional_features:\n  - sqlalchemy (ORM)\n  - alembic (migrations)\n  - redis (caching)\n  - celery (background tasks)\n  - pytest (testing)\n\ndevelopment_tools:\n  - black (code formatting)\n  - isort (import sorting)\n  - mypy (type checking)\n  - pre-commit (Git hooks)\n</code></pre>"},{"location":"contributing/template-creation-guide/#step-2-template-implementation","title":"\ud83c\udfd7\ufe0f Step 2: Template Implementation","text":""},{"location":"contributing/template-creation-guide/#required-directory-structure","title":"Required Directory Structure","text":"<pre><code>fastapi-{template-name}/\n\u251c\u2500\u2500 src/                          # Application source code\n\u2502   \u251c\u2500\u2500 main.py-tpl              # \u2705 FastAPI app entry point (required)\n\u2502   \u251c\u2500\u2500 __init__.py-tpl\n\u2502   \u251c\u2500\u2500 api/                     # API routers\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py-tpl\n\u2502   \u2502   \u251c\u2500\u2500 api.py-tpl           # Main API router\n\u2502   \u2502   \u2514\u2500\u2500 routes/              # Individual routes\n\u2502   \u2502       \u251c\u2500\u2500 __init__.py-tpl\n\u2502   \u2502       \u2514\u2500\u2500 items.py-tpl     # Example route\n\u2502   \u251c\u2500\u2500 core/                    # Core configuration\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py-tpl\n\u2502   \u2502   \u2514\u2500\u2500 config.py-tpl        # Settings management\n\u2502   \u251c\u2500\u2500 crud/                    # CRUD logic\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py-tpl\n\u2502   \u2502   \u2514\u2500\u2500 items.py-tpl\n\u2502   \u251c\u2500\u2500 schemas/                 # Pydantic models\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py-tpl\n\u2502   \u2502   \u2514\u2500\u2500 items.py-tpl\n\u2502   \u2514\u2500\u2500 utils/                   # Utility functions\n\u2502       \u251c\u2500\u2500 __init__.py-tpl\n\u2502       \u2514\u2500\u2500 helpers.py-tpl\n\u251c\u2500\u2500 tests/                       # \u2705 Tests (required)\n\u2502   \u251c\u2500\u2500 __init__.py-tpl\n\u2502   \u251c\u2500\u2500 conftest.py-tpl         # pytest configuration\n\u2502   \u2514\u2500\u2500 test_items.py-tpl       # Example tests\n\u251c\u2500\u2500 scripts/                     # Scripts\n\u2502   \u251c\u2500\u2500 format.sh-tpl           # Code formatting\n\u2502   \u251c\u2500\u2500 lint.sh-tpl             # Linting\n\u2502   \u251c\u2500\u2500 run-server.sh-tpl       # Server execution\n\u2502   \u2514\u2500\u2500 test.sh-tpl             # Test execution\n\u251c\u2500\u2500 requirements.txt-tpl         # \u2705 Dependencies (required)\n\u251c\u2500\u2500 setup.py-tpl                # \u2705 Package setup (required)\n\u251c\u2500\u2500 setup.cfg-tpl               # Development tools configuration\n\u251c\u2500\u2500 README.md-tpl               # \u2705 Project documentation (required)\n\u251c\u2500\u2500 .env-tpl                    # Environment variables template\n\u2514\u2500\u2500 .gitignore-tpl              # Git ignore file\n</code></pre>"},{"location":"contributing/template-creation-guide/#file-writing-guide","title":"File Writing Guide","text":""},{"location":"contributing/template-creation-guide/#1-writing-mainpy-tpl","title":"1. Writing main.py-tpl","text":"<pre><code>\"\"\"\nFastAPI application entry point\n\nThis file is the main application for the &lt;project_name&gt; project created with FastAPI-fastkit.\n\"\"\"\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\nfrom api.api import api_router\nfrom core.config import settings\n\n# Create FastAPI app (required for inspector validation)\napp = FastAPI(\n    title=\"&lt;project_name&gt;\",\n    description=\"Project created with FastAPI-fastkit\",\n    version=\"1.0.0\",\n)\n\n# CORS middleware configuration\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Register API router\napp.include_router(api_router, prefix=\"/api/v1\")\n\n@app.get(\"/\")\nasync def root():\n    \"\"\"Root endpoint\"\"\"\n    return {\"message\": \"Hello from &lt;project_name&gt;!\"}\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return {\"status\": \"healthy\"}\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"contributing/template-creation-guide/#2-writing-requirementstxt-tpl","title":"2. Writing requirements.txt-tpl","text":"<pre><code># FastAPI core dependencies (required)\nfastapi==0.104.1\nuvicorn[standard]==0.24.0\n\n# Data validation\npydantic==2.5.0\npydantic-settings==2.1.0\n\n# Environment variable management\npython-dotenv==1.0.0\n\n# Database (if needed)\nsqlalchemy==2.0.23\nalembic==1.13.0\n\n# Development tools\npytest==7.4.3\npytest-asyncio==0.21.1\nhttpx==0.25.2\n\n# Code quality\nblack==23.11.0\nisort==5.12.0\nmypy==1.7.1\n</code></pre>"},{"location":"contributing/template-creation-guide/#3-writing-setuppy-tpl","title":"3. Writing setup.py-tpl","text":"<pre><code>\"\"\"\n&lt;project_name&gt; package setup\n\nProject created with FastAPI-fastkit.\n\"\"\"\nfrom setuptools import find_packages, setup\n\n# Dependencies list (type annotation required)\ninstall_requires: list[str] = [\n    \"fastapi&gt;=0.104.0\",\n    \"uvicorn[standard]&gt;=0.24.0\",\n    \"pydantic&gt;=2.5.0\",\n    \"pydantic-settings&gt;=2.1.0\",\n    \"python-dotenv&gt;=1.0.0\",\n]\n\nsetup(\n    name=\"&lt;project_name&gt;\",\n    version=\"1.0.0\",\n    description=\"[fastapi-fastkit templated] &lt;description&gt;\",  # Required keyword\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    author=\"&lt;author&gt;\",\n    author_email=\"&lt;author_email&gt;\",\n    packages=find_packages(),\n    install_requires=install_requires,\n    python_requires=\"&gt;=3.8\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n    ],\n)\n</code></pre>"},{"location":"contributing/template-creation-guide/#4-writing-test-files","title":"4. Writing Test Files","text":"<pre><code># tests/test_items.py-tpl\n\"\"\"\nItems API test module\n\"\"\"\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom main import app\n\nclient = TestClient(app)\n\ndef test_read_root():\n    \"\"\"Test root endpoint\"\"\"\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert \"message\" in response.json()\n\ndef test_health_check():\n    \"\"\"Test health check\"\"\"\n    response = client.get(\"/health\")\n    assert response.status_code == 200\n    assert response.json() == {\"status\": \"healthy\"}\n\ndef test_create_item():\n    \"\"\"Test item creation\"\"\"\n    item_data = {\n        \"name\": \"Test Item\",\n        \"description\": \"Test Description\"\n    }\n    response = client.post(\"/api/v1/items/\", json=item_data)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"name\"] == item_data[\"name\"]\n    assert data[\"description\"] == item_data[\"description\"]\n\ndef test_read_items():\n    \"\"\"Test reading items list\"\"\"\n    response = client.get(\"/api/v1/items/\")\n    assert response.status_code == 200\n    assert isinstance(response.json(), list)\n</code></pre>"},{"location":"contributing/template-creation-guide/#step-3-local-validation","title":"\ud83d\udd0d Step 3: Local Validation","text":""},{"location":"contributing/template-creation-guide/#running-automated-validation-scripts","title":"Running Automated Validation Scripts","text":"<p>Once your new template is ready, validate it with these commands:</p> <pre><code># Validate all templates\nmake inspect-templates\n\n# Validate specific template only\nmake inspect-template TEMPLATES=\"fastapi-your-template\"\n\n# Validate with verbose output\npython scripts/inspect-templates.py --templates \"fastapi-your-template\" --verbose\n</code></pre>"},{"location":"contributing/template-creation-guide/#validation-checklist","title":"Validation Checklist","text":"<p>The inspector automatically validates the following items:</p>"},{"location":"contributing/template-creation-guide/#file-structure-validation","title":"\u2705 File Structure Validation","text":"<ul> <li>[ ] <code>tests/</code> directory exists</li> <li>[ ] <code>requirements.txt-tpl</code> file exists</li> <li>[ ] <code>setup.py-tpl</code> file exists</li> <li>[ ] <code>README.md-tpl</code> file exists</li> </ul>"},{"location":"contributing/template-creation-guide/#file-extension-validation","title":"\u2705 File Extension Validation","text":"<ul> <li>[ ] All Python files use <code>.py-tpl</code> extension</li> <li>[ ] No <code>.py</code> extension files exist</li> </ul>"},{"location":"contributing/template-creation-guide/#dependencies-validation","title":"\u2705 Dependencies Validation","text":"<ul> <li>[ ] <code>requirements.txt-tpl</code> includes <code>fastapi</code></li> <li>[ ] <code>setup.py-tpl</code>'s <code>install_requires</code> includes <code>fastapi</code></li> <li>[ ] <code>setup.py-tpl</code>'s description includes <code>[fastapi-fastkit templated]</code></li> </ul>"},{"location":"contributing/template-creation-guide/#fastapi-implementation-validation","title":"\u2705 FastAPI Implementation Validation","text":"<ul> <li>[ ] <code>FastAPI</code> import exists in <code>main.py-tpl</code></li> <li>[ ] App creation like <code>app = FastAPI()</code> exists in <code>main.py-tpl</code></li> </ul>"},{"location":"contributing/template-creation-guide/#test-execution-validation","title":"\u2705 Test Execution Validation","text":"<ul> <li>[ ] Virtual environment creation successful</li> <li>[ ] Dependencies installation successful</li> <li>[ ] All pytest tests pass</li> </ul>"},{"location":"contributing/template-creation-guide/#automated-template-testing","title":"\u2705 Automated Template Testing","text":"<p>FastAPI-fastkit includes automated template testing that runs comprehensive tests for all templates:</p> <p>Test Coverage: - \u2705 Template creation process - \u2705 Project metadata injection - \u2705 Virtual environment setup - \u2705 Dependency installation (all package managers) - \u2705 Basic project structure validation - \u2705 FastAPI project identification</p> <p>Test Execution: <pre><code># Test all templates automatically\n$ pytest tests/test_templates/test_all_templates.py -v\n\n# Test specific template\n$ pytest tests/test_templates/test_all_templates.py::TestAllTemplates::test_template_creation[your-template-name] -v\n</code></pre></p> <p>Template Test Discovery: New templates are automatically discovered and tested without manual configuration:</p> <ol> <li>\u2705 Zero Configuration: Add template \u2192 automatic testing</li> <li>\u2705 Consistent Testing: Same quality standards for all templates</li> <li>\u2705 Multiple Package Managers: Tests with UV, PDM, Poetry, and PIP</li> <li>\u2705 Comprehensive Validation: Structure, metadata, and functionality checks</li> </ol> <p>What This Means for You: - \ud83d\ude80 No Additional Test Files: Your template is tested automatically - \u26a1 Faster Development: Focus on template content, not test setup - \ud83d\udee1\ufe0f Quality Assurance: Consistent testing across all templates - \ud83d\udd04 CI/CD Integration: Automatic testing in pull requests</p> <p>Manual Testing Still Required: - \ud83e\uddea Template-specific functionality: Business logic and custom features - \ud83d\udd27 Integration testing: External services and complex workflows - \ud83d\udcf1 End-to-end scenarios: Complete user workflows</p> <p>Testing Best Practices: <pre><code># 1. Test your template locally\n$ fastkit startdemo your-template-name\n\n# 2. Run automated tests\n$ pytest tests/test_templates/test_all_templates.py::TestAllTemplates::test_template_creation[your-template-name] -v\n\n# 3. Test with different package managers\n$ fastkit startdemo your-template-name --package-manager poetry\n$ fastkit startdemo your-template-name --package-manager pdm\n$ fastkit startdemo your-template-name --package-manager uv\n</code></pre></p>"},{"location":"contributing/template-creation-guide/#manual-validation-checklist","title":"Manual Validation Checklist","text":"<p>In addition to automated validation, manually check the following items:</p>"},{"location":"contributing/template-creation-guide/#code-quality","title":"\ud83d\udd27 Code Quality","text":"<ul> <li>[ ] Code follows PEP 8 style guide</li> <li>[ ] Appropriate type hints usage</li> <li>[ ] Meaningful variable and function names</li> <li>[ ] Proper comments and docstrings</li> </ul>"},{"location":"contributing/template-creation-guide/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<ul> <li>[ ] Separation of concerns (API, business logic, data access separation)</li> <li>[ ] Reusable component design</li> <li>[ ] Scalable structure</li> <li>[ ] Security best practices applied</li> </ul>"},{"location":"contributing/template-creation-guide/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>[ ] README.md-tpl follows PROJECT_README_TEMPLATE.md format</li> <li>[ ] Installation and execution methods specified</li> <li>[ ] API documentation (OpenAPI/Swagger)</li> <li>[ ] Environment variables explanation</li> </ul>"},{"location":"contributing/template-creation-guide/#step-4-documentation","title":"\ud83d\udcda Step 4: Documentation","text":""},{"location":"contributing/template-creation-guide/#writing-readmemd-tpl","title":"Writing README.md-tpl","text":"<p>Write based on PROJECT_README_TEMPLATE.md guide.</p>"},{"location":"contributing/template-creation-guide/#writing-template-description-documentation","title":"Writing Template Description Documentation","text":"<p>Add a description of your new template to <code>src/fastapi_fastkit/fastapi_project_template/README.md</code>:</p> <pre><code>## fastapi-your-template\n\nWrite a brief description and use cases for your new template here.\n\n### Features:\n- Feature 1\n- Feature 2\n- Feature 3\n\n### Use Cases:\n- Use case 1\n- Use case 2\n</code></pre>"},{"location":"contributing/template-creation-guide/#step-5-submission-review","title":"\ud83d\ude80 Step 5: Submission &amp; Review","text":""},{"location":"contributing/template-creation-guide/#pre-pr-creation-checklist","title":"Pre-PR Creation Checklist","text":"<ul> <li>[ ] All automated validation passed (<code>make inspect-templates</code>)</li> <li>[ ] Code formatting completed (<code>make format</code>)</li> <li>[ ] Linting checks passed (<code>make lint</code>)</li> <li>[ ] All tests passed (<code>make test</code>)</li> <li>[ ] Documentation completed</li> <li>[ ] CONTRIBUTING.md guidelines followed</li> </ul>"},{"location":"contributing/template-creation-guide/#pr-title-and-description","title":"PR Title and Description","text":"<pre><code>[FEAT] Add fastapi-{template-name} template\n\n## Overview\nAdds a new {purpose} template.\n\n## Key Features\n- Feature 1\n- Feature 2\n- Feature 3\n\n## Validation Results\n- [ ] Inspector validation passed\n- [ ] All tests passed\n- [ ] Documentation completed\n\n## Usage Example\n\\```bash\nfastkit startdemo\n# Select template: fastapi-{template-name}\n\\```\n\n## Related Issues\nCloses #issue-number\n</code></pre>"},{"location":"contributing/template-creation-guide/#review-process","title":"Review Process","text":"<ol> <li>Automated Validation: GitHub Actions automatically validates the template</li> <li>Code Review: Maintainers and community review the code</li> <li>Testing: Template is tested in various environments</li> <li>Documentation Review: Review documentation accuracy and completeness</li> <li>Approval &amp; Merge: Merge to main branch when all requirements are satisfied</li> </ol>"},{"location":"contributing/template-creation-guide/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"contributing/template-creation-guide/#security-considerations","title":"Security Considerations","text":"<ul> <li>Manage sensitive information with environment variables</li> <li>Proper CORS configuration</li> <li>Input data validation</li> <li>SQL injection prevention</li> </ul>"},{"location":"contributing/template-creation-guide/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Utilize asynchronous processing</li> <li>Optimize database queries</li> <li>Appropriate caching strategies</li> <li>Response compression settings</li> </ul>"},{"location":"contributing/template-creation-guide/#maintainability","title":"Maintainability","text":"<ul> <li>Clear code structure</li> <li>Comprehensive test coverage</li> <li>Detailed documentation</li> <li>Logging and monitoring setup</li> </ul>"},{"location":"contributing/template-creation-guide/#need-help","title":"\ud83c\udd98 Need Help?","text":"<ul> <li>\ud83d\udcd6 Development Setup Guide</li> <li>\ud83d\udccb Code Guidelines</li> <li>\ud83d\udcac GitHub Discussions</li> <li>\ud83d\udce7 Contact Maintainer</li> </ul> <p>Adding a new template is a great contribution to the FastAPI-fastkit community. Your ideas and efforts will be a great help to other developers! \ud83d\ude80</p>"},{"location":"reference/faq/","title":"Frequently Asked Questions","text":"<p>Common questions and answers about FastAPI-fastkit.</p>"},{"location":"reference/faq/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"reference/faq/#q-what-python-versions-are-supported","title":"Q: What Python versions are supported?","text":"<p>A: FastAPI-fastkit requires Python 3.12 or higher. We recommend using the latest stable Python version for the best experience.</p> <pre><code>$ python --version\nPython 3.12.1\n\n$ pip install fastapi-fastkit\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-install-fastapi-fastkit","title":"Q: How do I install FastAPI-fastkit?","text":"<p>A: You can install FastAPI-fastkit using pip:</p> <pre><code># Latest stable version\n$ pip install fastapi-fastkit\n\n# Development version from GitHub\n$ pip install git+https://github.com/bnbong/FastAPI-fastkit.git\n\n# Specific version\n$ pip install fastapi-fastkit==1.0.0\n</code></pre>"},{"location":"reference/faq/#q-installation-fails-with-permission-errors","title":"Q: Installation fails with permission errors","text":"<p>A: Try installing in a virtual environment or with user permissions:</p> <pre><code># Create virtual environment\n$ python -m venv fastapi-env\n$ source fastapi-env/bin/activate  # On Windows: fastapi-env\\Scripts\\activate\n\n# Install in virtual environment\n$ pip install fastapi-fastkit\n\n# Or install for current user only\n$ pip install --user fastapi-fastkit\n</code></pre>"},{"location":"reference/faq/#q-command-fastkit-not-found-after-installation","title":"Q: Command <code>fastkit</code> not found after installation","text":"<p>A: This usually means the installation directory is not in your PATH:</p> <pre><code># Check if installed\n$ pip show fastapi-fastkit\n\n# Find installation location\n$ python -c \"import fastapi_fastkit; print(fastapi_fastkit.__file__)\"\n\n# Try running directly\n$ python -m fastapi_fastkit --version\n\n# Or add to PATH (Linux/macOS)\n$ export PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre>"},{"location":"reference/faq/#project-creation","title":"Project Creation","text":""},{"location":"reference/faq/#q-what-dependency-stacks-are-available","title":"Q: What dependency stacks are available?","text":"<p>A: FastAPI-fastkit offers three dependency stacks:</p> <ul> <li>MINIMAL: FastAPI, Uvicorn, Pydantic (basic web API)</li> <li>STANDARD: Adds SQLAlchemy, Alembic, pytest (database support)</li> <li>FULL: Adds Redis, Celery (background tasks)</li> </ul> <pre><code>$ fastkit init\n# Select your preferred stack during project creation\n</code></pre>"},{"location":"reference/faq/#q-can-i-customize-the-project-template","title":"Q: Can I customize the project template?","text":"<p>A: Yes! You can either:</p> <ol> <li>Use existing templates with <code>fastkit startdemo</code></li> <li>Create custom templates by copying and modifying existing ones</li> <li>Add routes incrementally with <code>fastkit addroute</code></li> </ol> <pre><code># Use pre-built templates\n$ fastkit list-templates\n$ fastkit startdemo\n\n# Add routes to existing project\n$ fastkit addroute my-project users\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-create-a-project-with-a-specific-name-format","title":"Q: How do I create a project with a specific name format?","text":"<p>A: Project names must be valid Python identifiers:</p> <ul> <li>\u2705 <code>my-api</code>, <code>blog_system</code>, <code>UserService</code></li> <li>\u274c <code>my api</code>, <code>123project</code>, <code>project-name!</code></li> </ul> <pre><code>$ fastkit init\nEnter the project name: my_awesome_api  # Valid\nEnter the project name: my-awesome-api  # Valid (hyphens converted to underscores)\n</code></pre>"},{"location":"reference/faq/#q-project-creation-fails-with-directory-already-exists","title":"Q: Project creation fails with \"directory already exists\"","text":"<p>A: The project directory already exists. Either:</p> <ol> <li>Choose a different name</li> <li>Remove the existing directory (if safe to do so)</li> <li>Use a different output location</li> </ol> <pre><code># Check if directory exists\n$ ls my-project\n\n# Remove if safe (CAUTION!)\n$ rm -rf my-project\n\n# Or create in different location\n$ mkdir projects\n$ cd projects\n$ fastkit init\n</code></pre>"},{"location":"reference/faq/#route-development","title":"Route Development","text":""},{"location":"reference/faq/#q-how-do-i-add-authentication-to-my-routes","title":"Q: How do I add authentication to my routes?","text":"<p>A: Create a dependency for authentication:</p> <pre><code># src/api/deps.py\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer\n\nsecurity = HTTPBearer()\n\ndef get_current_user(token: str = Depends(security)):\n    # Verify token and return user\n    if not verify_token(token):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\"\n        )\n    return get_user_from_token(token)\n\n# src/api/routes/users.py\n@router.get(\"/me\")\ndef get_current_user_profile(user = Depends(get_current_user)):\n    return user\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-add-database-models-to-my-project","title":"Q: How do I add database models to my project?","text":"<p>A: For STANDARD or FULL stacks, create SQLAlchemy models:</p> <pre><code># src/models/users.py\nfrom sqlalchemy import Column, Integer, String, Boolean\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    username = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-add-validation-to-request-data","title":"Q: How do I add validation to request data?","text":"<p>A: Use Pydantic models in your schemas:</p> <pre><code># src/schemas/users.py\nfrom pydantic import BaseModel, EmailStr, Field\n\nclass UserCreate(BaseModel):\n    email: EmailStr\n    username: str = Field(..., min_length=3, max_length=50)\n    password: str = Field(..., min_length=8)\n\n    @validator('username')\n    def validate_username(cls, v):\n        if not v.isalnum():\n            raise ValueError('Username must be alphanumeric')\n        return v\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-handle-file-uploads","title":"Q: How do I handle file uploads?","text":"<p>A: Use FastAPI's <code>UploadFile</code>:</p> <pre><code>from fastapi import UploadFile, File\n\n@router.post(\"/upload\")\nasync def upload_file(file: UploadFile = File(...)):\n    contents = await file.read()\n\n    # Save file\n    with open(f\"uploads/{file.filename}\", \"wb\") as f:\n        f.write(contents)\n\n    return {\"filename\": file.filename, \"size\": len(contents)}\n</code></pre>"},{"location":"reference/faq/#templates","title":"Templates","text":""},{"location":"reference/faq/#q-what-templates-are-available","title":"Q: What templates are available?","text":"<p>A: FastAPI-fastkit includes several pre-built templates:</p> <pre><code>$ fastkit list-templates\n                      Available Templates\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 fastapi-default         \u2502 Simple FastAPI Project            \u2502\n\u2502 fastapi-async-crud      \u2502 Async Item Management API Server  \u2502\n\u2502 fastapi-custom-response \u2502 Custom Response System            \u2502\n\u2502 fastapi-dockerized      \u2502 Dockerized FastAPI API           \u2502\n\u2502 fastapi-psql-orm        \u2502 PostgreSQL FastAPI API           \u2502\n\u2502 fastapi-empty           \u2502 Minimal FastAPI Project          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-use-a-specific-template","title":"Q: How do I use a specific template?","text":"<p>A: Use the <code>startdemo</code> command:</p> <pre><code>$ fastkit startdemo\nEnter the project name: my-blog\nSelect template: fastapi-psql-orm\n</code></pre>"},{"location":"reference/faq/#q-can-i-create-my-own-templates","title":"Q: Can I create my own templates?","text":"<p>A: Yes! Create a directory structure and use template variables:</p> <pre><code>my-template/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 main.py-tpl\n\u251c\u2500\u2500 requirements.txt-tpl\n\u2514\u2500\u2500 template.yaml\n</code></pre> <pre><code># main.py-tpl\nfrom fastapi import FastAPI\n\napp = FastAPI(title=\"{{PROJECT_NAME}}\")\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello from {{PROJECT_NAME}}!\"}\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-modify-an-existing-template","title":"Q: How do I modify an existing template?","text":"<p>A: Templates are in the <code>fastapi_project_template</code> directory. You can:</p> <ol> <li>Fork the repository and modify templates</li> <li>Create a custom template based on existing ones</li> <li>Override specific files after project creation</li> </ol>"},{"location":"reference/faq/#development-server","title":"Development Server","text":""},{"location":"reference/faq/#q-how-do-i-start-the-development-server","title":"Q: How do I start the development server?","text":"<p>A: Use the <code>runserver</code> command from your project directory:</p> <pre><code>$ cd my-project\n$ source .venv/bin/activate  # Activate virtual environment\n$ fastkit runserver\nINFO:     Uvicorn running on http://127.0.0.1:8000\n</code></pre>"},{"location":"reference/faq/#q-server-wont-start-address-already-in-use","title":"Q: Server won't start - \"Address already in use\"","text":"<p>A: Port 8000 is busy. Use a different port or kill the existing process:</p> <pre><code># Use different port\n$ fastkit runserver --port 8080\n\n# Or find and kill existing process\n$ lsof -ti:8000 | xargs kill -9\n\n# On Windows\n$ netstat -ano | findstr :8000\n$ taskkill /PID &lt;PID&gt; /F\n</code></pre>"},{"location":"reference/faq/#q-auto-reload-not-working","title":"Q: Auto-reload not working","text":"<p>A: Make sure you're in the project directory and have the virtual environment activated:</p> <pre><code># Check current directory\n$ pwd\n/path/to/my-project\n\n# Check virtual environment\n$ which python\n/path/to/my-project/.venv/bin/python\n\n# Start with explicit reload\n$ fastkit runserver --reload\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-configure-the-server-for-production","title":"Q: How do I configure the server for production?","text":"<p>A: Don't use the development server in production. Instead:</p> <pre><code># Use gunicorn or similar WSGI server\n$ pip install gunicorn\n$ gunicorn src.main:app -w 4 -k uvicorn.workers.UvicornWorker\n\n# Or use Docker with the fastapi-dockerized template\n$ fastkit startdemo  # Select fastapi-dockerized\n$ docker build -t my-app .\n$ docker run -p 8000:8000 my-app\n</code></pre>"},{"location":"reference/faq/#performance-optimization","title":"Performance &amp; Optimization","text":""},{"location":"reference/faq/#q-how-do-i-improve-api-performance","title":"Q: How do I improve API performance?","text":"<p>A: Several optimization strategies:</p> <ol> <li>Use async/await for I/O operations</li> <li>Add caching for expensive operations</li> <li>Optimize database queries</li> <li>Use background tasks for heavy processing</li> </ol> <pre><code># Async endpoint\n@router.get(\"/users/{user_id}\")\nasync def get_user(user_id: int):\n    user = await users_service.get_user_async(user_id)\n    return user\n\n# Background task\nfrom fastapi import BackgroundTasks\n\n@router.post(\"/send-email\")\ndef send_email(background_tasks: BackgroundTasks, email: str):\n    background_tasks.add_task(send_notification_email, email)\n    return {\"message\": \"Email will be sent in background\"}\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-add-caching","title":"Q: How do I add caching?","text":"<p>A: Use Redis for caching:</p> <pre><code>import redis\nfrom functools import wraps\n\nredis_client = redis.Redis(host='localhost', port=6379, db=0)\n\ndef cache_result(expiration: int = 300):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            cache_key = f\"{func.__name__}:{hash(str(args) + str(kwargs))}\"\n\n            # Try to get from cache\n            cached = redis_client.get(cache_key)\n            if cached:\n                return json.loads(cached)\n\n            # Execute function and cache result\n            result = await func(*args, **kwargs)\n            redis_client.setex(cache_key, expiration, json.dumps(result))\n            return result\n        return wrapper\n    return decorator\n\n@cache_result(expiration=600)\nasync def get_expensive_data():\n    # Expensive operation\n    return complex_calculation()\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-handle-many-concurrent-requests","title":"Q: How do I handle many concurrent requests?","text":"<p>A: Use appropriate server configuration:</p> <pre><code># Development\n$ fastkit runserver --workers 1  # Single worker for development\n\n# Production\n$ gunicorn src.main:app -w 4 -k uvicorn.workers.UvicornWorker\n$ uvicorn src.main:app --workers 4 --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"reference/faq/#testing","title":"Testing","text":""},{"location":"reference/faq/#q-how-do-i-run-tests","title":"Q: How do I run tests?","text":"<p>A: Use pytest from your project directory:</p> <pre><code>$ cd my-project\n$ source .venv/bin/activate\n$ python -m pytest\n\n# With coverage\n$ python -m pytest --cov=src\n\n# Specific test file\n$ python -m pytest tests/test_users.py\n\n# With verbose output\n$ python -m pytest -v\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-write-api-tests","title":"Q: How do I write API tests?","text":"<p>A: Use FastAPI's test client:</p> <pre><code>from fastapi.testclient import TestClient\nfrom src.main import app\n\nclient = TestClient(app)\n\ndef test_create_user():\n    response = client.post(\n        \"/api/v1/users/\",\n        json={\"email\": \"test@example.com\", \"username\": \"testuser\"}\n    )\n    assert response.status_code == 201\n    assert response.json()[\"email\"] == \"test@example.com\"\n\ndef test_get_user():\n    response = client.get(\"/api/v1/users/1\")\n    assert response.status_code == 200\n</code></pre>"},{"location":"reference/faq/#q-how-do-i-mock-external-dependencies","title":"Q: How do I mock external dependencies?","text":"<p>A: Use pytest fixtures and mocking:</p> <pre><code>import pytest\nfrom unittest.mock import Mock, patch\n\n@pytest.fixture\ndef mock_database():\n    with patch('src.database.get_db') as mock_db:\n        mock_db.return_value = Mock()\n        yield mock_db\n\ndef test_user_creation_with_mock_db(mock_database):\n    # Test with mocked database\n    response = client.post(\"/api/v1/users/\", json=user_data)\n    assert response.status_code == 201\n</code></pre>"},{"location":"reference/faq/#contributing","title":"Contributing","text":""},{"location":"reference/faq/#q-how-do-i-contribute-to-fastapi-fastkit","title":"Q: How do I contribute to FastAPI-fastkit?","text":"<p>A: Follow these steps:</p> <ol> <li>Fork the repository on GitHub</li> <li>Set up development environment</li> <li>Create a feature branch</li> <li>Make your changes with tests</li> <li>Submit a pull request</li> </ol> <pre><code>$ git clone https://github.com/yourusername/FastAPI-fastkit.git\n$ cd FastAPI-fastkit\n$ make install-dev  # Set up development environment\n$ git checkout -b feature/my-feature\n# Make changes...\n$ make check-all test  # Run all checks and tests\n$ git commit -m \"feat: add new feature\"\n$ git push origin feature/my-feature\n</code></pre>"},{"location":"reference/faq/#q-what-should-i-include-in-a-pull-request","title":"Q: What should I include in a pull request?","text":"<p>A: Every pull request should include:</p> <ul> <li>[ ] Clear description of changes</li> <li>[ ] Tests for new functionality</li> <li>[ ] Documentation updates if needed</li> <li>[ ] Following code guidelines</li> <li>[ ] All checks passing</li> </ul>"},{"location":"reference/faq/#q-how-do-i-report-a-bug","title":"Q: How do I report a bug?","text":"<p>A: Create an issue on GitHub with:</p> <ol> <li>Bug description and expected behavior</li> <li>Steps to reproduce</li> <li>Environment information (OS, Python version, etc.)</li> <li>Error messages or logs</li> <li>Minimal example if possible</li> </ol>"},{"location":"reference/faq/#q-how-do-i-request-a-new-feature","title":"Q: How do I request a new feature?","text":"<p>A: Open a feature request issue with:</p> <ol> <li>Clear description of the feature</li> <li>Use case and motivation</li> <li>Proposed implementation (optional)</li> <li>Examples of similar features</li> </ol>"},{"location":"reference/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/faq/#q-im-getting-import-errors","title":"Q: I'm getting import errors","text":"<p>A: Check your Python path and virtual environment:</p> <pre><code># Check virtual environment is activated\n$ which python\n/path/to/project/.venv/bin/python\n\n# Check Python path\n$ python -c \"import sys; print(sys.path)\"\n\n# Reinstall in editable mode (for development)\n$ pip install -e .\n</code></pre>"},{"location":"reference/faq/#q-database-connection-issues","title":"Q: Database connection issues","text":"<p>A: For database templates, ensure database is running:</p> <pre><code># PostgreSQL template\n$ docker-compose up -d postgres  # Start database\n$ alembic upgrade head            # Run migrations\n\n# Check connection\n$ docker-compose logs postgres\n</code></pre>"},{"location":"reference/faq/#q-template-files-not-found","title":"Q: Template files not found","text":"<p>A: This usually indicates a template path issue:</p> <pre><code># Check available templates\n$ fastkit list-templates\n\n# Check template directory\n$ python -c \"import fastapi_fastkit; print(fastapi_fastkit.__path__)\"\n\n# Reinstall if templates missing\n$ pip uninstall fastapi-fastkit\n$ pip install fastapi-fastkit\n</code></pre>"},{"location":"reference/faq/#q-pre-commit-hooks-failing","title":"Q: Pre-commit hooks failing","text":"<p>A: Install and run the hooks:</p> <pre><code>$ pip install pre-commit\n$ pre-commit install\n$ pre-commit run --all-files\n\n# Fix formatting issues\n$ black src/ tests/\n$ isort src/ tests/\n</code></pre>"},{"location":"reference/faq/#q-tests-failing-on-ci-but-passing-locally","title":"Q: Tests failing on CI but passing locally","text":"<p>A: Common causes and solutions:</p> <ol> <li>Environment differences: Check Python versions match</li> <li>Missing dependencies: Ensure test requirements are installed</li> <li>Path issues: Use absolute imports</li> <li>Timing issues: Add appropriate waits in async tests</li> </ol> <pre><code># Test with same Python version as CI\n$ python3.12 -m pytest\n\n# Check for missing dependencies\n$ pip install -r requirements-dev.txt\n\n# Run tests in isolated environment\n$ tox\n</code></pre>"},{"location":"reference/faq/#getting-help","title":"Getting Help","text":""},{"location":"reference/faq/#q-where-can-i-get-help","title":"Q: Where can I get help?","text":"<p>A: Several options for getting help:</p> <ul> <li>GitHub Issues: For bugs and feature requests</li> <li>GitHub Discussions: For questions and community support</li> <li>Documentation: User guides and tutorials</li> <li>Code Examples: Check existing templates and tests</li> </ul>"},{"location":"reference/faq/#q-how-do-i-stay-updated","title":"Q: How do I stay updated?","text":"<p>A: Follow project updates:</p> <ul> <li>Watch the repository on GitHub</li> <li>Check releases for new features</li> <li>Read the changelog for breaking changes</li> <li>Follow best practices in documentation</li> </ul> <p>Pro Tips</p> <ul> <li>Always use virtual environments for Python projects</li> <li>Keep your FastAPI-fastkit installation up to date</li> <li>Use <code>fastkit --help</code> to see available commands</li> <li>Check the documentation when stuck</li> <li>Don't hesitate to ask questions in GitHub Discussions</li> </ul>"},{"location":"reference/template-quality-assurance/","title":"Template Quality Assurance","text":"<p>FastAPI-fastkit provides comprehensive automated template validation to ensure all templates maintain high quality and remain functional across different environments and package managers.</p>"},{"location":"reference/template-quality-assurance/#multi-layer-quality-assurance","title":"Multi-Layer Quality Assurance","text":"<p>FastAPI-fastkit employs two complementary quality assurance systems:</p>"},{"location":"reference/template-quality-assurance/#1-static-template-inspection","title":"1. Static Template Inspection","text":"<p>Weekly automated validation of template structure and syntax</p>"},{"location":"reference/template-quality-assurance/#2-dynamic-template-testing","title":"2. Dynamic Template Testing","text":"<p>Comprehensive end-to-end testing with actual project creation</p>"},{"location":"reference/template-quality-assurance/#automated-weekly-inspection","title":"Automated Weekly Inspection","text":"<p>Every Wednesday at midnight (UTC), our GitHub Actions workflow automatically inspects all FastAPI templates to ensure they meet quality standards:</p> <ul> <li>\u2705 File Structure Validation - Ensures all required files and directories are present</li> <li>\u2705 File Extension Verification - Validates that template files use correct <code>.py-tpl</code> extensions</li> <li>\u2705 Dependency Checking - Confirms FastAPI and required dependencies are properly defined</li> <li>\u2705 FastAPI Implementation - Verifies that templates contain proper FastAPI app initialization</li> <li>\u2705 Test Execution - Runs template tests to ensure functionality</li> </ul>"},{"location":"reference/template-quality-assurance/#automated-template-testing-system","title":"Automated Template Testing System","text":"<p>FastAPI-fastkit includes a revolutionary automated testing system that provides comprehensive validation of every template:</p>"},{"location":"reference/template-quality-assurance/#dynamic-template-discovery","title":"Dynamic Template Discovery","text":"<p>The testing system automatically discovers all templates without manual configuration:</p> <pre><code># Test all templates automatically\n$ pytest tests/test_templates/test_all_templates.py -v\n\n# Results show all discovered templates\nPASSED tests/test_templates/test_all_templates.py::TestAllTemplates::test_template_creation[fastapi-default]\nPASSED tests/test_templates/test_all_templates.py::TestAllTemplates::test_template_creation[fastapi-async-crud]\nPASSED tests/test_templates/test_all_templates.py::TestAllTemplates::test_template_creation[fastapi-dockerized]\nPASSED tests/test_templates/test_all_templates.py::TestAllTemplates::test_template_creation[fastapi-psql-orm]\n</code></pre>"},{"location":"reference/template-quality-assurance/#comprehensive-test-coverage","title":"Comprehensive Test Coverage","text":"<p>Each template undergoes comprehensive end-to-end testing:</p>"},{"location":"reference/template-quality-assurance/#project-creation-process","title":"\u2705 Project Creation Process","text":"<ul> <li>Template copying and file transformation</li> <li>Project metadata injection (name, author, description)</li> <li>File structure validation</li> </ul>"},{"location":"reference/template-quality-assurance/#package-manager-compatibility","title":"\u2705 Package Manager Compatibility","text":"<ul> <li>UV (default): Fast Rust-based package manager</li> <li>PDM: Modern Python dependency management</li> <li>Poetry: Established dependency management</li> <li>PIP: Traditional Python package manager</li> </ul>"},{"location":"reference/template-quality-assurance/#virtual-environment-management","title":"\u2705 Virtual Environment Management","text":"<ul> <li>Environment creation for each package manager</li> <li>Dependency installation verification</li> <li>Package manager-specific workflows</li> </ul>"},{"location":"reference/template-quality-assurance/#dependency-resolution","title":"\u2705 Dependency Resolution","text":"<ul> <li><code>pyproject.toml</code> generation (UV, PDM, Poetry)</li> <li><code>requirements.txt</code> generation (PIP)</li> <li>Metadata compliance (PEP 621)</li> <li>Build system configuration</li> </ul>"},{"location":"reference/template-quality-assurance/#project-structure-validation","title":"\u2705 Project Structure Validation","text":"<ul> <li>FastAPI project identification</li> <li>Required file existence</li> <li>Directory structure verification</li> </ul>"},{"location":"reference/template-quality-assurance/#test-execution-examples","title":"Test Execution Examples","text":"<p>Run all template tests: <pre><code>$ pytest tests/test_templates/test_all_templates.py -v\n</code></pre></p> <p>Test specific template: <pre><code>$ pytest tests/test_templates/test_all_templates.py::TestAllTemplates::test_template_creation[fastapi-default] -v\n</code></pre></p> <p>Test with PDM environment: <pre><code>$ pdm run pytest tests/test_templates/test_all_templates.py -v\n</code></pre></p>"},{"location":"reference/template-quality-assurance/#continuous-integration","title":"Continuous Integration","text":"<p>The automated testing system runs in CI/CD pipelines:</p> <ul> <li>\u2705 Pull Request Validation: Every PR tests affected templates</li> <li>\u2705 Nightly Testing: Complete template suite validation</li> <li>\u2705 Package Manager Testing: Cross-validation with all managers</li> <li>\u2705 Environment Testing: Multiple Python versions and platforms</li> </ul>"},{"location":"reference/template-quality-assurance/#benefits-for-contributors","title":"Benefits for Contributors","text":"<p>Zero Configuration Testing: - \ud83d\ude80 Add new template \u2192 automatic testing - \u26a1 No manual test file creation required - \ud83d\udee1\ufe0f Consistent quality standards</p> <p>Comprehensive Coverage: - \ud83d\udd0d End-to-end project creation testing - \ud83d\udce6 Multi package manager validation - \ud83c\udfd7\ufe0f Complete dependency resolution testing - \u2705 Real-world usage simulation</p> <p>Developer Experience: - \ud83c\udfaf Focus on Template Content: Testing is automatic - \ud83d\udd04 Immediate Feedback: Fast test execution - \ud83d\udcca Clear Results: Detailed test reporting - \ud83d\udeab No Boilerplate: Zero test configuration needed</p>"},{"location":"reference/template-quality-assurance/#manual-template-inspection","title":"Manual Template Inspection","text":"<p>For development and debugging purposes, you can manually inspect templates using our local inspection script or Makefile commands:</p>"},{"location":"reference/template-quality-assurance/#using-the-inspection-script-directly","title":"Using the Inspection Script Directly","text":"<pre><code># Inspect all templates\n$ python scripts/inspect-templates.py\n\n# Inspect specific templates\n$ python scripts/inspect-templates.py --templates fastapi-default,fastapi-async-crud\n\n# Verbose output with detailed information\n$ python scripts/inspect-templates.py --verbose\n\n# Save results to custom file\n$ python scripts/inspect-templates.py --output my_results.json\n</code></pre>"},{"location":"reference/template-quality-assurance/#using-makefile-commands","title":"Using Makefile Commands","text":"<pre><code># Inspect all templates\n$ make inspect-templates\n\n# Inspect with verbose output\n$ make inspect-templates-verbose\n\n# Inspect specific templates\n$ make inspect-template TEMPLATES=\"fastapi-default,fastapi-async-crud\"\n</code></pre>"},{"location":"reference/template-quality-assurance/#inspection-results","title":"Inspection Results","text":"<ul> <li>Successful inspections are logged in workflow outputs and artifacts</li> <li>Failed inspections automatically create GitHub issues with detailed error reports</li> <li>Inspection history is preserved for 30 days in GitHub Actions artifacts</li> </ul>"},{"location":"reference/template-quality-assurance/#understanding-inspection-output","title":"Understanding Inspection Output","text":"<p>When running template inspection, you'll see output like this:</p> <pre><code>\ud83d\udccb Found 6 templates to inspect: fastapi-async-crud, fastapi-custom-response, fastapi-default, fastapi-dockerized, fastapi-empty, fastapi-psql-orm\n============================================================\n\ud83d\udd0d Inspecting template: fastapi-async-crud\n   Path: /path/to/src/fastapi_fastkit/fastapi_project_template/fastapi-async-crud\n\u2705 fastapi-async-crud: PASSED\n----------------------------------------\n\ud83d\udd0d Inspecting template: fastapi-custom-response\n   Path: /path/to/src/fastapi_fastkit/fastapi_project_template/fastapi-custom-response\n\u2705 fastapi-custom-response: PASSED\n----------------------------------------\n...\n============================================================\n\ud83d\udcca INSPECTION SUMMARY\n   Total templates: 6\n   \u2705 Passed: 6\n   \u274c Failed: 0\n\ud83c\udf89 All templates passed inspection!\n\ud83d\udcc4 Results saved to: template_inspection_results.json\n</code></pre>"},{"location":"reference/template-quality-assurance/#template-requirements","title":"Template Requirements","text":"<p>For a template to pass inspection, it must meet these requirements:</p>"},{"location":"reference/template-quality-assurance/#file-structure","title":"File Structure","text":"<ul> <li>Must contain a <code>src/</code> directory with Python source files</li> <li>Python files must use <code>.py-tpl</code> extension</li> <li>Must include a <code>requirements.txt-tpl</code> file</li> <li>Must include a <code>setup.py-tpl</code> file</li> </ul>"},{"location":"reference/template-quality-assurance/#fastapi-requirements","title":"FastAPI Requirements","text":"<ul> <li>Must contain FastAPI app initialization</li> <li>Must include proper dependency declarations</li> <li>Must have valid Python syntax in all template files</li> </ul>"},{"location":"reference/template-quality-assurance/#quality-standards","title":"Quality Standards","text":"<ul> <li>All template files must be syntactically correct</li> <li>Dependencies must be properly specified</li> <li>Template structure must follow FastAPI-fastkit conventions</li> </ul> <p>This automated quality assurance ensures that all templates remain reliable and ready for production use.</p>"},{"location":"tutorial/async-crud-api/","title":"Building Asynchronous CRUD APIs","text":"<p>Learn how to build high-performance CRUD APIs using FastAPI's asynchronous processing capabilities. In this tutorial, we'll implement asynchronous file I/O and efficient data processing using the <code>fastapi-async-crud</code> template.</p>"},{"location":"tutorial/async-crud-api/#what-youll-learn-in-this-tutorial","title":"What You'll Learn in This Tutorial","text":"<ul> <li>Understanding asynchronous FastAPI applications</li> <li>Asynchronous CRUD operations using <code>async/await</code> syntax</li> <li>Asynchronous file processing with aiofiles</li> <li>Writing and executing asynchronous tests</li> <li>Performance optimization techniques</li> </ul>"},{"location":"tutorial/async-crud-api/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed the Basic API Server Tutorial</li> <li>Understanding of Python's <code>async/await</code> basic concepts</li> <li>FastAPI-fastkit installed</li> </ul>"},{"location":"tutorial/async-crud-api/#why-asynchronous-processing-is-needed","title":"Why Asynchronous Processing is Needed","text":"<p>Let's understand the difference between synchronous and asynchronous processing:</p>"},{"location":"tutorial/async-crud-api/#synchronous-processing","title":"Synchronous Processing","text":"<pre><code>def process_items():\n    item1 = read_file(\"item1.json\")      # Wait 2 seconds\n    item2 = read_file(\"item2.json\")      # Wait 2 seconds\n    item3 = read_file(\"item3.json\")      # Wait 2 seconds\n    return [item1, item2, item3]         # Total: 6 seconds\n</code></pre>"},{"location":"tutorial/async-crud-api/#asynchronous-processing","title":"Asynchronous Processing","text":"<pre><code>async def process_items():\n    item1_task = read_file_async(\"item1.json\")  # Start concurrently\n    item2_task = read_file_async(\"item2.json\")  # Start concurrently\n    item3_task = read_file_async(\"item3.json\")  # Start concurrently\n\n    items = await asyncio.gather(item1_task, item2_task, item3_task)\n    return items                                # Total: 2 seconds\n</code></pre>"},{"location":"tutorial/async-crud-api/#step-1-creating-an-asynchronous-crud-project","title":"Step 1: Creating an Asynchronous CRUD Project","text":"<p>Create a project using the <code>fastapi-async-crud</code> template:</p> <pre><code>$ fastkit startdemo fastapi-async-crud\nEnter the project name: async-todo-api\nEnter the author name: Developer Kim\nEnter the author email: developer@example.com\nEnter the project description: Asynchronous todo management API\nDeploying FastAPI project using 'fastapi-async-crud' template\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 async-todo-api                          \u2502\n\u2502 Author       \u2502 Developer Kim                           \u2502\n\u2502 Author Email \u2502 developer@example.com                   \u2502\n\u2502 Description  \u2502 Asynchronous todo management API        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       Template Dependencies\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 pydantic          \u2502\n\u2502 Dependency 4 \u2502 pydantic-settings \u2502\n\u2502 Dependency 5 \u2502 aiofiles          \u2502\n\u2502 Dependency 6 \u2502 pytest-asyncio    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\n\n\u2728 FastAPI project 'async-todo-api' from 'fastapi-async-crud' has been created successfully!\n</code></pre>"},{"location":"tutorial/async-crud-api/#step-2-analyzing-project-structure","title":"Step 2: Analyzing Project Structure","text":"<p>Let's examine the key differences in the generated project:</p> <pre><code>async-todo-api/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.py                    # Asynchronous FastAPI application\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u2514\u2500\u2500 routes/\n\u2502   \u2502       \u2514\u2500\u2500 items.py          # Asynchronous CRUD endpoints\n\u2502   \u251c\u2500\u2500 crud/\n\u2502   \u2502   \u2514\u2500\u2500 items.py              # Asynchronous data processing logic\n\u2502   \u251c\u2500\u2500 schemas/\n\u2502   \u2502   \u2514\u2500\u2500 items.py              # Data models (same)\n\u2502   \u251c\u2500\u2500 mocks/\n\u2502   \u2502   \u2514\u2500\u2500 mock_items.json       # JSON file database\n\u2502   \u2514\u2500\u2500 core/\n\u2502       \u2514\u2500\u2500 config.py             # Configuration file\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 conftest.py               # Asynchronous test configuration\n    \u2514\u2500\u2500 test_items.py             # Asynchronous test cases\n</code></pre>"},{"location":"tutorial/async-crud-api/#key-differences","title":"Key Differences","text":"<ol> <li>aiofiles: Asynchronous file I/O processing</li> <li>pytest-asyncio: Asynchronous test support</li> <li>async/await pattern: All CRUD operations implemented asynchronously</li> </ol>"},{"location":"tutorial/async-crud-api/#step-3-understanding-asynchronous-crud-logic","title":"Step 3: Understanding Asynchronous CRUD Logic","text":""},{"location":"tutorial/async-crud-api/#asynchronous-data-processing-srccruditemspy","title":"Asynchronous Data Processing (<code>src/crud/items.py</code>)","text":"<pre><code>import json\nimport asyncio\nfrom typing import List, Optional\nfrom aiofiles import open as aio_open\nfrom pathlib import Path\n\nfrom src.schemas.items import Item, ItemCreate, ItemUpdate\n\nclass AsyncItemCRUD:\n    def __init__(self, data_file: str = \"src/mocks/mock_items.json\"):\n        self.data_file = Path(data_file)\n\n    async def _read_data(self) -&gt; List[dict]:\n        \"\"\"Asynchronously read data from JSON file\"\"\"\n        try:\n            async with aio_open(self.data_file, 'r', encoding='utf-8') as f:\n                content = await f.read()\n                return json.loads(content)\n        except FileNotFoundError:\n            return []\n\n    async def _write_data(self, data: List[dict]) -&gt; None:\n        \"\"\"Asynchronously write data to JSON file\"\"\"\n        async with aio_open(self.data_file, 'w', encoding='utf-8') as f:\n            await f.write(json.dumps(data, indent=2, ensure_ascii=False))\n\n    async def get_items(self) -&gt; List[Item]:\n        \"\"\"Retrieve all items (asynchronous)\"\"\"\n        data = await self._read_data()\n        return [Item(**item) for item in data]\n\n    async def get_item(self, item_id: int) -&gt; Optional[Item]:\n        \"\"\"Retrieve specific item (asynchronous)\"\"\"\n        data = await self._read_data()\n        item_data = next((item for item in data if item[\"id\"] == item_id), None)\n        return Item(**item_data) if item_data else None\n\n    async def create_item(self, item: ItemCreate) -&gt; Item:\n        \"\"\"Create new item (asynchronous)\"\"\"\n        data = await self._read_data()\n        new_id = max([item[\"id\"] for item in data], default=0) + 1\n\n        new_item = Item(id=new_id, **item.dict())\n        data.append(new_item.dict())\n\n        await self._write_data(data)\n        return new_item\n\n    async def update_item(self, item_id: int, item_update: ItemUpdate) -&gt; Optional[Item]:\n        \"\"\"Update item (asynchronous)\"\"\"\n        data = await self._read_data()\n\n        for i, item in enumerate(data):\n            if item[\"id\"] == item_id:\n                update_data = item_update.dict(exclude_unset=True)\n                data[i].update(update_data)\n                await self._write_data(data)\n                return Item(**data[i])\n\n        return None\n\n    async def delete_item(self, item_id: int) -&gt; bool:\n        \"\"\"Delete item (asynchronous)\"\"\"\n        data = await self._read_data()\n        original_length = len(data)\n\n        data = [item for item in data if item[\"id\"] != item_id]\n\n        if len(data) &lt; original_length:\n            await self._write_data(data)\n            return True\n\n        return False\n</code></pre>"},{"location":"tutorial/async-crud-api/#asynchronous-api-endpoints-srcapiroutesitemspy","title":"Asynchronous API Endpoints (<code>src/api/routes/items.py</code>)","text":"<pre><code>from typing import List\nfrom fastapi import APIRouter, HTTPException, status\n\nfrom src.schemas.items import Item, ItemCreate, ItemUpdate\nfrom src.crud.items import AsyncItemCRUD\n\nrouter = APIRouter()\ncrud = AsyncItemCRUD()\n\n@router.get(\"/\", response_model=List[Item])\nasync def read_items():\n    \"\"\"Retrieve all items (asynchronous)\"\"\"\n    return await crud.get_items()\n\n@router.get(\"/{item_id}\", response_model=Item)\nasync def read_item(item_id: int):\n    \"\"\"Retrieve specific item (asynchronous)\"\"\"\n    item = await crud.get_item(item_id)\n    if item is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Item with id {item_id} not found\"\n        )\n    return item\n\n@router.post(\"/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: ItemCreate):\n    \"\"\"Create new item (asynchronous)\"\"\"\n    return await crud.create_item(item)\n\n@router.put(\"/{item_id}\", response_model=Item)\nasync def update_item(item_id: int, item_update: ItemUpdate):\n    \"\"\"Update item (asynchronous)\"\"\"\n    updated_item = await crud.update_item(item_id, item_update)\n    if updated_item is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Item with id {item_id} not found\"\n        )\n    return updated_item\n\n@router.delete(\"/{item_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_item(item_id: int):\n    \"\"\"Delete item (asynchronous)\"\"\"\n    deleted = await crud.delete_item(item_id)\n    if not deleted:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Item with id {item_id} not found\"\n        )\n</code></pre>"},{"location":"tutorial/async-crud-api/#step-4-running-server-and-testing","title":"Step 4: Running Server and Testing","text":"<p>Navigate to the project directory and run the server:</p> <pre><code>$ cd async-todo-api\n$ fastkit runserver\nStarting FastAPI server at 127.0.0.1:8000...\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [12345] using WatchFiles\nINFO:     Started server process [12346]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre>"},{"location":"tutorial/async-crud-api/#performance-testing","title":"Performance Testing","text":"<p>Let's verify the performance of asynchronous processing. Try sending multiple requests simultaneously:</p> <p>Concurrent Request Testing (Python Script)</p> <pre><code>import asyncio\nimport aiohttp\nimport time\n\nasync def create_item(session, item_data):\n    async with session.post(\"http://127.0.0.1:8000/items/\", json=item_data) as response:\n        return await response.json()\n\nasync def test_concurrent_requests():\n    start_time = time.time()\n\n    items_to_create = [\n        {\"name\": f\"Item {i}\", \"description\": f\"Description {i}\", \"price\": i * 10, \"tax\": i}\n        for i in range(1, 11)  # Create 10 items concurrently\n    ]\n\n    async with aiohttp.ClientSession() as session:\n        tasks = [create_item(session, item) for item in items_to_create]\n        results = await asyncio.gather(*tasks)\n\n    end_time = time.time()\n    print(f\"Created 10 items in: {end_time - start_time:.2f} seconds\")\n    print(f\"Number of items created: {len(results)}\")\n\n# Run test\n# asyncio.run(test_concurrent_requests())\n</code></pre>"},{"location":"tutorial/async-crud-api/#step-5-writing-asynchronous-tests","title":"Step 5: Writing Asynchronous Tests","text":""},{"location":"tutorial/async-crud-api/#test-configuration-testsconftestpy","title":"Test Configuration (<code>tests/conftest.py</code>)","text":"<pre><code>import pytest\nimport asyncio\nfrom httpx import AsyncClient\nfrom src.main import app\n\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    \"\"\"Event loop configuration\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n\n@pytest.fixture\nasync def async_client():\n    \"\"\"Asynchronous test client\"\"\"\n    async with AsyncClient(app=app, base_url=\"http://test\") as client:\n        yield client\n</code></pre>"},{"location":"tutorial/async-crud-api/#asynchronous-test-cases-teststest_itemspy","title":"Asynchronous Test Cases (<code>tests/test_items.py</code>)","text":"<pre><code>import pytest\nfrom httpx import AsyncClient\n\n@pytest.mark.asyncio\nasync def test_create_item_async(async_client: AsyncClient):\n    \"\"\"Asynchronous item creation test\"\"\"\n    item_data = {\n        \"name\": \"Test Item\",\n        \"description\": \"Item for asynchronous testing\",\n        \"price\": 100.0,\n        \"tax\": 10.0\n    }\n\n    response = await async_client.post(\"/items/\", json=item_data)\n\n    assert response.status_code == 201\n    data = response.json()\n    assert data[\"name\"] == item_data[\"name\"]\n    assert data[\"price\"] == item_data[\"price\"]\n    assert \"id\" in data\n\n@pytest.mark.asyncio\nasync def test_read_items_async(async_client: AsyncClient):\n    \"\"\"Asynchronous item list retrieval test\"\"\"\n    response = await async_client.get(\"/items/\")\n\n    assert response.status_code == 200\n    items = response.json()\n    assert isinstance(items, list)\n\n@pytest.mark.asyncio\nasync def test_concurrent_operations(async_client: AsyncClient):\n    \"\"\"Concurrent operations test\"\"\"\n    import asyncio\n\n    # Create multiple items concurrently\n    tasks = []\n    for i in range(5):\n        item_data = {\n            \"name\": f\"ConcurrentItem{i}\",\n            \"description\": f\"Description{i}\",\n            \"price\": i * 10,\n            \"tax\": i\n        }\n        task = async_client.post(\"/items/\", json=item_data)\n        tasks.append(task)\n\n    responses = await asyncio.gather(*tasks)\n\n    # Verify all requests succeeded\n    for response in responses:\n        assert response.status_code == 201\n\n    # Verify created items\n    response = await async_client.get(\"/items/\")\n    items = response.json()\n    assert len(items) &gt;= 5\n</code></pre>"},{"location":"tutorial/async-crud-api/#running-tests","title":"Running Tests","text":"<pre><code>$ pytest tests/ -v --asyncio-mode=auto\n======================== test session starts ========================\ncollected 8 items\n\ntests/test_items.py::test_create_item_async PASSED            [ 12%]\ntests/test_items.py::test_read_items_async PASSED             [ 25%]\ntests/test_items.py::test_read_item_async PASSED              [ 37%]\ntests/test_items.py::test_update_item_async PASSED            [ 50%]\ntests/test_items.py::test_delete_item_async PASSED            [ 62%]\ntests/test_items.py::test_concurrent_operations PASSED        [ 75%]\ntests/test_items.py::test_item_not_found_async PASSED         [ 87%]\ntests/test_items.py::test_invalid_item_data_async PASSED      [100%]\n\n======================== 8 passed in 0.24s ========================\n</code></pre>"},{"location":"tutorial/async-crud-api/#step-6-performance-monitoring-and-optimization","title":"Step 6: Performance Monitoring and Optimization","text":""},{"location":"tutorial/async-crud-api/#adding-response-time-measurement-middleware","title":"Adding Response Time Measurement Middleware","text":"<p>Let's add performance monitoring to <code>src/main.py</code>:</p> <pre><code>import time\nfrom fastapi import FastAPI, Request\nfrom src.api.api import api_router\nfrom src.core.config import settings\n\napp = FastAPI(\n    title=settings.PROJECT_NAME,\n    version=settings.VERSION,\n    description=settings.DESCRIPTION,\n)\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    \"\"\"Add request processing time to headers\"\"\"\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n\napp.include_router(api_router)\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"message\": \"Welcome to the Asynchronous Todo API!\"}\n</code></pre>"},{"location":"tutorial/async-crud-api/#implementing-asynchronous-batch-processing","title":"Implementing Asynchronous Batch Processing","text":"<p>Let's add batch endpoints for processing multiple items at once:</p> <pre><code># Add to src/api/routes/items.py\n\n@router.post(\"/batch\", response_model=List[Item])\nasync def create_items_batch(items: List[ItemCreate]):\n    \"\"\"Create multiple items concurrently (batch processing)\"\"\"\n    import asyncio\n\n    # Execute all item creation tasks concurrently\n    tasks = [crud.create_item(item) for item in items]\n    created_items = await asyncio.gather(*tasks)\n\n    return created_items\n\n@router.get(\"/batch/{item_ids}\")\nasync def read_items_batch(item_ids: str):\n    \"\"\"Retrieve multiple items concurrently (batch processing)\"\"\"\n    import asyncio\n\n    # Parse comma-separated IDs\n    ids = [int(id.strip()) for id in item_ids.split(\",\")]\n\n    # Execute all item retrieval tasks concurrently\n    tasks = [crud.get_item(item_id) for item_id in ids]\n    items = await asyncio.gather(*tasks)\n\n    # Return only non-None items\n    return [item for item in items if item is not None]\n</code></pre>"},{"location":"tutorial/async-crud-api/#batch-processing-testing","title":"Batch Processing Testing","text":"<pre><code># Batch creation test\n$ curl -X POST \"http://127.0.0.1:8000/items/batch\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '[\n    {\"name\": \"Item1\", \"description\": \"Description1\", \"price\": 10.0, \"tax\": 1.0},\n    {\"name\": \"Item2\", \"description\": \"Description2\", \"price\": 20.0, \"tax\": 2.0},\n    {\"name\": \"Item3\", \"description\": \"Description3\", \"price\": 30.0, \"tax\": 3.0}\n  ]'\n\n# Batch retrieval test\n$ curl -X GET \"http://127.0.0.1:8000/items/batch/1,2,3\"\n</code></pre>"},{"location":"tutorial/async-crud-api/#step-7-advanced-asynchronous-patterns","title":"Step 7: Advanced Asynchronous Patterns","text":""},{"location":"tutorial/async-crud-api/#implementing-rate-limiting","title":"Implementing Rate Limiting","text":"<pre><code>import asyncio\nfrom collections import defaultdict\nfrom fastapi import HTTPException, Request\nfrom datetime import datetime, timedelta\n\nclass AsyncRateLimiter:\n    def __init__(self, max_requests: int = 100, window_seconds: int = 60):\n        self.max_requests = max_requests\n        self.window_seconds = window_seconds\n        self.requests = defaultdict(list)\n\n    async def is_allowed(self, client_ip: str) -&gt; bool:\n        now = datetime.now()\n        cutoff = now - timedelta(seconds=self.window_seconds)\n\n        # remove old request records\n        self.requests[client_ip] = [\n            req_time for req_time in self.requests[client_ip]\n            if req_time &gt; cutoff\n        ]\n\n        # check current request count\n        if len(self.requests[client_ip]) &gt;= self.max_requests:\n            return False\n\n        # add current request record\n        self.requests[client_ip].append(now)\n        return True\n\n# global rate limiter instance\nrate_limiter = AsyncRateLimiter()\n\n@app.middleware(\"http\")\nasync def rate_limit_middleware(request: Request, call_next):\n    client_ip = request.client.host\n\n    if not await rate_limiter.is_allowed(client_ip):\n        raise HTTPException(\n            status_code=429,\n            detail=\"Too many requests\"\n        )\n\n    response = await call_next(request)\n    return response\n</code></pre>"},{"location":"tutorial/async-crud-api/#implementing-asynchronous-caching","title":"Implementing Asynchronous Caching","text":"<pre><code>import asyncio\nfrom typing import Optional, Any\nfrom datetime import datetime, timedelta\n\nclass AsyncCache:\n    def __init__(self):\n        self._cache = {}\n        self._expiry = {}\n\n    async def get(self, key: str) -&gt; Optional[Any]:\n        # remove expired items\n        if key in self._expiry and datetime.now() &gt; self._expiry[key]:\n            del self._cache[key]\n            del self._expiry[key]\n            return None\n\n        return self._cache.get(key)\n\n    async def set(self, key: str, value: Any, ttl_seconds: int = 300):\n        self._cache[key] = value\n        self._expiry[key] = datetime.now() + timedelta(seconds=ttl_seconds)\n\n    async def delete(self, key: str):\n        self._cache.pop(key, None)\n        self._expiry.pop(key, None)\n\n# global cache instance\ncache = AsyncCache()\n\n# modify CRUD methods to use cache\nasync def get_items_cached(self) -&gt; List[Item]:\n    \"\"\"Retrieve items using cache\"\"\"\n    cache_key = \"all_items\"\n    cached_items = await cache.get(cache_key)\n\n    if cached_items:\n        return cached_items\n\n    # if cache is not found, read from file\n    items = await self.get_items()\n    await cache.set(cache_key, items, ttl_seconds=60)  # 1 minute cache\n\n    return items\n</code></pre>"},{"location":"tutorial/async-crud-api/#step-8-production-considerations","title":"Step 8: Production Considerations","text":""},{"location":"tutorial/async-crud-api/#managing-connection-pools","title":"Managing Connection Pools","text":"<pre><code># add to src/core/config.py\nclass Settings(BaseSettings):\n    # ... existing settings ...\n\n    # asynchronous processing related settings\n    MAX_CONCURRENT_REQUESTS: int = 100\n    REQUEST_TIMEOUT: int = 30\n    CONNECTION_POOL_SIZE: int = 20\n\nsettings = Settings()\n</code></pre>"},{"location":"tutorial/async-crud-api/#improving-error-handling","title":"Improving Error Handling","text":"<pre><code>import logging\nfrom fastapi import HTTPException\nfrom typing import Union\n\nlogger = logging.getLogger(__name__)\n\nasync def safe_async_operation(operation, *args, **kwargs) -&gt; Union[Any, None]:\n    \"\"\"Execute safe asynchronous operation\"\"\"\n    try:\n        return await operation(*args, **kwargs)\n    except asyncio.TimeoutError:\n        logger.error(f\"Timeout in {operation.__name__}\")\n        raise HTTPException(status_code=504, detail=\"Request timeout\")\n    except Exception as e:\n        logger.error(f\"Error in {operation.__name__}: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Internal server error\")\n\n# usage example\n@router.get(\"/safe/{item_id}\")\nasync def read_item_safe(item_id: int):\n    return await safe_async_operation(crud.get_item, item_id)\n</code></pre>"},{"location":"tutorial/async-crud-api/#next-steps","title":"Next Steps","text":"<p>You've completed building an asynchronous CRUD API! Next things to try:</p> <ol> <li>Database Integration - Using PostgreSQL with asynchronous SQLAlchemy</li> <li>Docker Containerization - Containerizing asynchronous applications</li> <li>Custom Response Handling - Advanced response formats and error handling</li> </ol>"},{"location":"tutorial/async-crud-api/#summary","title":"Summary","text":"<p>In this tutorial, we used asynchronous FastAPI to:</p> <ul> <li>\u2705 Implement asynchronous CRUD operations</li> <li>\u2705 Optimize file I/O with aiofiles</li> <li>\u2705 Handle concurrent requests and performance testing</li> <li>\u2705 Write and execute asynchronous tests</li> <li>\u2705 Implement batch processing and advanced asynchronous patterns</li> <li>\u2705 Address production considerations (caching, error handling, connection management)</li> </ul> <p>Mastering asynchronous processing enables you to build high-performance API servers!</p>"},{"location":"tutorial/basic-api-server/","title":"Building a Basic API Server","text":"<p>Learn how to quickly build a simple REST API server using FastAPI-fastkit. This tutorial is suitable for FastAPI beginners and covers creating basic CRUD APIs.</p>"},{"location":"tutorial/basic-api-server/#what-youll-learn-in-this-tutorial","title":"What You'll Learn in This Tutorial","text":"<ul> <li>Creating a basic API server with the <code>fastkit startdemo</code> command</li> <li>Understanding FastAPI project structure</li> <li>Using basic CRUD endpoints</li> <li>API testing and documentation</li> <li>Project expansion methods</li> </ul>"},{"location":"tutorial/basic-api-server/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12 or higher installed</li> <li>FastAPI-fastkit installed (<code>pip install fastapi-fastkit</code>)</li> <li>Basic Python knowledge</li> </ul>"},{"location":"tutorial/basic-api-server/#step-1-creating-a-basic-api-project","title":"Step 1: Creating a Basic API Project","text":"<p>Let's create a basic API server using the <code>fastapi-default</code> template.</p> <pre><code>$ fastkit startdemo fastapi-default\nEnter the project name: my-first-api\nEnter the author name: Developer Kim\nEnter the author email: developer@example.com\nEnter the project description: My first FastAPI server\nDeploying FastAPI project using 'fastapi-default' template\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 my-first-api               \u2502\n\u2502 Author       \u2502 Developer Kim              \u2502\n\u2502 Author Email \u2502 developer@example.com      \u2502\n\u2502 Description  \u2502 My first FastAPI server    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       Template Dependencies\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 pydantic          \u2502\n\u2502 Dependency 4 \u2502 pydantic-settings \u2502\n\u2502 Dependency 5 \u2502 python-dotenv     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\n\n\u2728 FastAPI project 'my-first-api' from 'fastapi-default' has been created successfully!\n</code></pre>"},{"location":"tutorial/basic-api-server/#step-2-understanding-the-generated-project-structure","title":"Step 2: Understanding the Generated Project Structure","text":"<p>Let's examine the generated project structure:</p> <pre><code>my-first-api/\n\u251c\u2500\u2500 README.md                 # Project documentation\n\u251c\u2500\u2500 requirements.txt          # Dependency package list\n\u251c\u2500\u2500 setup.py                  # Package configuration\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 run-server.sh        # Server execution script\n\u251c\u2500\u2500 src/                     # Main source code\n\u2502   \u251c\u2500\u2500 main.py              # FastAPI application entry point\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u2514\u2500\u2500 config.py        # Configuration management\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 api.py           # API router collection\n\u2502   \u2502   \u2514\u2500\u2500 routes/\n\u2502   \u2502       \u2514\u2500\u2500 items.py     # Item-related endpoints\n\u2502   \u251c\u2500\u2500 schemas/\n\u2502   \u2502   \u2514\u2500\u2500 items.py         # Data model definitions\n\u2502   \u251c\u2500\u2500 crud/\n\u2502   \u2502   \u2514\u2500\u2500 items.py         # Data processing logic\n\u2502   \u2514\u2500\u2500 mocks/\n\u2502       \u2514\u2500\u2500 mock_items.json  # Test data\n\u2514\u2500\u2500 tests/                   # Test code\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 conftest.py\n    \u2514\u2500\u2500 test_items.py\n</code></pre>"},{"location":"tutorial/basic-api-server/#key-file-descriptions","title":"Key File Descriptions","text":"<ul> <li><code>src/main.py</code>: FastAPI application entry point</li> <li><code>src/api/routes/items.py</code>: Item-related API endpoint definitions</li> <li><code>src/schemas/items.py</code>: Request/response data structure definitions</li> <li><code>src/crud/items.py</code>: Database operation logic</li> <li><code>src/mocks/mock_items.json</code>: Sample data for development</li> </ul>"},{"location":"tutorial/basic-api-server/#step-3-running-the-server","title":"Step 3: Running the Server","text":"<p>Let's navigate to the generated project directory and run the server.</p> <pre><code>$ cd my-first-api\n$ fastkit runserver\nStarting FastAPI server at 127.0.0.1:8000...\n\nINFO:     Will watch for changes in these directories: ['/path/to/my-first-api']\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [12345] using WatchFiles\nINFO:     Started server process [12346]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre> <p>Once the server is successfully running, you can access the following URLs in your browser:</p> <ul> <li>API Server: http://127.0.0.1:8000</li> <li>Swagger UI Documentation: http://127.0.0.1:8000/docs</li> <li>ReDoc Documentation: http://127.0.0.1:8000/redoc</li> </ul>"},{"location":"tutorial/basic-api-server/#step-4-exploring-api-endpoints","title":"Step 4: Exploring API Endpoints","text":"<p>The generated API provides the following endpoints by default:</p> Method Endpoint Description GET <code>/items/</code> Retrieve all items GET <code>/items/{item_id}</code> Retrieve specific item POST <code>/items/</code> Create new item PUT <code>/items/{item_id}</code> Update item DELETE <code>/items/{item_id}</code> Delete item"},{"location":"tutorial/basic-api-server/#testing-the-api","title":"Testing the API","text":"<p>1. Retrieving All Items</p> <pre><code>$ curl -X GET \"http://127.0.0.1:8000/items/\"\n[\n  {\n    \"id\": 1,\n    \"name\": \"Laptop\",\n    \"description\": \"High-performance laptop\",\n    \"price\": 999.99,\n    \"tax\": 99.99\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Mouse\",\n    \"description\": \"Wireless mouse\",\n    \"price\": 29.99,\n    \"tax\": 2.99\n  }\n]\n</code></pre> <p>2. Creating a New Item</p> <pre><code>$ curl -X POST \"http://127.0.0.1:8000/items/\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"name\": \"Keyboard\",\n       \"description\": \"Mechanical keyboard\",\n       \"price\": 150.00,\n       \"tax\": 15.00\n     }'\n\n{\n  \"id\": 3,\n  \"name\": \"Keyboard\",\n  \"description\": \"Mechanical keyboard\",\n  \"price\": 150.0,\n  \"tax\": 15.0\n}\n</code></pre> <p>3. Retrieving a Specific Item</p> <pre><code>$ curl -X GET \"http://127.0.0.1:8000/items/1\"\n{\n  \"id\": 1,\n  \"name\": \"Laptop\",\n  \"description\": \"High-performance laptop\",\n  \"price\": 999.99,\n  \"tax\": 99.99\n}\n</code></pre>"},{"location":"tutorial/basic-api-server/#step-5-testing-api-with-swagger-ui","title":"Step 5: Testing API with Swagger UI","text":"<p>Navigate to http://127.0.0.1:8000/docs in your browser to view the automatically generated API documentation.</p> <p>What you can do with Swagger UI:</p> <ol> <li>View API Endpoints: Visually see all available endpoints</li> <li>Check Request/Response Schemas: View input/output formats for each endpoint</li> <li>Test APIs Directly: Make actual API calls with the \"Try it out\" button</li> <li>View Example Data: See example request/response data for each endpoint</li> </ol>"},{"location":"tutorial/basic-api-server/#how-to-use-swagger-ui","title":"How to Use Swagger UI","text":"<ol> <li>Click on the <code>/items/</code> GET endpoint</li> <li>Click the \"Try it out\" button</li> <li>Click the \"Execute\" button</li> <li>View the server response</li> </ol>"},{"location":"tutorial/basic-api-server/#step-6-understanding-code-structure","title":"Step 6: Understanding Code Structure","text":""},{"location":"tutorial/basic-api-server/#main-application-srcmainpy","title":"Main Application (<code>src/main.py</code>)","text":"<pre><code>from fastapi import FastAPI\nfrom src.api.api import api_router\nfrom src.core.config import settings\n\napp = FastAPI(\n    title=settings.PROJECT_NAME,\n    version=settings.VERSION,\n    description=settings.DESCRIPTION,\n)\n\napp.include_router(api_router)\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"tutorial/basic-api-server/#item-schema-srcschemasitemspy","title":"Item Schema (<code>src/schemas/items.py</code>)","text":"<pre><code>from pydantic import BaseModel\nfrom typing import Optional\n\nclass ItemBase(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n\nclass ItemCreate(ItemBase):\n    pass\n\nclass ItemUpdate(ItemBase):\n    name: Optional[str] = None\n    price: Optional[float] = None\n\nclass Item(ItemBase):\n    id: int\n\n    class Config:\n        from_attributes = True\n</code></pre>"},{"location":"tutorial/basic-api-server/#crud-logic-srccruditemspy","title":"CRUD Logic (<code>src/crud/items.py</code>)","text":"<pre><code>from typing import List, Optional\nfrom src.schemas.items import Item, ItemCreate, ItemUpdate\n\nclass ItemCRUD:\n    def __init__(self):\n        self.items: List[Item] = []\n        self.next_id = 1\n\n    def create_item(self, item: ItemCreate) -&gt; Item:\n        new_item = Item(id=self.next_id, **item.dict())\n        self.items.append(new_item)\n        self.next_id += 1\n        return new_item\n\n    def get_items(self) -&gt; List[Item]:\n        return self.items\n\n    def get_item(self, item_id: int) -&gt; Optional[Item]:\n        return next((item for item in self.items if item.id == item_id), None)\n</code></pre>"},{"location":"tutorial/basic-api-server/#step-7-expanding-the-project","title":"Step 7: Expanding the Project","text":""},{"location":"tutorial/basic-api-server/#adding-new-routes","title":"Adding New Routes","text":"<p>You can add new endpoints using the <code>fastkit addroute</code> command:</p> <pre><code>$ fastkit addroute user\n                       Adding New Route\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project          \u2502 my-first-api                             \u2502\n\u2502 Route Name       \u2502 user                                     \u2502\n\u2502 Target Directory \u2502 /path/to/my-first-api                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDo you want to add route 'user' to the current project? [Y/n]: y\n\n\u2728 Successfully added new route 'user' to the current project!\n</code></pre> <p>This command creates the following files:</p> <ul> <li><code>src/api/routes/user.py</code> - User-related endpoints</li> <li><code>src/schemas/user.py</code> - User data models</li> <li><code>src/crud/user.py</code> - User data processing logic</li> </ul>"},{"location":"tutorial/basic-api-server/#customizing-environment-configuration","title":"Customizing Environment Configuration","text":"<p>You can modify the <code>src/core/config.py</code> file to change project settings:</p> <pre><code>from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    PROJECT_NAME: str = \"My First API\"\n    VERSION: str = \"1.0.0\"\n    DESCRIPTION: str = \"My first FastAPI server\"\n    API_V1_STR: str = \"/api/v1\"\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n</code></pre>"},{"location":"tutorial/basic-api-server/#step-8-running-tests","title":"Step 8: Running Tests","text":"<p>The project includes basic tests:</p> <pre><code>$ pytest tests/ -v\n======================== test session starts ========================\ncollected 4 items\n\ntests/test_items.py::test_create_item PASSED                   [ 25%]\ntests/test_items.py::test_read_items PASSED                    [ 50%]\ntests/test_items.py::test_read_item PASSED                     [ 75%]\ntests/test_items.py::test_update_item PASSED                   [100%]\n\n======================== 4 passed in 0.15s ========================\n</code></pre>"},{"location":"tutorial/basic-api-server/#next-steps","title":"Next Steps","text":"<p>You've completed building a basic API server! Next things to try:</p> <ol> <li>Building Asynchronous CRUD APIs - Learn more complex asynchronous processing</li> <li>Database Integration - Using PostgreSQL and SQLAlchemy</li> <li>Docker Containerization - Preparing for production deployment</li> <li>Custom Response Handling - Advanced response format configuration</li> </ol>"},{"location":"tutorial/basic-api-server/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorial/basic-api-server/#common-issues","title":"Common Issues","text":"<p>Q: The server won't start A: Check that your virtual environment is activated and dependencies are properly installed.</p> <p>Q: Cannot access API endpoints A: Verify that the server is running normally and the port number (default: 8000) is correct.</p> <p>Q: APIs don't appear in Swagger UI A: Check that the router is properly included in <code>src/main.py</code>.</p>"},{"location":"tutorial/basic-api-server/#summary","title":"Summary","text":"<p>In this tutorial, we used FastAPI-fastkit to:</p> <ul> <li>\u2705 Create a basic FastAPI project</li> <li>\u2705 Understand project structure</li> <li>\u2705 Use CRUD API endpoints</li> <li>\u2705 API documentation and testing</li> <li>\u2705 Project expansion methods</li> </ul> <p>Now that you've learned the basics of FastAPI, try taking on more complex projects!</p>"},{"location":"tutorial/custom-response-handling/","title":"Custom Response Handling and Advanced API Design","text":"<p>Learn how to implement consistent response formats, error handling, pagination, and custom OpenAPI documentation using FastAPI's advanced features. We'll implement enterprise-grade API design patterns using the <code>fastapi-custom-response</code> template.</p>"},{"location":"tutorial/custom-response-handling/#what-youll-learn-in-this-tutorial","title":"What You'll Learn in This Tutorial","text":"<ul> <li>Designing standardized API response formats</li> <li>Global exception handling and custom error responses</li> <li>Implementing pagination systems</li> <li>Filtering and sorting functionality</li> <li>Customizing OpenAPI documentation</li> <li>API version management</li> <li>Response caching and optimization</li> </ul>"},{"location":"tutorial/custom-response-handling/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed the Docker Containerization Tutorial</li> <li>Understanding of REST API design principles</li> <li>Knowledge of HTTP status codes</li> <li>Basic concepts of OpenAPI/Swagger</li> </ul>"},{"location":"tutorial/custom-response-handling/#the-importance-of-standardized-api-responses","title":"The Importance of Standardized API Responses","text":""},{"location":"tutorial/custom-response-handling/#inconsistent-vs-standardized-responses","title":"Inconsistent vs Standardized Responses","text":"<p>Problematic response format: <pre><code>// Success\n{\"id\": 1, \"name\": \"item\"}\n\n// Error\n{\"detail\": \"Not found\"}\n\n// List retrieval\n[{\"id\": 1}, {\"id\": 2}]\n</code></pre></p> <p>Standardized response format: <pre><code>// Success\n{\n  \"success\": true,\n  \"data\": {\"id\": 1, \"name\": \"item\"},\n  \"message\": \"Item retrieved successfully\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\"\n}\n\n// Error\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"ITEM_NOT_FOUND\",\n    \"message\": \"Item not found\",\n    \"details\": {\"item_id\": 123}\n  },\n  \"timestamp\": \"2024-01-01T12:00:00Z\"\n}\n</code></pre></p>"},{"location":"tutorial/custom-response-handling/#step-1-creating-a-custom-response-project","title":"Step 1: Creating a Custom Response Project","text":"<p>Create a project using the <code>fastapi-custom-response</code> template:</p> <pre><code>$ fastkit startdemo fastapi-custom-response\nEnter the project name: advanced-api-server\nEnter the author name: Developer Kim\nEnter the author email: developer@example.com\nEnter the project description: API server with advanced response handling\nDeploying FastAPI project using 'fastapi-custom-response' template\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 advanced-api-server                         \u2502\n\u2502 Author       \u2502 Developer Kim                               \u2502\n\u2502 Author Email \u2502 developer@example.com                       \u2502\n\u2502 Description  \u2502 API server with advanced response handling  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       Template Dependencies\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 pydantic          \u2502\n\u2502 Dependency 4 \u2502 pydantic-settings \u2502\n\u2502 Dependency 5 \u2502 aiofiles          \u2502\n\u2502 Dependency 6 \u2502 python-multipart  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\n\n\u2728 FastAPI project 'advanced-api-server' from 'fastapi-custom-response' has been created successfully!\n</code></pre>"},{"location":"tutorial/custom-response-handling/#step-2-analyzing-project-structure","title":"Step 2: Analyzing Project Structure","text":"<p>Let's examine the advanced features of the generated project:</p> <pre><code>advanced-api-server/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.py                     # FastAPI application\n\u2502   \u251c\u2500\u2500 schemas/\n\u2502   \u2502   \u251c\u2500\u2500 base.py                 # Base response schemas\n\u2502   \u2502   \u251c\u2500\u2500 items.py                # Item schemas\n\u2502   \u2502   \u2514\u2500\u2500 responses.py            # Response format definitions\n\u2502   \u251c\u2500\u2500 helper/\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py           # Custom exception classes\n\u2502   \u2502   \u2514\u2500\u2500 pagination.py           # Pagination helpers\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 responses.py            # Response utilities\n\u2502   \u2502   \u2514\u2500\u2500 documents.py            # OpenAPI documentation customization\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u2514\u2500\u2500 routes/\n\u2502   \u2502       \u2514\u2500\u2500 items.py            # Advanced API endpoints\n\u2502   \u251c\u2500\u2500 crud/\n\u2502   \u2502   \u2514\u2500\u2500 items.py                # CRUD logic\n\u2502   \u2514\u2500\u2500 core/\n\u2502       \u2514\u2500\u2500 config.py               # Configuration\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 test_responses.py           # Response format tests\n</code></pre>"},{"location":"tutorial/custom-response-handling/#step-3-implementing-standardized-response-schemas","title":"Step 3: Implementing Standardized Response Schemas","text":""},{"location":"tutorial/custom-response-handling/#base-response-schema-srcschemasbasepy","title":"Base Response Schema (<code>src/schemas/base.py</code>)","text":"<pre><code>from typing import Generic, TypeVar, Optional, Any, Dict, List\nfrom pydantic import BaseModel, Field\nfrom datetime import datetime\nfrom enum import Enum\n\nT = TypeVar('T')\n\nclass ResponseStatus(str, Enum):\n    \"\"\"Response status\"\"\"\n    SUCCESS = \"success\"\n    ERROR = \"error\"\n    WARNING = \"warning\"\n\nclass ErrorDetail(BaseModel):\n    \"\"\"Error detail information\"\"\"\n    code: str = Field(..., description=\"Error code\")\n    message: str = Field(..., description=\"Error message\")\n    field: Optional[str] = Field(None, description=\"Field where error occurred\")\n    details: Optional[Dict[str, Any]] = Field(None, description=\"Additional error information\")\n\nclass BaseResponse(BaseModel, Generic[T]):\n    \"\"\"Base response format\"\"\"\n    success: bool = Field(..., description=\"Request success status\")\n    status: ResponseStatus = Field(..., description=\"Response status\")\n    data: Optional[T] = Field(None, description=\"Response data\")\n    message: Optional[str] = Field(None, description=\"Response message\")\n    timestamp: datetime = Field(default_factory=datetime.utcnow, description=\"Response timestamp\")\n    request_id: Optional[str] = Field(None, description=\"Request tracking ID\")\n\nclass ErrorResponse(BaseModel):\n    \"\"\"Error response format\"\"\"\n    success: bool = Field(False, description=\"Request success status\")\n    status: ResponseStatus = Field(ResponseStatus.ERROR, description=\"Response status\")\n    error: ErrorDetail = Field(..., description=\"Error information\")\n    timestamp: datetime = Field(default_factory=datetime.utcnow, description=\"Response timestamp\")\n    request_id: Optional[str] = Field(None, description=\"Request tracking ID\")\n\nclass PaginationMeta(BaseModel):\n    \"\"\"Pagination metadata\"\"\"\n    page: int = Field(..., ge=1, description=\"Current page\")\n    size: int = Field(..., ge=1, le=100, description=\"Page size\")\n    total: int = Field(..., ge=0, description=\"Total number of items\")\n    pages: int = Field(..., ge=0, description=\"Total number of pages\")\n    has_next: bool = Field(..., description=\"Whether next page exists\")\n    has_prev: bool = Field(..., description=\"Whether previous page exists\")\n\nclass PaginatedResponse(BaseModel, Generic[T]):\n    \"\"\"Paginated response\"\"\"\n    success: bool = Field(True, description=\"Request success status\")\n    status: ResponseStatus = Field(ResponseStatus.SUCCESS, description=\"Response status\")\n    data: List[T] = Field(..., description=\"Data list\")\n    meta: PaginationMeta = Field(..., description=\"Pagination information\")\n    message: Optional[str] = Field(None, description=\"Response message\")\n    timestamp: datetime = Field(default_factory=datetime.utcnow, description=\"Response time\")\n    request_id: Optional[str] = Field(None, description=\"Request tracking ID\")\n\nclass ValidationErrorDetail(BaseModel):\n    \"\"\"Validation error detail\"\"\"\n    field: str = Field(..., description=\"Validation failed field\")\n    message: str = Field(..., description=\"Error message\")\n    invalid_value: Any = Field(..., description=\"Invalid value\")\n\nclass ValidationErrorResponse(BaseModel):\n    \"\"\"Validation error response\"\"\"\n    success: bool = Field(False, description=\"Request success status\")\n    status: ResponseStatus = Field(ResponseStatus.ERROR, description=\"Response status\")\n    error: ErrorDetail = Field(..., description=\"Error information\")\n    validation_errors: List[ValidationErrorDetail] = Field(..., description=\"Validation error list\")\n    timestamp: datetime = Field(default_factory=datetime.utcnow, description=\"Response time\")\n    request_id: Optional[str] = Field(None, description=\"Request tracking ID\")\n</code></pre>"},{"location":"tutorial/custom-response-handling/#response-utility-functions-srcutilsresponsespy","title":"Response utility functions (<code>src/utils/responses.py</code>)","text":"<pre><code>from typing import Any, Optional, List, TypeVar\nfrom fastapi import Request\nfrom fastapi.responses import JSONResponse\nimport uuid\n\nfrom src.schemas.base import (\n    BaseResponse, ErrorResponse, PaginatedResponse,\n    ResponseStatus, ErrorDetail, PaginationMeta\n)\n\nT = TypeVar('T')\n\ndef generate_request_id() -&gt; str:\n    \"\"\"Generate request tracking ID\"\"\"\n    return str(uuid.uuid4())\n\ndef success_response(\n    data: Any = None,\n    message: Optional[str] = None,\n    request_id: Optional[str] = None,\n    status_code: int = 200\n) -&gt; JSONResponse:\n    \"\"\"Generate success response\"\"\"\n    response_data = BaseResponse[Any](\n        success=True,\n        status=ResponseStatus.SUCCESS,\n        data=data,\n        message=message or \"Request processed successfully\",\n        request_id=request_id or generate_request_id()\n    )\n\n    return JSONResponse(\n        status_code=status_code,\n        content=response_data.dict(exclude_none=True)\n    )\n\ndef error_response(\n    error_code: str,\n    error_message: str,\n    details: Optional[dict] = None,\n    status_code: int = 400,\n    request_id: Optional[str] = None\n) -&gt; JSONResponse:\n    \"\"\"Generate error response\"\"\"\n    error_detail = ErrorDetail(\n        code=error_code,\n        message=error_message,\n        details=details\n    )\n\n    response_data = ErrorResponse(\n        error=error_detail,\n        request_id=request_id or generate_request_id()\n    )\n\n    return JSONResponse(\n        status_code=status_code,\n        content=response_data.dict(exclude_none=True)\n    )\n\ndef paginated_response(\n    data: List[T],\n    page: int,\n    size: int,\n    total: int,\n    message: Optional[str] = None,\n    request_id: Optional[str] = None\n) -&gt; JSONResponse:\n    \"\"\"Generate paginated response\"\"\"\n    pages = (total + size - 1) // size  # round up calculation\n    has_next = page &lt; pages\n    has_prev = page &gt; 1\n\n    meta = PaginationMeta(\n        page=page,\n        size=size,\n        total=total,\n        pages=pages,\n        has_next=has_next,\n        has_prev=has_prev\n    )\n\n    response_data = PaginatedResponse[T](\n        data=data,\n        meta=meta,\n        message=message or f\"Page {page}/{pages} data retrieved\",\n        request_id=request_id or generate_request_id()\n    )\n\n    return JSONResponse(\n        status_code=200,\n        content=response_data.dict(exclude_none=True)\n    )\n\nclass ResponseHelper:\n    \"\"\"Response helper class\"\"\"\n\n    @staticmethod\n    def created(data: Any, message: str = \"Resource created successfully\") -&gt; JSONResponse:\n        return success_response(data=data, message=message, status_code=201)\n\n    @staticmethod\n    def updated(data: Any, message: str = \"Resource updated successfully\") -&gt; JSONResponse:\n        return success_response(data=data, message=message, status_code=200)\n\n    @staticmethod\n    def deleted(message: str = \"Resource deleted successfully\") -&gt; JSONResponse:\n        return success_response(data=None, message=message, status_code=204)\n\n    @staticmethod\n    def not_found(resource: str = \"Resource\") -&gt; JSONResponse:\n        return error_response(\n            error_code=\"RESOURCE_NOT_FOUND\",\n            error_message=f\"{resource} not found\",\n            status_code=404\n        )\n\n    @staticmethod\n    def bad_request(message: str = \"Bad request\") -&gt; JSONResponse:\n        return error_response(\n            error_code=\"BAD_REQUEST\",\n            error_message=message,\n            status_code=400\n        )\n\n    @staticmethod\n    def unauthorized(message: str = \"Authentication required\") -&gt; JSONResponse:\n        return error_response(\n            error_code=\"UNAUTHORIZED\",\n            error_message=message,\n            status_code=401\n        )\n\n    @staticmethod\n    def forbidden(message: str = \"Permission denied\") -&gt; JSONResponse:\n        return error_response(\n            error_code=\"FORBIDDEN\",\n            error_message=message,\n            status_code=403\n        )\n\n    @staticmethod\n    def server_error(message: str = \"Server internal error occurred\") -&gt; JSONResponse:\n        return error_response(\n            error_code=\"INTERNAL_SERVER_ERROR\",\n            error_message=message,\n            status_code=500\n        )\n</code></pre>"},{"location":"tutorial/custom-response-handling/#step-4-custom-exception-handling-system","title":"Step 4: Custom exception handling system","text":""},{"location":"tutorial/custom-response-handling/#custom-exception-class-srchelperexceptionspy","title":"Custom exception class (<code>src/helper/exceptions.py</code>)","text":"<pre><code>from typing import Optional, Dict, Any\nfrom fastapi import HTTPException\n\nclass BaseAPIException(HTTPException):\n    \"\"\"Base API exception class\"\"\"\n\n    def __init__(\n        self,\n        error_code: str,\n        message: str,\n        status_code: int = 400,\n        details: Optional[Dict[str, Any]] = None\n    ):\n        self.error_code = error_code\n        self.message = message\n        self.details = details or {}\n        super().__init__(status_code=status_code, detail=message)\n\nclass ValidationException(BaseAPIException):\n    \"\"\"Validation exception\"\"\"\n\n    def __init__(self, message: str, field: Optional[str] = None, details: Optional[Dict] = None):\n        super().__init__(\n            error_code=\"VALIDATION_ERROR\",\n            message=message,\n            status_code=422,\n            details=details or {\"field\": field} if field else None\n        )\n\nclass ResourceNotFoundException(BaseAPIException):\n    \"\"\"Resource not found exception\"\"\"\n\n    def __init__(self, resource: str, resource_id: Any):\n        super().__init__(\n            error_code=\"RESOURCE_NOT_FOUND\",\n            message=f\"{resource}(ID: {resource_id}) not found\",\n            status_code=404,\n            details={\"resource\": resource, \"id\": resource_id}\n        )\n\nclass DuplicateResourceException(BaseAPIException):\n    \"\"\"Duplicate resource exception\"\"\"\n\n    def __init__(self, resource: str, field: str, value: Any):\n        super().__init__(\n            error_code=\"DUPLICATE_RESOURCE\",\n            message=f\"{resource} {field} '{value}' already exists\",\n            status_code=409,\n            details={\"resource\": resource, \"field\": field, \"value\": value}\n        )\n\nclass BusinessLogicException(BaseAPIException):\n    \"\"\"Business logic exception\"\"\"\n\n    def __init__(self, message: str, error_code: str = \"BUSINESS_LOGIC_ERROR\"):\n        super().__init__(\n            error_code=error_code,\n            message=message,\n            status_code=422\n        )\n\nclass RateLimitException(BaseAPIException):\n    \"\"\"Request limit exception\"\"\"\n\n    def __init__(self, retry_after: int = 60):\n        super().__init__(\n            error_code=\"RATE_LIMIT_EXCEEDED\",\n            message=\"Request limit exceeded. Please try again later\",\n            status_code=429,\n            details={\"retry_after\": retry_after}\n        )\n\nclass AuthenticationException(BaseAPIException):\n    \"\"\"Authentication exception\"\"\"\n\n    def __init__(self, message: str = \"Authentication required\"):\n        super().__init__(\n            error_code=\"AUTHENTICATION_REQUIRED\",\n            message=message,\n            status_code=401\n        )\n\nclass AuthorizationException(BaseAPIException):\n    \"\"\"Authorization exception\"\"\"\n\n    def __init__(self, message: str = \"Permission denied\"):\n        super().__init__(\n            error_code=\"INSUFFICIENT_PERMISSIONS\",\n            message=message,\n            status_code=403\n        )\n</code></pre>"},{"location":"tutorial/custom-response-handling/#global-exception-handler-srcmainpy","title":"Global exception handler (<code>src/main.py</code>)","text":"<pre><code>from fastapi import FastAPI, Request, status\nfrom fastapi.exceptions import RequestValidationError, HTTPException\nfrom fastapi.responses import JSONResponse\nfrom pydantic import ValidationError\nimport logging\nimport traceback\n\nfrom src.helper.exceptions import BaseAPIException\nfrom src.utils.responses import error_response, generate_request_id\nfrom src.schemas.base import ValidationErrorDetail, ValidationErrorResponse\n\nlogger = logging.getLogger(__name__)\n\napp = FastAPI(\n    title=\"Advanced API Server\",\n    description=\"API server with advanced response handling\",\n    version=\"1.0.0\"\n)\n\n@app.exception_handler(BaseAPIException)\nasync def custom_api_exception_handler(request: Request, exc: BaseAPIException):\n    \"\"\"Custom API exception handler\"\"\"\n    request_id = generate_request_id()\n\n    logger.error(\n        f\"API Exception: {exc.error_code} - {exc.message}\",\n        extra={\n            \"request_id\": request_id,\n            \"path\": request.url.path,\n            \"method\": request.method,\n            \"details\": exc.details\n        }\n    )\n\n    return error_response(\n        error_code=exc.error_code,\n        error_message=exc.message,\n        details=exc.details,\n        status_code=exc.status_code,\n        request_id=request_id\n    )\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    \"\"\"Pydantic validation exception handler\"\"\"\n    request_id = generate_request_id()\n\n    validation_errors = []\n    for error in exc.errors():\n        field = \".\".join(str(loc) for loc in error[\"loc\"])\n        validation_errors.append(\n            ValidationErrorDetail(\n                field=field,\n                message=error[\"msg\"],\n                invalid_value=error.get(\"input\", \"\")\n            )\n        )\n\n    error_response_data = ValidationErrorResponse(\n        error={\n            \"code\": \"VALIDATION_ERROR\",\n            \"message\": \"Input data validation failed\",\n            \"details\": {\"error_count\": len(validation_errors)}\n        },\n        validation_errors=validation_errors,\n        request_id=request_id\n    )\n\n    logger.warning(\n        f\"Validation Error: {len(validation_errors)} validation errors\",\n        extra={\n            \"request_id\": request_id,\n            \"path\": request.url.path,\n            \"method\": request.method,\n            \"errors\": [err.dict() for err in validation_errors]\n        }\n    )\n\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content=error_response_data.dict(exclude_none=True)\n    )\n\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    \"\"\"HTTP exception handler\"\"\"\n    request_id = generate_request_id()\n\n    error_code_map = {\n        400: \"BAD_REQUEST\",\n        401: \"UNAUTHORIZED\",\n        403: \"FORBIDDEN\",\n        404: \"NOT_FOUND\",\n        405: \"METHOD_NOT_ALLOWED\",\n        500: \"INTERNAL_SERVER_ERROR\"\n    }\n\n    error_code = error_code_map.get(exc.status_code, \"HTTP_ERROR\")\n\n    return error_response(\n        error_code=error_code,\n        error_message=exc.detail,\n        status_code=exc.status_code,\n        request_id=request_id\n    )\n\n@app.exception_handler(Exception)\nasync def general_exception_handler(request: Request, exc: Exception):\n    \"\"\"General exception handler\"\"\"\n    request_id = generate_request_id()\n\n    logger.error(\n        f\"Unhandled Exception: {type(exc).__name__} - {str(exc)}\",\n        extra={\n            \"request_id\": request_id,\n            \"path\": request.url.path,\n            \"method\": request.method,\n            \"traceback\": traceback.format_exc()\n        }\n    )\n\n    return error_response(\n        error_code=\"INTERNAL_SERVER_ERROR\",\n        error_message=\"Unexpected error occurred\",\n        status_code=500,\n        request_id=request_id\n    )\n</code></pre>"},{"location":"tutorial/custom-response-handling/#step-5-advanced-pagination-system","title":"Step 5: Advanced pagination system","text":""},{"location":"tutorial/custom-response-handling/#pagination-helper-srchelperpaginationpy","title":"Pagination helper (<code>src/helper/pagination.py</code>)","text":"<pre><code>from typing import List, Optional, Any, Dict, Callable\nfrom pydantic import BaseModel, Field\nfrom fastapi import Query\nfrom enum import Enum\n\nclass SortOrder(str, Enum):\n    \"\"\"Sort order\"\"\"\n    ASC = \"asc\"\n    DESC = \"desc\"\n\nclass PaginationParams(BaseModel):\n    \"\"\"Pagination parameters\"\"\"\n    page: int = Field(1, ge=1, description=\"Page number\")\n    size: int = Field(20, ge=1, le=100, description=\"Page size\")\n    sort_by: Optional[str] = Field(None, description=\"Sort field\")\n    sort_order: SortOrder = Field(SortOrder.ASC, description=\"Sort order\")\n\nclass FilterParams(BaseModel):\n    \"\"\"Filtering parameters\"\"\"\n    search: Optional[str] = Field(None, description=\"Search term\")\n    category: Optional[str] = Field(None, description=\"Category\")\n    status: Optional[str] = Field(None, description=\"Status\")\n    date_from: Optional[str] = Field(None, description=\"Start date (YYYY-MM-DD)\")\n    date_to: Optional[str] = Field(None, description=\"End date (YYYY-MM-DD)\")\n\ndef pagination_params(\n    page: int = Query(1, ge=1, description=\"Page number\"),\n    size: int = Query(20, ge=1, le=100, description=\"Page size\"),\n    sort_by: Optional[str] = Query(None, description=\"Sort field\"),\n    sort_order: SortOrder = Query(SortOrder.ASC, description=\"Sort order\")\n) -&gt; PaginationParams:\n    \"\"\"Pagination parameters dependency\"\"\"\n    return PaginationParams(\n        page=page,\n        size=size,\n        sort_by=sort_by,\n        sort_order=sort_order\n    )\n\ndef filter_params(\n    search: Optional[str] = Query(None, description=\"Search term\"),\n    category: Optional[str] = Query(None, description=\"Category\"),\n    status: Optional[str] = Query(None, description=\"Status\"),\n    date_from: Optional[str] = Query(None, description=\"Start date (YYYY-MM-DD)\"),\n    date_to: Optional[str] = Query(None, description=\"End date (YYYY-MM-DD)\")\n) -&gt; FilterParams:\n    \"\"\"Filtering parameters dependency\"\"\"\n    return FilterParams(\n        search=search,\n        category=category,\n        status=status,\n        date_from=date_from,\n        date_to=date_to\n    )\n\nclass AdvancedPaginator:\n    \"\"\"Advanced pagination class\"\"\"\n\n    def __init__(self, data: List[Any], pagination: PaginationParams, filters: FilterParams):\n        self.data = data\n        self.pagination = pagination\n        self.filters = filters\n        self.filtered_data = self._apply_filters()\n        self.sorted_data = self._apply_sorting()\n\n    def _apply_filters(self) -&gt; List[Any]:\n        \"\"\"Apply filters\"\"\"\n        filtered = self.data\n\n        if self.filters.search:\n            # Filter by search term (example: search in name or description fields)\n            search_term = self.filters.search.lower()\n            filtered = [\n                item for item in filtered\n                if (hasattr(item, 'name') and search_term in item.name.lower()) or\n                   (hasattr(item, 'description') and item.description and search_term in item.description.lower())\n            ]\n\n        if self.filters.category:\n            filtered = [item for item in filtered if hasattr(item, 'category') and item.category == self.filters.category]\n\n        if self.filters.status:\n            filtered = [item for item in filtered if hasattr(item, 'status') and item.status == self.filters.status]\n\n        # Implement date filtering (if date field exists)\n        if self.filters.date_from or self.filters.date_to:\n            from datetime import datetime\n            filtered = self._apply_date_filter(filtered)\n\n        return filtered\n\n    def _apply_date_filter(self, data: List[Any]) -&gt; List[Any]:\n        \"\"\"Apply date filter\"\"\"\n        from datetime import datetime\n\n        if not self.filters.date_from and not self.filters.date_to:\n            return data\n\n        filtered = []\n        for item in data:\n            if not hasattr(item, 'created_at'):\n                continue\n\n            item_date = item.created_at.date() if hasattr(item.created_at, 'date') else item.created_at\n\n            if self.filters.date_from:\n                start_date = datetime.strptime(self.filters.date_from, \"%Y-%m-%d\").date()\n                if item_date &lt; start_date:\n                    continue\n\n            if self.filters.date_to:\n                end_date = datetime.strptime(self.filters.date_to, \"%Y-%m-%d\").date()\n                if item_date &gt; end_date:\n                    continue\n\n            filtered.append(item)\n\n        return filtered\n\n    def _apply_sorting(self) -&gt; List[Any]:\n        \"\"\"Apply sorting\"\"\"\n        if not self.pagination.sort_by:\n            return self.filtered_data\n\n        reverse = self.pagination.sort_order == SortOrder.DESC\n\n        try:\n            return sorted(\n                self.filtered_data,\n                key=lambda x: getattr(x, self.pagination.sort_by, 0),\n                reverse=reverse\n            )\n        except (AttributeError, TypeError):\n            # Return original data if sort field is not found or cannot be sorted\n            return self.filtered_data\n\n    def get_page(self) -&gt; tuple[List[Any], int]:\n        \"\"\"Return current page data and total count\"\"\"\n        total = len(self.sorted_data)\n        start = (self.pagination.page - 1) * self.pagination.size\n        end = start + self.pagination.size\n\n        page_data = self.sorted_data[start:end]\n        return page_data, total\n\n    def get_metadata(self) -&gt; Dict[str, Any]:\n        \"\"\"Return pagination metadata\"\"\"\n        total = len(self.sorted_data)\n        pages = (total + self.pagination.size - 1) // self.pagination.size\n\n        return {\n            \"page\": self.pagination.page,\n            \"size\": self.pagination.size,\n            \"total\": total,\n            \"pages\": pages,\n            \"has_next\": self.pagination.page &lt; pages,\n            \"has_prev\": self.pagination.page &gt; 1,\n            \"filters_applied\": {\n                \"search\": self.filters.search,\n                \"category\": self.filters.category,\n                \"status\": self.filters.status,\n                \"date_range\": f\"{self.filters.date_from} ~ {self.filters.date_to}\" if self.filters.date_from or self.filters.date_to else None\n            },\n            \"sorting\": {\n                \"field\": self.pagination.sort_by,\n                \"order\": self.pagination.sort_order\n            } if self.pagination.sort_by else None\n        }\n</code></pre>"},{"location":"tutorial/custom-response-handling/#step-6-implementing-advanced-api-endpoints","title":"Step 6: Implementing advanced API endpoints","text":""},{"location":"tutorial/custom-response-handling/#item-api-router-srcapiroutesitemspy","title":"Item API router (<code>src/api/routes/items.py</code>)","text":"<pre><code>from typing import List, Optional\nfrom fastapi import APIRouter, Depends, HTTPException, Query, Path, BackgroundTasks\nfrom fastapi.responses import JSONResponse\n\nfrom src.schemas.items import Item, ItemCreate, ItemUpdate, ItemResponse\nfrom src.helper.pagination import pagination_params, filter_params, PaginationParams, FilterParams, AdvancedPaginator\nfrom src.helper.exceptions import ResourceNotFoundException, DuplicateResourceException, ValidationException\nfrom src.utils.responses import success_response, paginated_response, ResponseHelper\nfrom src.crud.items import ItemCRUD\n\nrouter = APIRouter(prefix=\"/items\", tags=[\"items\"])\ncrud = ItemCRUD()\n\n@router.post(\"/\", response_model=dict, status_code=201)\nasync def create_item(\n    item_create: ItemCreate,\n    background_tasks: BackgroundTasks\n) -&gt; JSONResponse:\n    \"\"\"\n    Create a new item\n\n    - **name**: Item name (required)\n    - **description**: Item description (optional)\n    - **price**: Price (required, 0 or greater)\n    - **category**: Category (optional)\n    \"\"\"\n    # Check for duplicates\n    existing_item = await crud.get_by_name(item_create.name)\n    if existing_item:\n        raise DuplicateResourceException(\"Item\", \"name\", item_create.name)\n\n    # Business logic validation\n    if item_create.price &lt; 0:\n        raise ValidationException(\"Price must be 0 or greater\", \"price\")\n\n    # Create item\n    created_item = await crud.create(item_create)\n\n    # Background tasks (e.g. sending notifications, logging, etc.)\n    background_tasks.add_task(send_creation_notification, created_item.id)\n\n    return ResponseHelper.created(\n        data=created_item.dict(),\n        message=f\"Item '{created_item.name}' created successfully\"\n    )\n\n@router.get(\"/\", response_model=dict)\nasync def list_items(\n    pagination: PaginationParams = Depends(pagination_params),\n    filters: FilterParams = Depends(filter_params)\n) -&gt; JSONResponse:\n    \"\"\"\n    Get item list (pagination, filtering, sorting supported)\n\n    **Pagination:**\n    - page: Page number (default: 1)\n    - size: Page size (default: 20, maximum: 100)\n\n    **Sorting:**\n    - sort_by: Sort field (name, price, created_at, etc.)\n    - sort_order: Sort order (asc, desc)\n\n    **Filtering:**\n    - search: Search term (search in name or description fields)\n    - category: Category filter\n    - status: Status filter\n    - date_from: Start date (YYYY-MM-DD)\n    - date_to: End date (YYYY-MM-DD)\n    \"\"\"\n    # Get all items\n    all_items = await crud.get_all()\n\n    # Apply advanced pagination\n    paginator = AdvancedPaginator(all_items, pagination, filters)\n    page_data, total = paginator.get_page()\n\n    # Include additional metadata in response\n    metadata = paginator.get_metadata()\n\n    # Create custom message\n    message = f\"Total {total} items, {len(page_data)} items retrieved\"\n    if filters.search:\n        message += f\" (Search term: '{filters.search}')\"\n\n    return paginated_response(\n        data=[item.dict() for item in page_data],\n        page=pagination.page,\n        size=pagination.size,\n        total=total,\n        message=message\n    )\n\n@router.get(\"/search/advanced\", response_model=dict)\nasync def advanced_search(\n    q: str = Query(..., min_length=1, description=\"Search term\"),\n    fields: List[str] = Query([\"name\", \"description\"], description=\"Search fields\"),\n    exact_match: bool = Query(False, description=\"Exact match\"),\n    case_sensitive: bool = Query(False, description=\"Case sensitive\"),\n    pagination: PaginationParams = Depends(pagination_params)\n) -&gt; JSONResponse:\n    \"\"\"\n    Advanced search functionality\n\n    - **q**: Search term (required)\n    - **fields**: Search fields list\n    - **exact_match**: Exact match\n    - **case_sensitive**: Case sensitive\n    \"\"\"\n    results = await crud.advanced_search(\n        query=q,\n        fields=fields,\n        exact_match=exact_match,\n        case_sensitive=case_sensitive\n    )\n\n    # Apply pagination\n    total = len(results)\n    start = (pagination.page - 1) * pagination.size\n    end = start + pagination.size\n    page_data = results[start:end]\n\n    return paginated_response(\n        data=[item.dict() for item in page_data],\n        page=pagination.page,\n        size=pagination.size,\n        total=total,\n        message=f\"'{q}' search results: {total} items\"\n    )\n\n@router.get(\"/{item_id}\", response_model=dict)\nasync def get_item(\n    item_id: int = Path(..., gt=0, description=\"Item ID\")\n) -&gt; JSONResponse:\n    \"\"\"Get specific item\"\"\"\n    item = await crud.get_by_id(item_id)\n    if not item:\n        raise ResourceNotFoundException(\"Item\", item_id)\n\n    return success_response(\n        data=item.dict(),\n        message=f\"Item '{item.name}' retrieved successfully\"\n    )\n\n@router.put(\"/{item_id}\", response_model=dict)\nasync def update_item(\n    item_id: int = Path(..., gt=0, description=\"Item ID\"),\n    item_update: ItemUpdate\n) -&gt; JSONResponse:\n    \"\"\"Update item\"\"\"\n    existing_item = await crud.get_by_id(item_id)\n    if not existing_item:\n        raise ResourceNotFoundException(\"Item\", item_id)\n\n    # Check for duplicate name (with other items)\n    if item_update.name and item_update.name != existing_item.name:\n        duplicate = await crud.get_by_name(item_update.name)\n        if duplicate:\n            raise DuplicateResourceException(\"Item\", \"name\", item_update.name)\n\n    updated_item = await crud.update(item_id, item_update)\n\n    return ResponseHelper.updated(\n        data=updated_item.dict(),\n        message=f\"Item '{updated_item.name}' updated successfully\"\n    )\n\n@router.delete(\"/{item_id}\", response_model=dict, status_code=204)\nasync def delete_item(\n    item_id: int = Path(..., gt=0, description=\"Item ID\"),\n    force: bool = Query(False, description=\"Force delete\")\n) -&gt; JSONResponse:\n    \"\"\"Delete item\"\"\"\n    item = await crud.get_by_id(item_id)\n    if not item:\n        raise ResourceNotFoundException(\"Item\", item_id)\n\n    # Validation before deletion (e.g. related orders)\n    if not force and await crud.has_related_orders(item_id):\n        raise ValidationException(\n            \"Related orders exist, cannot be deleted. Use force=true to force delete\"\n        )\n\n    await crud.delete(item_id)\n\n    return ResponseHelper.deleted(\n        message=f\"Item '{item.name}' deleted successfully\"\n    )\n\n@router.post(\"/bulk\", response_model=dict)\nasync def bulk_create_items(\n    items: List[ItemCreate],\n    skip_duplicates: bool = Query(False, description=\"Skip duplicates\")\n) -&gt; JSONResponse:\n    \"\"\"Bulk create items\"\"\"\n    if len(items) &gt; 100:\n        raise ValidationException(\"Maximum 100 items can be created at once\")\n\n    created_items = []\n    skipped_items = []\n    errors = []\n\n    for i, item_create in enumerate(items):\n        try:\n            # Check for duplicates\n            existing = await crud.get_by_name(item_create.name)\n            if existing:\n                if skip_duplicates:\n                    skipped_items.append({\"index\": i, \"name\": item_create.name, \"reason\": \"Duplicate name\"})\n                    continue\n                else:\n                    errors.append({\"index\": i, \"name\": item_create.name, \"error\": \"Duplicate name\"})\n                    continue\n\n            created_item = await crud.create(item_create)\n            created_items.append(created_item)\n\n        except Exception as e:\n            errors.append({\"index\": i, \"name\": item_create.name, \"error\": str(e)})\n\n    result = {\n        \"created_count\": len(created_items),\n        \"skipped_count\": len(skipped_items),\n        \"error_count\": len(errors),\n        \"created_items\": [item.dict() for item in created_items],\n        \"skipped_items\": skipped_items,\n        \"errors\": errors\n    }\n\n    message = f\"{len(created_items)} items created\"\n    if skipped_items:\n        message += f\", {len(skipped_items)} skipped\"\n    if errors:\n        message += f\", {len(errors)} errors\"\n\n    return success_response(data=result, message=message)\n\nasync def send_creation_notification(item_id: int):\n    \"\"\"Item creation notification (background task)\"\"\"\n    # In actual implementation, send notification via email, Slack, etc.\n    import asyncio\n    await asyncio.sleep(1)  # Simulation\n    print(f\"Item {item_id} creation notification sent\")\n</code></pre>"},{"location":"tutorial/custom-response-handling/#step-7-openapi-documentation-customization","title":"Step 7: OpenAPI documentation customization","text":""},{"location":"tutorial/custom-response-handling/#openapi-documentation-customization-srcutilsdocumentspy","title":"OpenAPI documentation customization (<code>src/utils/documents.py</code>)","text":"<pre><code>from fastapi import FastAPI\nfrom fastapi.openapi.utils import get_openapi\nfrom typing import Dict, Any\n\ndef custom_openapi(app: FastAPI) -&gt; Dict[str, Any]:\n    \"\"\"Create custom OpenAPI schema\"\"\"\n    if app.openapi_schema:\n        return app.openapi_schema\n\n    openapi_schema = get_openapi(\n        title=app.title,\n        version=app.version,\n        description=app.description,\n        routes=app.routes,\n    )\n\n    # Add custom information\n    openapi_schema[\"info\"].update({\n        \"contact\": {\n            \"name\": \"API Support\",\n            \"url\": \"https://example.com/support\",\n            \"email\": \"support@example.com\"\n        },\n        \"license\": {\n            \"name\": \"MIT\",\n            \"url\": \"https://opensource.org/licenses/MIT\"\n        },\n        \"termsOfService\": \"https://example.com/terms\"\n    })\n\n    # Add server information\n    openapi_schema[\"servers\"] = [\n        {\n            \"url\": \"https://api.example.com\",\n            \"description\": \"Production server\"\n        },\n        {\n            \"url\": \"https://staging-api.example.com\",\n            \"description\": \"Staging server\"\n        },\n        {\n            \"url\": \"http://localhost:8000\",\n            \"description\": \"Development server\"\n        }\n    ]\n\n    # Add common response schema\n    openapi_schema[\"components\"][\"schemas\"].update({\n        \"SuccessResponse\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"success\": {\"type\": \"boolean\", \"example\": True},\n                \"status\": {\"type\": \"string\", \"example\": \"success\"},\n                \"data\": {\"type\": \"object\"},\n                \"message\": {\"type\": \"string\", \"example\": \"Request processed successfully\"},\n                \"timestamp\": {\"type\": \"string\", \"format\": \"date-time\"},\n                \"request_id\": {\"type\": \"string\", \"example\": \"123e4567-e89b-12d3-a456-426614174000\"}\n            }\n        },\n        \"ErrorResponse\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"success\": {\"type\": \"boolean\", \"example\": False},\n                \"status\": {\"type\": \"string\", \"example\": \"error\"},\n                \"error\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"code\": {\"type\": \"string\", \"example\": \"RESOURCE_NOT_FOUND\"},\n                        \"message\": {\"type\": \"string\", \"example\": \"Resource not found\"},\n                        \"details\": {\"type\": \"object\"}\n                    }\n                },\n                \"timestamp\": {\"type\": \"string\", \"format\": \"date-time\"},\n                \"request_id\": {\"type\": \"string\", \"example\": \"123e4567-e89b-12d3-a456-426614174000\"}\n            }\n        }\n    })\n\n    # Add tag grouping and description\n    openapi_schema[\"tags\"] = [\n        {\n            \"name\": \"items\",\n            \"description\": \"Item management API\",\n            \"externalDocs\": {\n                \"description\": \"More information\",\n                \"url\": \"https://example.com/docs/items\"\n            }\n        },\n        {\n            \"name\": \"health\",\n            \"description\": \"System status check API\"\n        }\n    ]\n\n    # Add security schema\n    openapi_schema[\"components\"][\"securitySchemes\"] = {\n        \"BearerAuth\": {\n            \"type\": \"http\",\n            \"scheme\": \"bearer\",\n            \"bearerFormat\": \"JWT\"\n        },\n        \"ApiKeyAuth\": {\n            \"type\": \"apiKey\",\n            \"in\": \"header\",\n            \"name\": \"X-API-Key\"\n        }\n    }\n\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\ndef setup_docs(app: FastAPI):\n    \"\"\"Setup documentation\"\"\"\n    app.openapi = lambda: custom_openapi(app)\n\n    # Swagger UI setup\n    app.docs_url = \"/docs\"\n    app.redoc_url = \"/redoc\"\n\n    # Additional document endpoint\n    @app.get(\"/openapi.json\", include_in_schema=False)\n    async def get_openapi_endpoint():\n        return custom_openapi(app)\n</code></pre>"},{"location":"tutorial/custom-response-handling/#apply-to-main-application-srcmainpy-addition","title":"Apply to main application (<code>src/main.py</code> addition)","text":"<pre><code>from src.utils.documents import setup_docs\nfrom src.api.routes import items\n\n# Include router\napp.include_router(items.router, prefix=\"/api/v1\")\n\n# Apply documentation setup\nsetup_docs(app)\n\n# Add request ID middleware\n@app.middleware(\"http\")\nasync def add_request_id(request: Request, call_next):\n    request_id = generate_request_id()\n    request.state.request_id = request_id\n\n    response = await call_next(request)\n    response.headers[\"X-Request-ID\"] = request_id\n\n    return response\n</code></pre>"},{"location":"tutorial/custom-response-handling/#step-8-implementing-caching-system","title":"Step 8: Implementing caching system","text":""},{"location":"tutorial/custom-response-handling/#response-caching-srcutilscachepy","title":"Response caching (<code>src/utils/cache.py</code>)","text":"<pre><code>from typing import Optional, Any, Dict\nfrom functools import wraps\nimport asyncio\nimport json\nimport hashlib\nfrom datetime import datetime, timedelta\n\nclass MemoryCache:\n    \"\"\"Memory-based cache\"\"\"\n\n    def __init__(self):\n        self._cache: Dict[str, Dict[str, Any]] = {}\n\n    async def get(self, key: str) -&gt; Optional[Any]:\n        \"\"\"Get value from cache\"\"\"\n        if key not in self._cache:\n            return None\n\n        item = self._cache[key]\n        if datetime.utcnow() &gt; item[\"expires_at\"]:\n            del self._cache[key]\n            return None\n\n        return item[\"value\"]\n\n    async def set(self, key: str, value: Any, ttl_seconds: int = 300):\n        \"\"\"Save value to cache\"\"\"\n        self._cache[key] = {\n            \"value\": value,\n            \"expires_at\": datetime.utcnow() + timedelta(seconds=ttl_seconds),\n            \"created_at\": datetime.utcnow()\n        }\n\n    async def delete(self, key: str):\n        \"\"\"Delete value from cache\"\"\"\n        self._cache.pop(key, None)\n\n    async def clear(self):\n        \"\"\"Delete all cache\"\"\"\n        self._cache.clear()\n\n    def get_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"Cache statistics\"\"\"\n        now = datetime.utcnow()\n        valid_items = [\n            item for item in self._cache.values()\n            if now &lt;= item[\"expires_at\"]\n        ]\n\n        return {\n            \"total_items\": len(self._cache),\n            \"valid_items\": len(valid_items),\n            \"expired_items\": len(self._cache) - len(valid_items),\n            \"memory_usage_mb\": len(str(self._cache)) / 1024 / 1024\n        }\n\n# Global cache instance\ncache = MemoryCache()\n\ndef cache_response(ttl_seconds: int = 300, key_prefix: str = \"\"):\n    \"\"\"Response caching decorator\"\"\"\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            # Generate cache key\n            cache_key = generate_cache_key(func.__name__, args, kwargs, key_prefix)\n\n            # Get from cache\n            cached_response = await cache.get(cache_key)\n            if cached_response:\n                return cached_response\n\n            # Execute function\n            response = await func(*args, **kwargs)\n\n            # Cache response\n            await cache.set(cache_key, response, ttl_seconds)\n\n            return response\n        return wrapper\n    return decorator\n\ndef generate_cache_key(func_name: str, args: tuple, kwargs: dict, prefix: str = \"\") -&gt; str:\n    \"\"\"Generate cache key\"\"\"\n    # Generate unique key based on function name and arguments\n    key_data = {\n        \"function\": func_name,\n        \"args\": str(args),\n        \"kwargs\": sorted(kwargs.items())\n    }\n\n    key_string = json.dumps(key_data, sort_keys=True)\n    key_hash = hashlib.md5(key_string.encode()).hexdigest()\n\n    return f\"{prefix}:{func_name}:{key_hash}\" if prefix else f\"{func_name}:{key_hash}\"\n\n# Cache management endpoint\n@app.get(\"/admin/cache/stats\")\nasync def get_cache_stats():\n    \"\"\"Get cache statistics\"\"\"\n    stats = cache.get_stats()\n    return success_response(data=stats, message=\"Cache statistics retrieved\")\n\n@app.delete(\"/admin/cache/clear\")\nasync def clear_cache():\n    \"\"\"Delete all cache\"\"\"\n    await cache.clear()\n    return success_response(message=\"Cache deleted successfully\")\n</code></pre>"},{"location":"tutorial/custom-response-handling/#caching-example","title":"Caching example","text":"<pre><code># Apply caching to src/api/routes/items.py\n\nfrom src.utils.cache import cache_response\n\n@router.get(\"/\", response_model=dict)\n@cache_response(ttl_seconds=60, key_prefix=\"items_list\")  # 1 minute caching\nasync def list_items(\n    pagination: PaginationParams = Depends(pagination_params),\n    filters: FilterParams = Depends(filter_params)\n) -&gt; JSONResponse:\n    # ... existing code ...\n\n@router.get(\"/{item_id}\", response_model=dict)\n@cache_response(ttl_seconds=300, key_prefix=\"item_detail\")  # 5 minute caching\nasync def get_item(item_id: int = Path(..., gt=0)) -&gt; JSONResponse:\n    # ... existing code ...\n</code></pre>"},{"location":"tutorial/custom-response-handling/#step-9-api-test","title":"Step 9: API test","text":""},{"location":"tutorial/custom-response-handling/#run-server-and-basic-test","title":"Run server and basic test","text":"<pre><code>$ cd advanced-api-server\n$ fastkit runserver\nStarting FastAPI server at 127.0.0.1:8000...\n\n# Custom response format test\n$ curl -X POST \"http://localhost:8000/api/v1/items/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Advanced notebook\",\n    \"description\": \"Notebook with latest technology\",\n    \"price\": 2500000,\n    \"category\": \"electronics\"\n  }'\n\n{\n  \"success\": true,\n  \"status\": \"success\",\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"Advanced notebook\",\n    \"description\": \"Notebook with latest technology\",\n    \"price\": 2500000,\n    \"category\": \"electronics\",\n    \"created_at\": \"2024-01-01T12:00:00Z\"\n  },\n  \"message\": \"Item 'Advanced notebook' created successfully\",\n  \"timestamp\": \"2024-01-01T12:00:00.123456Z\",\n  \"request_id\": \"123e4567-e89b-12d3-a456-426614174000\"\n}\n\n# Pagination and filtering test\n$ curl \"http://localhost:8000/api/v1/items/?page=1&amp;size=10&amp;search=notebook&amp;sort_by=price&amp;sort_order=desc\"\n\n# Advanced search test\n$ curl \"http://localhost:8000/api/v1/items/search/advanced?q=notebook&amp;fields=name&amp;fields=description&amp;exact_match=false\"\n\n# Error response test\n$ curl \"http://localhost:8000/api/v1/items/999\"\n\n{\n  \"success\": false,\n  \"status\": \"error\",\n  \"error\": {\n    \"code\": \"RESOURCE_NOT_FOUND\",\n    \"message\": \"Item (ID: 999) not found\",\n    \"details\": {\n      \"resource\": \"Item\",\n      \"id\": 999\n    }\n  },\n  \"timestamp\": \"2024-01-01T12:00:00.123456Z\",\n  \"request_id\": \"123e4567-e89b-12d3-a456-426614174000\"\n}\n</code></pre>"},{"location":"tutorial/custom-response-handling/#openapi-document-check","title":"OpenAPI document check","text":"<p>Browse to http://localhost:8000/docs to view the customized API document.</p>"},{"location":"tutorial/custom-response-handling/#next-steps","title":"Next Steps","text":"<p>You've completed the custom response handling system! Next things to try:</p> <ol> <li>MCP Integration - Implementing Model Context Protocol</li> </ol>"},{"location":"tutorial/custom-response-handling/#summary","title":"Summary","text":"<p>In this tutorial, we implemented an advanced response handling system:</p> <ul> <li>\u2705 Designed standardized API response formats</li> <li>\u2705 Global exception handling and custom error responses</li> <li>\u2705 Advanced pagination and filtering systems</li> <li>\u2705 OpenAPI documentation customization</li> <li>\u2705 Response caching and performance optimization</li> <li>\u2705 Request tracking system</li> <li>\u2705 Background task processing</li> <li>\u2705 Batch operation APIs</li> </ul> <p>Now you can implement all the core features of enterprise-grade API servers!</p>"},{"location":"tutorial/database-integration/","title":"Database Integration (PostgreSQL + SQLAlchemy)","text":"<p>Build a FastAPI application using PostgreSQL database and SQLAlchemy ORM that can be used in a real production environment. In this tutorial, we'll implement a complete database integration system using the <code>fastapi-psql-orm</code> template.</p>"},{"location":"tutorial/database-integration/#what-youll-learn-in-this-tutorial","title":"What You'll Learn in This Tutorial","text":"<ul> <li>PostgreSQL database setup and integration</li> <li>Data modeling with SQLAlchemy ORM</li> <li>Database migrations using Alembic</li> <li>Development environment setup with Docker Compose</li> <li>Database connection pool management</li> <li>Transaction processing and data integrity</li> </ul>"},{"location":"tutorial/database-integration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed the Asynchronous CRUD API Tutorial</li> <li>Docker and Docker Compose installed</li> <li>Basic PostgreSQL knowledge</li> <li>Understanding of SQLAlchemy ORM basic concepts</li> </ul>"},{"location":"tutorial/database-integration/#why-postgresql-and-sqlalchemy","title":"Why PostgreSQL and SQLAlchemy?","text":""},{"location":"tutorial/database-integration/#json-files-vs-postgresql-comparison","title":"JSON Files vs PostgreSQL Comparison","text":"Category JSON Files PostgreSQL Performance Limited High-performance indexing Concurrency File locking issues Transaction support Scalability Memory limited Large-scale data processing Integrity Not guaranteed ACID properties guaranteed Queries Need to load all data Complex query support Backup File copying Complete backup/recovery"},{"location":"tutorial/database-integration/#step-1-creating-postgresql-orm-project","title":"Step 1: Creating PostgreSQL + ORM Project","text":"<p>Create a project using the <code>fastapi-psql-orm</code> template:</p> <pre><code>$ fastkit startdemo fastapi-psql-orm\nEnter the project name: todo-postgres-api\nEnter the author name: Developer Kim\nEnter the author email: developer@example.com\nEnter the project description: Todo management API using PostgreSQL\nDeploying FastAPI project using 'fastapi-psql-orm' template\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 todo-postgres-api                       \u2502\n\u2502 Author       \u2502 Developer Kim                           \u2502\n\u2502 Author Email \u2502 developer@example.com                   \u2502\n\u2502 Description  \u2502 Todo management API using PostgreSQL    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       Template Dependencies\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi        \u2502\n\u2502 Dependency 2 \u2502 uvicorn        \u2502\n\u2502 Dependency 3 \u2502 sqlalchemy     \u2502\n\u2502 Dependency 4 \u2502 alembic        \u2502\n\u2502 Dependency 5 \u2502 psycopg2       \u2502\n\u2502 Dependency 6 \u2502 asyncpg        \u2502\n\u2502 Dependency 7 \u2502 sqlmodel       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\n\n\u2728 FastAPI project 'todo-postgres-api' from 'fastapi-psql-orm' has been created successfully!\n</code></pre>"},{"location":"tutorial/database-integration/#step-2-analyzing-project-structure","title":"Step 2: Analyzing Project Structure","text":"<p>The generated project provides a complete database integration environment:</p> <pre><code>todo-postgres-api/\n\u251c\u2500\u2500 docker-compose.yml           # PostgreSQL container configuration\n\u251c\u2500\u2500 Dockerfile                   # Application container\n\u251c\u2500\u2500 alembic.ini                  # Alembic configuration\n\u251c\u2500\u2500 template-config.yml          # Template configuration\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 pre-start.sh            # Pre-start initialization\n\u2502   \u2514\u2500\u2500 test.sh                 # Test execution script\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.py                 # FastAPI application\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u251c\u2500\u2500 config.py           # Environment configuration\n\u2502   \u2502   \u2514\u2500\u2500 db.py               # Database connection setup\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 deps.py             # Dependency injection\n\u2502   \u2502   \u2514\u2500\u2500 routes/\n\u2502   \u2502       \u2514\u2500\u2500 items.py        # API endpoints\n\u2502   \u251c\u2500\u2500 crud/\n\u2502   \u2502   \u2514\u2500\u2500 items.py            # Database operations\n\u2502   \u251c\u2500\u2500 schemas/\n\u2502   \u2502   \u2514\u2500\u2500 items.py            # Pydantic models\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 backend_pre_start.py # Backend initialization\n\u2502   \u2502   \u251c\u2500\u2500 init_data.py        # Initial data loading\n\u2502   \u2502   \u2514\u2500\u2500 tests_pre_start.py  # Test preparation\n\u2502   \u2514\u2500\u2500 alembic/\n\u2502       \u251c\u2500\u2500 env.py              # Alembic environment configuration\n\u2502       \u2514\u2500\u2500 versions/           # Migration files\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 conftest.py             # Test configuration\n    \u2514\u2500\u2500 test_items.py           # API tests\n</code></pre>"},{"location":"tutorial/database-integration/#core-components","title":"Core Components","text":"<ol> <li>SQLModel: SQLAlchemy + Pydantic integration</li> <li>Alembic: Database schema migration</li> <li>asyncpg: Asynchronous PostgreSQL driver</li> <li>Docker Compose: Development environment containerization</li> </ol>"},{"location":"tutorial/database-integration/#step-3-understanding-database-configuration","title":"Step 3: Understanding Database Configuration","text":""},{"location":"tutorial/database-integration/#database-connection-setup-srccoredbpy","title":"Database Connection Setup (<code>src/core/db.py</code>)","text":"<pre><code>from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlmodel import SQLModel\n\nfrom src.core.config import settings\n\n# Create asynchronous PostgreSQL engine\nengine = create_async_engine(\n    settings.DATABASE_URL,\n    echo=settings.DEBUG,  # Output SQL logs\n    pool_size=20,         # Connection pool size\n    max_overflow=0,       # Number of additional connections allowed\n    pool_pre_ping=True,   # Check connection status\n)\n\n# Asynchronous session factory\nAsyncSessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine,\n    class_=AsyncSession,\n    expire_on_commit=False,\n)\n\nasync def create_tables():\n    \"\"\"Create database tables\"\"\"\n    async with engine.begin() as conn:\n        await conn.run_sync(SQLModel.metadata.create_all)\n\nasync def get_session() -&gt; AsyncSession:\n    \"\"\"Provide database session (for dependency injection)\"\"\"\n    async with AsyncSessionLocal() as session:\n        try:\n            yield session\n        finally:\n            await session.close()\n</code></pre>"},{"location":"tutorial/database-integration/#environment-configuration-srccoreconfigpy","title":"Environment Configuration (<code>src/core/config.py</code>)","text":"<pre><code>from pydantic_settings import BaseSettings\nfrom typing import Optional\n\nclass Settings(BaseSettings):\n    PROJECT_NAME: str = \"Todo PostgreSQL API\"\n    VERSION: str = \"1.0.0\"\n    DESCRIPTION: str = \"Todo management API using PostgreSQL\"\n\n    # Database configuration\n    POSTGRES_SERVER: str = \"localhost\"\n    POSTGRES_USER: str = \"postgres\"\n    POSTGRES_PASSWORD: str = \"password\"\n    POSTGRES_DB: str = \"todoapp\"\n    POSTGRES_PORT: int = 5432\n\n    # Test database\n    TEST_DATABASE_URL: Optional[str] = None\n\n    # Debug mode\n    DEBUG: bool = False\n\n    @property\n    def DATABASE_URL(self) -&gt; str:\n        \"\"\"Generate PostgreSQL connection URL\"\"\"\n        return (\n            f\"postgresql+asyncpg://{self.POSTGRES_USER}:\"\n            f\"{self.POSTGRES_PASSWORD}@{self.POSTGRES_SERVER}:\"\n            f\"{self.POSTGRES_PORT}/{self.POSTGRES_DB}\"\n        )\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n</code></pre>"},{"location":"tutorial/database-integration/#step-4-define-data-model","title":"Step 4: Define data model","text":""},{"location":"tutorial/database-integration/#data-model-using-sqlmodel-srcschemasitemspy","title":"Data model using SQLModel (<code>src/schemas/items.py</code>)","text":"<pre><code>from sqlmodel import SQLModel, Field\nfrom typing import Optional\nfrom datetime import datetime\n\n# Define common fields\nclass ItemBase(SQLModel):\n    name: str = Field(index=True, max_length=100)\n    description: Optional[str] = Field(default=None, max_length=500)\n    price: float = Field(gt=0, description=\"Price must be greater than 0\")\n    tax: Optional[float] = Field(default=None, ge=0)\n    is_active: bool = Field(default=True)\n\n# Database table model\nclass Item(ItemBase, table=True):\n    __tablename__ = \"items\"\n\n    id: Optional[int] = Field(default=None, primary_key=True)\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: Optional[datetime] = Field(default=None)\n\n    # Set index\n    class Config:\n        schema_extra = {\n            \"example\": {\n                \"name\": \"notebook\",\n                \"description\": \"High-performance gaming notebook\",\n                \"price\": 1500000.0,\n                \"tax\": 150000.0,\n                \"is_active\": True\n            }\n        }\n\n# API request/response model\nclass ItemCreate(ItemBase):\n    pass\n\nclass ItemUpdate(SQLModel):\n    name: Optional[str] = Field(default=None, max_length=100)\n    description: Optional[str] = Field(default=None, max_length=500)\n    price: Optional[float] = Field(default=None, gt=0)\n    tax: Optional[float] = Field(default=None, ge=0)\n    is_active: Optional[bool] = Field(default=None)\n\nclass ItemResponse(ItemBase):\n    id: int\n    created_at: datetime\n    updated_at: Optional[datetime]\n</code></pre>"},{"location":"tutorial/database-integration/#step-5-implement-crud-operations","title":"Step 5: Implement CRUD operations","text":""},{"location":"tutorial/database-integration/#database-crud-logic-srccruditemspy","title":"Database CRUD logic (<code>src/crud/items.py</code>)","text":"<pre><code>from typing import List, Optional\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select, update, delete\nfrom sqlalchemy.orm import selectinload\nfrom datetime import datetime\n\nfrom src.schemas.items import Item, ItemCreate, ItemUpdate\n\nclass ItemCRUD:\n    def __init__(self, db: AsyncSession):\n        self.db = db\n\n    async def create(self, item_create: ItemCreate) -&gt; Item:\n        \"\"\"Create new item\"\"\"\n        db_item = Item(**item_create.dict())\n\n        self.db.add(db_item)\n        await self.db.commit()\n        await self.db.refresh(db_item)\n\n        return db_item\n\n    async def get_by_id(self, item_id: int) -&gt; Optional[Item]:\n        \"\"\"Get item by ID\"\"\"\n        statement = select(Item).where(Item.id == item_id)\n        result = await self.db.execute(statement)\n        return result.scalar_one_or_none()\n\n    async def get_many(\n        self,\n        skip: int = 0,\n        limit: int = 100,\n        active_only: bool = True\n    ) -&gt; List[Item]:\n        \"\"\"Get multiple items (pagination supported)\"\"\"\n        statement = select(Item)\n\n        if active_only:\n            statement = statement.where(Item.is_active == True)\n\n        statement = statement.offset(skip).limit(limit)\n        result = await self.db.execute(statement)\n        return result.scalars().all()\n\n    async def update(self, item_id: int, item_update: ItemUpdate) -&gt; Optional[Item]:\n        \"\"\"Update item\"\"\"\n        # Prepare update data\n        update_data = item_update.dict(exclude_unset=True)\n        if update_data:\n            update_data[\"updated_at\"] = datetime.utcnow()\n\n        # Execute update\n        statement = (\n            update(Item)\n            .where(Item.id == item_id)\n            .values(**update_data)\n            .returning(Item)\n        )\n\n        result = await self.db.execute(statement)\n        await self.db.commit()\n\n        return result.scalar_one_or_none()\n\n    async def delete(self, item_id: int) -&gt; bool:\n        \"\"\"Delete item (soft delete)\"\"\"\n        statement = (\n            update(Item)\n            .where(Item.id == item_id)\n            .values(is_active=False, updated_at=datetime.utcnow())\n        )\n\n        result = await self.db.execute(statement)\n        await self.db.commit()\n\n        return result.rowcount &gt; 0\n\n    async def hard_delete(self, item_id: int) -&gt; bool:\n        \"\"\"Delete item completely\"\"\"\n        statement = delete(Item).where(Item.id == item_id)\n        result = await self.db.execute(statement)\n        await self.db.commit()\n\n        return result.rowcount &gt; 0\n\n    async def search(self, query: str) -&gt; List[Item]:\n        \"\"\"Search item (name, description)\"\"\"\n        statement = select(Item).where(\n            (Item.name.ilike(f\"%{query}%\")) |\n            (Item.description.ilike(f\"%{query}%\"))\n        ).where(Item.is_active == True)\n\n        result = await self.db.execute(statement)\n        return result.scalars().all()\n\n    async def get_total_count(self, active_only: bool = True) -&gt; int:\n        \"\"\"Get total item count\"\"\"\n        from sqlalchemy import func\n\n        statement = select(func.count(Item.id))\n        if active_only:\n            statement = statement.where(Item.is_active == True)\n\n        result = await self.db.execute(statement)\n        return result.scalar()\n</code></pre>"},{"location":"tutorial/database-integration/#step-6-implement-api-endpoints","title":"Step 6: Implement API endpoints","text":""},{"location":"tutorial/database-integration/#dependency-injection-setup-srcapidepspy","title":"Dependency injection setup (<code>src/api/deps.py</code>)","text":"<pre><code>from typing import AsyncGenerator\nfrom fastapi import Depends\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom src.core.db import get_session\nfrom src.crud.items import ItemCRUD\n\nasync def get_db() -&gt; AsyncGenerator[AsyncSession, None]:\n    \"\"\"Database session dependency\"\"\"\n    async for session in get_session():\n        yield session\n\ndef get_item_crud(db: AsyncSession = Depends(get_db)) -&gt; ItemCRUD:\n    \"\"\"Item CRUD dependency\"\"\"\n    return ItemCRUD(db)\n</code></pre>"},{"location":"tutorial/database-integration/#api-router-implementation-srcapiroutesitemspy","title":"API router implementation (<code>src/api/routes/items.py</code>)","text":"<pre><code>from typing import List\nfrom fastapi import APIRouter, Depends, HTTPException, Query, status\n\nfrom src.api.deps import get_item_crud\nfrom src.crud.items import ItemCRUD\nfrom src.schemas.items import Item, ItemCreate, ItemUpdate, ItemResponse\n\nrouter = APIRouter()\n\n@router.post(\"/\", response_model=ItemResponse, status_code=status.HTTP_201_CREATED)\nasync def create_item(\n    item_create: ItemCreate,\n    crud: ItemCRUD = Depends(get_item_crud)\n):\n    \"\"\"Create new item\"\"\"\n    return await crud.create(item_create)\n\n@router.get(\"/\", response_model=List[ItemResponse])\nasync def read_items(\n    skip: int = Query(0, ge=0, description=\"Skip items\"),\n    limit: int = Query(100, ge=1, le=1000, description=\"Maximum items to retrieve\"),\n    active_only: bool = Query(True, description=\"Only active items\"),\n    crud: ItemCRUD = Depends(get_item_crud)\n):\n    \"\"\"Get item list (pagination supported)\"\"\"\n    return await crud.get_many(skip=skip, limit=limit, active_only=active_only)\n\n@router.get(\"/search\", response_model=List[ItemResponse])\nasync def search_items(\n    q: str = Query(..., min_length=1, description=\"Search term\"),\n    crud: ItemCRUD = Depends(get_item_crud)\n):\n    \"\"\"Search item\"\"\"\n    return await crud.search(q)\n\n@router.get(\"/count\")\nasync def get_items_count(\n    active_only: bool = Query(True, description=\"Only active items\"),\n    crud: ItemCRUD = Depends(get_item_crud)\n):\n    \"\"\"Get total item count\"\"\"\n    count = await crud.get_total_count(active_only)\n    return {\"total\": count}\n\n@router.get(\"/{item_id}\", response_model=ItemResponse)\nasync def read_item(\n    item_id: int,\n    crud: ItemCRUD = Depends(get_item_crud)\n):\n    \"\"\"Get specific item\"\"\"\n    item = await crud.get_by_id(item_id)\n    if not item:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Item ID {item_id} not found\"\n        )\n    return item\n\n@router.put(\"/{item_id}\", response_model=ItemResponse)\nasync def update_item(\n    item_id: int,\n    item_update: ItemUpdate,\n    crud: ItemCRUD = Depends(get_item_crud)\n):\n    \"\"\"Update item\"\"\"\n    updated_item = await crud.update(item_id, item_update)\n    if not updated_item:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Item ID {item_id} not found\"\n        )\n    return updated_item\n\n@router.delete(\"/{item_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_item(\n    item_id: int,\n    hard_delete: bool = Query(False, description=\"Complete delete\"),\n    crud: ItemCRUD = Depends(get_item_crud)\n):\n    \"\"\"Delete item\"\"\"\n    if hard_delete:\n        deleted = await crud.hard_delete(item_id)\n    else:\n        deleted = await crud.delete(item_id)\n\n    if not deleted:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Item ID {item_id} not found\"\n        )\n</code></pre>"},{"location":"tutorial/database-integration/#step-7-run-docker-container","title":"Step 7: Run Docker container","text":""},{"location":"tutorial/database-integration/#check-docker-compose-setup-docker-composeyml","title":"Check Docker Compose setup (<code>docker-compose.yml</code>)","text":"<pre><code>version: '3.8'\n\nservices:\n  db:\n    image: postgres:15\n    restart: always\n    environment:\n      POSTGRES_DB: todoapp\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: password\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  app:\n    build: .\n    restart: always\n    ports:\n      - \"8000:8000\"\n    environment:\n      POSTGRES_SERVER: db\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: todoapp\n    depends_on:\n      - db\n    volumes:\n      - ./src:/app/src\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"tutorial/database-integration/#run-container","title":"Run container","text":"<pre><code>$ cd todo-postgres-api\n\n# Start service in background\n$ docker-compose up -d\nCreating network \"todo-postgres-api_default\" with the default driver\nCreating volume \"todo-postgres-api_postgres_data\" with default driver\nPulling db (postgres:15)...\nCreating todo-postgres-api_db_1 ... done\nBuilding app\nCreating todo-postgres-api_app_1 ... done\n\n# Check service status\n$ docker-compose ps\n           Name                          Command              State           Ports\n-------------------------------------------------------------------------------------\ntodo-postgres-api_app_1    uvicorn src.main:app --host=0.0.0.0 --port=8000   Up   0.0.0.0:8000-&gt;8000/tcp\ntodo-postgres-api_db_1     docker-entrypoint.sh postgres   Up   0.0.0.0:5432-&gt;5432/tcp\n\n# Check log\n$ docker-compose logs app\n</code></pre>"},{"location":"tutorial/database-integration/#step-8-database-migration","title":"Step 8: Database migration","text":""},{"location":"tutorial/database-integration/#create-initial-migration-using-alembic","title":"Create initial migration using Alembic","text":"<pre><code># Run migration inside container\n$ docker-compose exec app alembic revision --autogenerate -m \"Create items table\"\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected added table 'items'\nGenerating migration script /app/src/alembic/versions/001_create_items_table.py ... done\n\n# Apply migration\n$ docker-compose exec app alembic upgrade head\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade -&gt; 001, Create items table\n</code></pre>"},{"location":"tutorial/database-integration/#check-migration-file","title":"Check migration file","text":"<p>Check the created migration file:</p> <pre><code># src/alembic/versions/001_create_items_table.py\n\"\"\"Create items table\n\nRevision ID: 001\nRevises:\nCreate Date: 2024-01-01 12:00:00.000000\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nimport sqlmodel\n\n# revision identifiers\nrevision = '001'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('items',\n    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),\n    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),\n    sa.Column('price', sa.Float(), nullable=False),\n    sa.Column('tax', sa.Float(), nullable=True),\n    sa.Column('is_active', sa.Boolean(), nullable=False),\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_items_name'), 'items', ['name'], unique=False)\n    # ### end Alembic commands ###\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_items_name'), table_name='items')\n    op.drop_table('items')\n    # ### end Alembic commands ###\n</code></pre>"},{"location":"tutorial/database-integration/#step-9-api-test","title":"Step 9: API test","text":""},{"location":"tutorial/database-integration/#basic-crud-test","title":"Basic CRUD test","text":"<pre><code># Create new item\n$ curl -X POST \"http://localhost:8000/items/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"MacBook Pro\",\n    \"description\": \"M2 chipset-equipped high-performance notebook\",\n    \"price\": 2500000,\n    \"tax\": 250000\n  }'\n\n{\n  \"id\": 1,\n  \"name\": \"MacBook Pro\",\n  \"description\": \"M2 chipset-equipped high-performance notebook\",\n  \"price\": 2500000.0,\n  \"tax\": 250000.0,\n  \"is_active\": true,\n  \"created_at\": \"2024-01-01T12:00:00.123456\",\n  \"updated_at\": null\n}\n\n# Get item list\n$ curl \"http://localhost:8000/items/\"\n\n# Get item list with pagination\n$ curl \"http://localhost:8000/items/?skip=0&amp;limit=10\"\n\n# Search item\n$ curl \"http://localhost:8000/items/search?q=MacBook\"\n\n# Get item count\n$ curl \"http://localhost:8000/items/count\"\n{\"total\": 1}\n</code></pre>"},{"location":"tutorial/database-integration/#advanced-query-feature-test","title":"Advanced query feature test","text":"<pre><code># Get item list with inactive items\n$ curl \"http://localhost:8000/items/?active_only=false\"\n\n# Update item\n$ curl -X PUT \"http://localhost:8000/items/1\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"price\": 2300000,\n    \"tax\": 230000\n  }'\n\n# Soft delete item\n$ curl -X DELETE \"http://localhost:8000/items/1\"\n\n# Hard delete item\n$ curl -X DELETE \"http://localhost:8000/items/1?hard_delete=true\"\n</code></pre>"},{"location":"tutorial/database-integration/#step-10-advanced-database-features","title":"Step 10: Advanced database features","text":""},{"location":"tutorial/database-integration/#transaction-processing","title":"Transaction processing","text":"<pre><code># Add to src/crud/items.py\n\nfrom sqlalchemy.exc import SQLAlchemyError\n\nasync def create_items_batch(self, items_create: List[ItemCreate]) -&gt; List[Item]:\n    \"\"\"Create multiple items in a transaction\"\"\"\n    created_items = []\n\n    try:\n        for item_create in items_create:\n            db_item = Item(**item_create.dict())\n            self.db.add(db_item)\n            created_items.append(db_item)\n\n        await self.db.commit()\n\n        # Refresh all items\n        for item in created_items:\n            await self.db.refresh(item)\n\n        return created_items\n\n    except SQLAlchemyError:\n        await self.db.rollback()\n        raise\n</code></pre>"},{"location":"tutorial/database-integration/#relational-data-modeling","title":"Relational data modeling","text":"<pre><code># Add to src/schemas/items.py\n\nfrom sqlmodel import Relationship\n\nclass Category(SQLModel, table=True):\n    __tablename__ = \"categories\"\n\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(max_length=50, unique=True)\n    description: Optional[str] = None\n\n    # Set relationship\n    items: List[\"Item\"] = Relationship(back_populates=\"category\")\n\nclass Item(ItemBase, table=True):\n    __tablename__ = \"items\"\n\n    id: Optional[int] = Field(default=None, primary_key=True)\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: Optional[datetime] = Field(default=None)\n\n    # Add foreign key\n    category_id: Optional[int] = Field(foreign_key=\"categories.id\")\n\n    # Set relationship\n    category: Optional[Category] = Relationship(back_populates=\"items\")\n</code></pre>"},{"location":"tutorial/database-integration/#index-optimization","title":"Index optimization","text":"<pre><code># Add to src/schemas/items.py\n\nfrom sqlalchemy import Index\n\nclass Item(ItemBase, table=True):\n    __tablename__ = \"items\"\n\n    # ... existing fields ...\n\n    # Set composite index\n    __table_args__ = (\n        Index('ix_items_price_active', 'price', 'is_active'),\n        Index('ix_items_created_at', 'created_at'),\n        Index('ix_items_name_description', 'name', 'description'),  # For full text search\n    )\n</code></pre>"},{"location":"tutorial/database-integration/#step-11-write-tests","title":"Step 11: Write tests","text":""},{"location":"tutorial/database-integration/#database-test-setup-testsconftestpy","title":"Database test setup (<code>tests/conftest.py</code>)","text":"<pre><code>import pytest\nimport asyncio\nfrom httpx import AsyncClient\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlmodel import SQLModel\n\nfrom src.main import app\nfrom src.core.db import get_session\nfrom src.core.config import settings\n\n# Test database engine\ntest_engine = create_async_engine(\n    settings.TEST_DATABASE_URL or \"sqlite+aiosqlite:///./test.db\",\n    echo=False,\n)\n\nTestSessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=test_engine,\n    class_=AsyncSession,\n    expire_on_commit=False,\n)\n\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n\n@pytest.fixture(scope=\"function\")\nasync def db_session():\n    # Create test table\n    async with test_engine.begin() as conn:\n        await conn.run_sync(SQLModel.metadata.create_all)\n\n    # Provide session\n    async with TestSessionLocal() as session:\n        yield session\n\n    # Delete table after test\n    async with test_engine.begin() as conn:\n        await conn.run_sync(SQLModel.metadata.drop_all)\n\n@pytest.fixture\nasync def client(db_session: AsyncSession):\n    # Override dependency\n    async def override_get_session():\n        yield db_session\n\n    app.dependency_overrides[get_session] = override_get_session\n\n    async with AsyncClient(app=app, base_url=\"http://test\") as client:\n        yield client\n\n    app.dependency_overrides.clear()\n</code></pre>"},{"location":"tutorial/database-integration/#integration-test-teststest_itemspy","title":"Integration test (<code>tests/test_items.py</code>)","text":"<pre><code>import pytest\nfrom httpx import AsyncClient\n\n@pytest.mark.asyncio\nasync def test_create_and_read_item(client: AsyncClient):\n    \"\"\"Integration test for creating and reading item\"\"\"\n    # Create item\n    item_data = {\n        \"name\": \"Test Item\",\n        \"description\": \"Database test\",\n        \"price\": 50000,\n        \"tax\": 5000\n    }\n\n    response = await client.post(\"/items/\", json=item_data)\n    assert response.status_code == 201\n\n    created_item = response.json()\n    assert created_item[\"name\"] == item_data[\"name\"]\n    assert \"id\" in created_item\n    assert \"created_at\" in created_item\n\n    # Get created item\n    item_id = created_item[\"id\"]\n    response = await client.get(f\"/items/{item_id}\")\n    assert response.status_code == 200\n\n    retrieved_item = response.json()\n    assert retrieved_item[\"id\"] == item_id\n    assert retrieved_item[\"name\"] == item_data[\"name\"]\n\n@pytest.mark.asyncio\nasync def test_item_pagination(client: AsyncClient):\n    \"\"\"Test pagination feature\"\"\"\n    # Create multiple items\n    for i in range(15):\n        item_data = {\n            \"name\": f\"Item {i}\",\n            \"description\": f\"Description {i}\",\n            \"price\": i * 1000,\n            \"tax\": i * 100\n        }\n        await client.post(\"/items/\", json=item_data)\n\n    # Get first page\n    response = await client.get(\"/items/?skip=0&amp;limit=10\")\n    assert response.status_code == 200\n\n    items = response.json()\n    assert len(items) == 10\n\n    # Get second page\n    response = await client.get(\"/items/?skip=10&amp;limit=10\")\n    assert response.status_code == 200\n\n    items = response.json()\n    assert len(items) == 5\n\n@pytest.mark.asyncio\nasync def test_item_search(client: AsyncClient):\n    \"\"\"Test search feature\"\"\"\n    # Create test items\n    items = [\n        {\"name\": \"iPhone 15\", \"description\": \"Latest smartphone\", \"price\": 1200000, \"tax\": 120000},\n        {\"name\": \"Galaxy S24\", \"description\": \"Samsung flagship\", \"price\": 1100000, \"tax\": 110000},\n        {\"name\": \"MacBook Air\", \"description\": \"Apple notebook\", \"price\": 1500000, \"tax\": 150000},\n    ]\n\n    for item in items:\n        await client.post(\"/items/\", json=item)\n\n    # Search \"iPhone\"\n    response = await client.get(\"/items/search?q=iPhone\")\n    assert response.status_code == 200\n\n    results = response.json()\n    assert len(results) == 1\n    assert results[0][\"name\"] == \"iPhone 15\"\n\n    # Search \"smartphone\" (description)\n    response = await client.get(\"/items/search?q=smartphone\")\n    assert response.status_code == 200\n\n    results = response.json()\n    assert len(results) == 1\n    assert results[0][\"description\"] == \"Latest smartphone\"\n</code></pre>"},{"location":"tutorial/database-integration/#run-tests","title":"Run tests","text":"<pre><code># Run tests inside container\n$ docker-compose exec app python -m pytest tests/ -v\n======================== test session starts ========================\ncollected 12 items\n\ntests/test_items.py::test_create_and_read_item PASSED         [ 8%]\ntests/test_items.py::test_item_pagination PASSED             [16%]\ntests/test_items.py::test_item_search PASSED                 [25%]\ntests/test_items.py::test_update_item PASSED                 [33%]\ntests/test_items.py::test_delete_item PASSED                 [41%]\ntests/test_items.py::test_soft_delete PASSED                 [50%]\ntests/test_items.py::test_item_not_found PASSED              [58%]\ntests/test_items.py::test_invalid_item_data PASSED           [66%]\ntests/test_items.py::test_database_transaction PASSED        [75%]\ntests/test_items.py::test_concurrent_operations PASSED       [83%]\ntests/test_items.py::test_item_count PASSED                  [91%]\ntests/test_items.py::test_batch_operations PASSED           [100%]\n\n======================== 12 passed in 2.34s ========================\n</code></pre>"},{"location":"tutorial/database-integration/#step-12-considerations-for-production-deployment","title":"Step 12: Considerations for production deployment","text":""},{"location":"tutorial/database-integration/#optimize-connection-pool","title":"Optimize connection pool","text":"<pre><code># Add to src/core/config.py\n\nclass Settings(BaseSettings):\n    # ... existing settings ...\n\n    # Database connection pool settings\n    DB_POOL_SIZE: int = 20\n    DB_MAX_OVERFLOW: int = 0\n    DB_POOL_PRE_PING: bool = True\n    DB_POOL_RECYCLE: int = 300  # 5 minutes\n\n    # Query timeout\n    DB_QUERY_TIMEOUT: int = 30\n\n    # Connection retry settings\n    DB_RETRY_ATTEMPTS: int = 3\n    DB_RETRY_DELAY: int = 1\n</code></pre>"},{"location":"tutorial/database-integration/#database-monitoring","title":"Database monitoring","text":"<pre><code># Add to src/core/db.py\n\nimport logging\nfrom sqlalchemy import event\nfrom sqlalchemy.engine import Engine\n\nlogger = logging.getLogger(__name__)\n\n@event.listens_for(Engine, \"before_cursor_execute\")\ndef receive_before_cursor_execute(conn, cursor, statement, parameters, context, executemany):\n    \"\"\"Log before query execution\"\"\"\n    context._query_start_time = time.time()\n\n@event.listens_for(Engine, \"after_cursor_execute\")\ndef receive_after_cursor_execute(conn, cursor, statement, parameters, context, executemany):\n    \"\"\"Log after query execution\"\"\"\n    total = time.time() - context._query_start_time\n    if total &gt; 1.0:  # Log slow queries (1 second or more)\n        logger.warning(f\"Slow query: {total:.2f}s - {statement[:100]}...\")\n</code></pre>"},{"location":"tutorial/database-integration/#next-steps","title":"Next Steps","text":"<p>You've completed PostgreSQL database integration! Next things to try:</p> <ol> <li>Docker Containerization - Building production deployment environment</li> <li>Custom Response Handling - Advanced API response formats</li> </ol>"},{"location":"tutorial/database-integration/#summary","title":"Summary","text":"<p>In this tutorial, we used PostgreSQL and SQLAlchemy to:</p> <ul> <li>\u2705 Integrate PostgreSQL database</li> <li>\u2705 Implement ORM using SQLModel</li> <li>\u2705 Set up Alembic migration system</li> <li>\u2705 Advanced CRUD operations and query optimization</li> <li>\u2705 Transaction processing and data integrity</li> <li>\u2705 Pagination, search, and sorting features</li> <li>\u2705 Integration tests and database testing</li> <li>\u2705 Production deployment considerations</li> </ul> <p>Now you can build robust database-driven APIs that can be used in real production environments!</p>"},{"location":"tutorial/docker-deployment/","title":"Docker Containerization and Deployment","text":"<p>Learn how to containerize FastAPI applications with Docker to build consistent development environments and prepare for production deployment. We'll set up a complete Docker-based deployment environment using the <code>fastapi-dockerized</code> template.</p>"},{"location":"tutorial/docker-deployment/#what-youll-learn-in-this-tutorial","title":"What You'll Learn in This Tutorial","text":"<ul> <li>Containerizing FastAPI applications with Docker</li> <li>Creating optimized Docker images with multi-stage builds</li> <li>Setting up development environments with Docker Compose</li> <li>Docker configuration for production deployment</li> <li>Container monitoring and log management</li> <li>Building CI/CD pipelines</li> </ul>"},{"location":"tutorial/docker-deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed the Database Integration Tutorial</li> <li>Docker and Docker Compose installed</li> <li>Understanding of basic Docker commands</li> <li>Basic knowledge of container concepts</li> </ul>"},{"location":"tutorial/docker-deployment/#advantages-of-docker-containerization","title":"Advantages of Docker Containerization","text":""},{"location":"tutorial/docker-deployment/#traditional-vs-docker-approach","title":"Traditional vs Docker Approach","text":"Category Traditional Approach Docker Approach Environment Consistency Differences between environments Same environment everywhere Dependency Management Manual installation required All dependencies included in image Deployment Speed Slow Fast deployment possible Scalability Limited Easy scaling Rollback Complex Immediate rollback to previous version Resource Usage Heavy Lightweight containers"},{"location":"tutorial/docker-deployment/#step-1-creating-docker-based-project","title":"Step 1: Creating Docker-based Project","text":"<p>Create a project using the <code>fastapi-dockerized</code> template:</p> <pre><code>$ fastkit startdemo fastapi-dockerized\nEnter the project name: dockerized-todo-api\nEnter the author name: Developer Kim\nEnter the author email: developer@example.com\nEnter the project description: Dockerized todo management API\nDeploying FastAPI project using 'fastapi-dockerized' template\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 dockerized-todo-api                         \u2502\n\u2502 Author       \u2502 Developer Kim                               \u2502\n\u2502 Author Email \u2502 developer@example.com                       \u2502\n\u2502 Description  \u2502 Dockerized todo management API              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       Template Dependencies\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 pydantic          \u2502\n\u2502 Dependency 4 \u2502 pydantic-settings \u2502\n\u2502 Dependency 5 \u2502 python-dotenv     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\n\n\u2728 FastAPI project 'dockerized-todo-api' from 'fastapi-dockerized' has been created successfully!\n</code></pre>"},{"location":"tutorial/docker-deployment/#step-2-analyzing-docker-configuration-files","title":"Step 2: Analyzing Docker Configuration Files","text":"<p>Let's examine the Docker-related files in the generated project:</p> <pre><code>dockerized-todo-api/\n\u251c\u2500\u2500 Dockerfile                    # Docker image build configuration\n\u251c\u2500\u2500 docker-compose.yml           # Development environment container setup\n\u251c\u2500\u2500 docker-compose.prod.yml      # Production environment configuration\n\u251c\u2500\u2500 .dockerignore               # Files to exclude during Docker build\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 start.sh                # Container startup script\n\u2502   \u251c\u2500\u2500 prestart.sh             # Pre-start initialization script\n\u2502   \u2514\u2500\u2500 gunicorn.conf.py        # Gunicorn configuration\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.py                 # FastAPI application\n\u2502   \u2514\u2500\u2500 ...                     # Other source code\n\u2514\u2500\u2500 requirements.txt            # Python dependencies\n</code></pre>"},{"location":"tutorial/docker-deployment/#dockerfile-analysis","title":"Dockerfile Analysis","text":"<pre><code># Optimized Dockerfile using multi-stage build\n\n# ============================================\n# Stage 1: Build stage\n# ============================================\nFROM python:3.12-slim as builder\n\n# Install build tools\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    build-essential \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy dependency file and install\nCOPY requirements.txt .\nRUN pip install --user --no-cache-dir -r requirements.txt\n\n# ============================================\n# Stage 2: Runtime stage\n# ============================================\nFROM python:3.12-slim\n\n# System update and essential package installation\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/* \\\n    &amp;&amp; apt-get clean\n\n# Create non-root user (security enhancement)\nRUN groupadd -r appuser &amp;&amp; useradd -r -g appuser appuser\n\n# Create application directory\nWORKDIR /app\n\n# Copy Python packages from build stage\nCOPY --from=builder /root/.local /home/appuser/.local\n\n# Copy application code\nCOPY . .\n\n# Set file permissions\nRUN chown -R appuser:appuser /app\nRUN chmod +x scripts/start.sh scripts/prestart.sh\n\n# Add Python package path to PATH\nENV PATH=/home/appuser/.local/bin:$PATH\n\n# Switch to non-root user\nUSER appuser\n\n# Configure health check\nHEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8000/health || exit 1\n\n# Expose port\nEXPOSE 8000\n\n# Execute startup script\nCMD [\"./scripts/start.sh\"]\n</code></pre>"},{"location":"tutorial/docker-deployment/#docker-compose-development-environment-docker-composeyml","title":"Docker Compose development environment (<code>docker-compose.yml</code>)","text":"<pre><code>version: '3.8'\n\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: dockerized-todo-api\n    restart: unless-stopped\n    ports:\n      - \"8000:8000\"\n    environment:\n      - ENVIRONMENT=development\n      - DEBUG=true\n      - RELOAD=true\n    volumes:\n      # Mount volume for development (auto-reload on code changes)\n      - ./src:/app/src:ro\n      - ./scripts:/app/scripts:ro\n    networks:\n      - app-network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n\n  # Redis (for caching and session store)\n  redis:\n    image: redis:7-alpine\n    container_name: dockerized-todo-redis\n    restart: unless-stopped\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    networks:\n      - app-network\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  # Nginx (reverse proxy)\n  nginx:\n    image: nginx:alpine\n    container_name: dockerized-todo-nginx\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./nginx/ssl:/etc/nginx/ssl:ro\n    depends_on:\n      - app\n    networks:\n      - app-network\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"--quiet\", \"--tries=1\", \"--spider\", \"http://localhost/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nvolumes:\n  redis_data:\n\nnetworks:\n  app-network:\n    driver: bridge\n</code></pre>"},{"location":"tutorial/docker-deployment/#docker-compose-production-environment-docker-composeprodyml","title":"Docker Compose production environment (<code>docker-compose.prod.yml</code>)","text":"<pre><code>version: '3.8'\n\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    restart: always\n    environment:\n      - ENVIRONMENT=production\n      - DEBUG=false\n      - WORKERS=4\n      - MAX_WORKERS=8\n    volumes:\n      - app_logs:/app/logs\n    networks:\n      - app-network\n    deploy:\n      replicas: 2\n      resources:\n        limits:\n          cpus: '1.0'\n          memory: 1G\n        reservations:\n          cpus: '0.5'\n          memory: 512M\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n\n  redis:\n    image: redis:7-alpine\n    restart: always\n    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}\n    volumes:\n      - redis_data:/data\n    networks:\n      - app-network\n    deploy:\n      resources:\n        limits:\n          cpus: '0.5'\n          memory: 512M\n\n  nginx:\n    image: nginx:alpine\n    restart: always\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro\n      - ./nginx/ssl:/etc/nginx/ssl:ro\n      - nginx_logs:/var/log/nginx\n    depends_on:\n      - app\n    networks:\n      - app-network\n    deploy:\n      resources:\n        limits:\n          cpus: '0.5'\n          memory: 256M\n\nvolumes:\n  redis_data:\n  app_logs:\n  nginx_logs:\n\nnetworks:\n  app-network:\n    driver: overlay\n    attachable: true\n</code></pre>"},{"location":"tutorial/docker-deployment/#step-3-configure-startup-scripts","title":"Step 3: Configure startup scripts","text":""},{"location":"tutorial/docker-deployment/#main-startup-script-scriptsstartsh","title":"Main startup script (<code>scripts/start.sh</code>)","text":"<pre><code>#!/bin/bash\n\nset -e\n\n# Set environment variables\nexport PYTHONPATH=/app:$PYTHONPATH\n\n# Run pre-start script\necho \"Running pre-start script...\"\n./scripts/prestart.sh\n\n# Determine execution mode based on environment\nif [[ \"$ENVIRONMENT\" == \"production\" ]]; then\n    echo \"Starting production server with Gunicorn...\"\n    exec gunicorn src.main:app \\\n        --config scripts/gunicorn.conf.py \\\n        --bind 0.0.0.0:8000 \\\n        --workers ${WORKERS:-4} \\\n        --worker-class uvicorn.workers.UvicornWorker \\\n        --max-requests 1000 \\\n        --max-requests-jitter 100 \\\n        --preload \\\n        --access-logfile - \\\n        --error-logfile -\nelse\n    echo \"Starting development server with Uvicorn...\"\n    if [[ \"$RELOAD\" == \"true\" ]]; then\n        exec uvicorn src.main:app \\\n            --host 0.0.0.0 \\\n            --port 8000 \\\n            --reload \\\n            --reload-dir src \\\n            --log-level debug\n    else\n        exec uvicorn src.main:app \\\n            --host 0.0.0.0 \\\n            --port 8000 \\\n            --log-level info\n    fi\nfi\n</code></pre>"},{"location":"tutorial/docker-deployment/#pre-start-script-scriptsprestartsh","title":"Pre-start script (<code>scripts/prestart.sh</code>)","text":"<pre><code>#!/bin/bash\n\nset -e\n\necho \"Running pre-start checks...\"\n\n# Check Python modules and dependencies\necho \"Checking Python dependencies...\"\npython -c \"import fastapi, uvicorn, pydantic; print('\u2713 Core dependencies OK')\"\n\n# Check environment variables\nif [[ -z \"$ENVIRONMENT\" ]]; then\n    export ENVIRONMENT=\"development\"\n    echo \"\u2139 ENVIRONMENT not set, defaulting to development\"\nfi\n\n# Create log directory\nmkdir -p /app/logs\ntouch /app/logs/app.log\n\n# Check if health endpoint is present\necho \"Checking health endpoint...\"\npython -c \"\nfrom src.main import app\nroutes = [route.path for route in app.routes]\nif '/health' not in routes:\n    print('\u26a0 Warning: /health endpoint not found')\nelse:\n    print('\u2713 Health endpoint OK')\n\"\n\necho \"Pre-start checks completed successfully!\"\n</code></pre>"},{"location":"tutorial/docker-deployment/#gunicorn-configuration-scriptsgunicornconfpy","title":"Gunicorn configuration (<code>scripts/gunicorn.conf.py</code>)","text":"<pre><code>import multiprocessing\nimport os\n\n# Server socket\nbind = \"0.0.0.0:8000\"\nbacklog = 2048\n\n# Worker process\nworkers = int(os.getenv(\"WORKERS\", multiprocessing.cpu_count() * 2 + 1))\nworker_class = \"uvicorn.workers.UvicornWorker\"\nworker_connections = 1000\nmax_requests = 1000\nmax_requests_jitter = 100\n\n# Worker restart settings\npreload_app = True\ntimeout = 120\nkeepalive = 2\n\n# Logging\naccesslog = \"-\"\nerrorlog = \"-\"\nloglevel = \"info\"\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\" %(D)s'\n\n# Process name\nproc_name = \"dockerized-todo-api\"\n\n# Security\nlimit_request_line = 4094\nlimit_request_fields = 100\nlimit_request_field_size = 8190\n\n# Performance tuning\ndef when_ready(server):\n    server.log.info(\"Server is ready. Spawning workers\")\n\ndef worker_int(worker):\n    worker.log.info(\"worker received INT or QUIT signal\")\n\ndef pre_fork(server, worker):\n    server.log.info(\"Worker spawned (pid: %s)\", worker.pid)\n\ndef post_fork(server, worker):\n    server.log.info(\"Worker spawned (pid: %s)\", worker.pid)\n\ndef worker_abort(worker):\n    worker.log.info(\"worker received SIGABRT signal\")\n</code></pre>"},{"location":"tutorial/docker-deployment/#step-4-implement-health-check-and-monitoring","title":"Step 4: Implement health check and monitoring","text":""},{"location":"tutorial/docker-deployment/#add-health-check-endpoint-srcmainpy","title":"Add health check endpoint (<code>src/main.py</code>)","text":"<pre><code>from fastapi import FastAPI, status, Depends\nfrom fastapi.responses import JSONResponse\nimport psutil\nimport time\nfrom datetime import datetime\n\napp = FastAPI(\n    title=\"Dockerized Todo API\",\n    description=\"Dockerized todo management API\",\n    version=\"1.0.0\"\n)\n\n# Application start time\nstart_time = time.time()\n\n@app.get(\"/health\", status_code=status.HTTP_200_OK)\nasync def health_check():\n    \"\"\"\n    Container health check endpoint\n    \"\"\"\n    current_time = time.time()\n    uptime = current_time - start_time\n\n    # System resource information\n    memory_info = psutil.virtual_memory()\n    cpu_percent = psutil.cpu_percent(interval=1)\n\n    health_data = {\n        \"status\": \"healthy\",\n        \"timestamp\": datetime.utcnow().isoformat(),\n        \"uptime_seconds\": round(uptime, 2),\n        \"version\": app.version,\n        \"system\": {\n            \"memory_usage_percent\": memory_info.percent,\n            \"memory_available_mb\": round(memory_info.available / 1024 / 1024, 2),\n            \"cpu_usage_percent\": cpu_percent,\n        },\n        \"checks\": {\n            \"database\": await check_database_connection(),\n            \"redis\": await check_redis_connection(),\n            \"disk_space\": check_disk_space(),\n        }\n    }\n\n    # Check if all checks passed\n    all_checks_passed = all(health_data[\"checks\"].values())\n\n    if not all_checks_passed:\n        return JSONResponse(\n            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,\n            content=health_data\n        )\n\n    return health_data\n\nasync def check_database_connection() -&gt; bool:\n    \"\"\"Check database connection status\"\"\"\n    try:\n        # In actual implementation, test database connection\n        return True\n    except Exception:\n        return False\n\nasync def check_redis_connection() -&gt; bool:\n    \"\"\"Check Redis connection status\"\"\"\n    try:\n        # In actual implementation, test Redis connection\n        return True\n    except Exception:\n        return False\n\ndef check_disk_space() -&gt; bool:\n    \"\"\"Check disk space\"\"\"\n    disk_usage = psutil.disk_usage('/')\n    free_percentage = (disk_usage.free / disk_usage.total) * 100\n    return free_percentage &gt; 10  # 10% or more free space needed\n\n@app.get(\"/health/ready\", status_code=status.HTTP_200_OK)\nasync def readiness_check():\n    \"\"\"\n    Kubernetes readiness probe endpoint\n    \"\"\"\n    # Check if application is ready to receive traffic\n    return {\"status\": \"ready\", \"timestamp\": datetime.utcnow().isoformat()}\n\n@app.get(\"/health/live\", status_code=status.HTTP_200_OK)\nasync def liveness_check():\n    \"\"\"\n    Kubernetes liveness probe endpoint\n    \"\"\"\n    return {\"status\": \"alive\", \"timestamp\": datetime.utcnow().isoformat()}\n</code></pre>"},{"location":"tutorial/docker-deployment/#step-5-configure-nginx-reverse-proxy","title":"Step 5: Configure Nginx reverse proxy","text":""},{"location":"tutorial/docker-deployment/#development-environment-nginx-configuration-nginxnginxconf","title":"Development environment Nginx configuration (<code>nginx/nginx.conf</code>)","text":"<pre><code>events {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream fastapi_backend {\n        # Specify backend by container name\n        server app:8000;\n    }\n\n    # Define log format\n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                    '$status $body_bytes_sent \"$http_referer\" '\n                    '\"$http_user_agent\" \"$http_x_forwarded_for\" '\n                    'rt=$request_time uct=\"$upstream_connect_time\" '\n                    'uht=\"$upstream_header_time\" urt=\"$upstream_response_time\"';\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log warn;\n\n    # Default settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    client_max_body_size 100M;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_types text/plain text/css text/xml text/javascript\n               application/json application/javascript application/xml+rss\n               application/atom+xml image/svg+xml;\n\n    server {\n        listen 80;\n        server_name localhost;\n\n        # Security headers\n        add_header X-Content-Type-Options nosniff;\n        add_header X-Frame-Options DENY;\n        add_header X-XSS-Protection \"1; mode=block\";\n\n        # Health check endpoint\n        location /health {\n            proxy_pass http://fastapi_backend;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n\n            # Health check should respond quickly\n            proxy_connect_timeout 5s;\n            proxy_send_timeout 5s;\n            proxy_read_timeout 5s;\n        }\n\n        # API endpoint\n        location / {\n            proxy_pass http://fastapi_backend;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n\n            # Timeout settings\n            proxy_connect_timeout 30s;\n            proxy_send_timeout 30s;\n            proxy_read_timeout 30s;\n\n            # Buffering settings\n            proxy_buffering on;\n            proxy_buffer_size 4k;\n            proxy_buffers 8 4k;\n        }\n\n        # Static file caching (future use)\n        location /static {\n            expires 1y;\n            add_header Cache-Control public;\n            add_header ETag \"\";\n        }\n    }\n}\n</code></pre>"},{"location":"tutorial/docker-deployment/#production-nginx-configuration-nginxnginxprodconf","title":"Production Nginx configuration (<code>nginx/nginx.prod.conf</code>)","text":"<pre><code>events {\n    worker_connections 2048;\n}\n\nhttp {\n    upstream fastapi_backend {\n        # Load balancing for multiple app instances\n        server app:8000 max_fails=3 fail_timeout=30s;\n        # server app2:8000 max_fails=3 fail_timeout=30s;  # For scaling\n\n        # Keep-alive\n        keepalive 32;\n    }\n\n    # Security settings\n    server_tokens off;\n\n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n    limit_req_zone $binary_remote_addr zone=health:10m rate=100r/s;\n\n    # SSL settings\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    server {\n        listen 80;\n        server_name your-domain.com;\n        return 301 https://$server_name$request_uri;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name your-domain.com;\n\n        ssl_certificate /etc/nginx/ssl/cert.pem;\n        ssl_certificate_key /etc/nginx/ssl/key.pem;\n\n        # Security headers\n        add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n        add_header X-Content-Type-Options nosniff always;\n        add_header X-Frame-Options DENY always;\n        add_header X-XSS-Protection \"1; mode=block\" always;\n        add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n\n        # Health check (rate limit applied)\n        location /health {\n            limit_req zone=health burst=20 nodelay;\n            proxy_pass http://fastapi_backend;\n            include /etc/nginx/proxy_params;\n        }\n\n        # API endpoint (rate limit applied)\n        location / {\n            limit_req zone=api burst=20 nodelay;\n            proxy_pass http://fastapi_backend;\n            include /etc/nginx/proxy_params;\n        }\n    }\n}\n</code></pre>"},{"location":"tutorial/docker-deployment/#step-6-build-and-run-containers","title":"Step 6: Build and run containers","text":""},{"location":"tutorial/docker-deployment/#run-in-development-environment","title":"Run in development environment","text":"<pre><code>$ cd dockerized-todo-api\n\n# Build Docker image\n$ docker-compose build\nBuilding app\nStep 1/15 : FROM python:3.12-slim as builder\n ---&gt; abc123def456\nStep 2/15 : RUN apt-get update &amp;&amp; apt-get install -y build-essential curl\n ---&gt; Running in xyz789abc123\n...\nSuccessfully built def456ghi789\nSuccessfully tagged dockerized-todo-api_app:latest\n\n# Run container (background)\n$ docker-compose up -d\nCreating network \"dockerized-todo-api_app-network\" with driver \"bridge\"\nCreating volume \"dockerized-todo-api_redis_data\" with default driver\nCreating dockerized-todo-redis ... done\nCreating dockerized-todo-api   ... done\nCreating dockerized-todo-nginx ... done\n\n# Check container status\n$ docker-compose ps\n        Name                      Command               State                    Ports\n------------------------------------------------------------------------------------------------\ndockerized-todo-api    ./scripts/start.sh               Up (healthy)   8000/tcp\ndockerized-todo-nginx  /docker-entrypoint.sh ngin ...   Up             0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp\ndockerized-todo-redis  docker-entrypoint.sh redis ...   Up (healthy)   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp\n</code></pre>"},{"location":"tutorial/docker-deployment/#check-logs","title":"Check logs","text":"<pre><code># Check all service logs\n$ docker-compose logs\n\n# Check specific service logs\n$ docker-compose logs app\n$ docker-compose logs nginx\n$ docker-compose logs redis\n\n# Check real-time logs\n$ docker-compose logs -f app\n</code></pre>"},{"location":"tutorial/docker-deployment/#health-check-test","title":"Health check test","text":"<pre><code># Basic health check\n$ curl http://localhost/health\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T12:00:00.123456\",\n  \"uptime_seconds\": 45.67,\n  \"version\": \"1.0.0\",\n  \"system\": {\n    \"memory_usage_percent\": 25.3,\n    \"memory_available_mb\": 3072.45,\n    \"cpu_usage_percent\": 5.2\n  },\n  \"checks\": {\n    \"database\": true,\n    \"redis\": true,\n    \"disk_space\": true\n  }\n}\n\n# Kubernetes probe test\n$ curl http://localhost/health/ready\n$ curl http://localhost/health/live\n</code></pre>"},{"location":"tutorial/docker-deployment/#step-7-production-deployment","title":"Step 7: Production deployment","text":""},{"location":"tutorial/docker-deployment/#set-environment-variables-envprod","title":"Set environment variables (<code>.env.prod</code>)","text":"<pre><code># Application settings\nENVIRONMENT=production\nDEBUG=false\nSECRET_KEY=your-super-secret-key-here\nWORKERS=4\n\n# Database settings\nDATABASE_URL=postgresql://user:password@db:5432/todoapp\nREDIS_URL=redis://:password@redis:6379/0\nREDIS_PASSWORD=your-redis-password\n\n# Logging settings\nLOG_LEVEL=info\nLOG_FILE=/app/logs/app.log\n\n# Security settings\nALLOWED_HOSTS=[\"your-domain.com\"]\nCORS_ORIGINS=[\"https://your-frontend.com\"]\n\n# Monitoring\nSENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id\n</code></pre>"},{"location":"tutorial/docker-deployment/#production-deployment-command","title":"Production deployment command","text":"<pre><code># Deploy in production environment\n$ docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d\n\n# Scaling (app instance scaling)\n$ docker-compose -f docker-compose.prod.yml up -d --scale app=3\n\n# Rolling update\n$ docker-compose -f docker-compose.prod.yml build app\n$ docker-compose -f docker-compose.prod.yml up -d --no-deps app\n\n# Safe shutdown before backup\n$ docker-compose -f docker-compose.prod.yml down --timeout 30\n</code></pre>"},{"location":"tutorial/docker-deployment/#step-8-monitoring-and-logging","title":"Step 8: Monitoring and logging","text":""},{"location":"tutorial/docker-deployment/#docker-container-resource-monitoring","title":"Docker container resource monitoring","text":"<pre><code># Check real-time resource usage\n$ docker stats\n\nCONTAINER ID   NAME                    CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDS\nabc123def456   dockerized-todo-api     2.34%     128.5MiB / 1GiB       12.55%    1.23MB / 456kB    12.3MB / 4.56MB   15\ndef456ghi789   dockerized-todo-nginx   0.12%     12.5MiB / 256MiB      4.88%     456kB / 1.23MB    1.23MB / 456kB    3\nghi789jkl012   dockerized-todo-redis   1.45%     32.1MiB / 512MiB      6.27%     789kB / 2.34MB    4.56MB / 1.23MB   4\n\n# Check specific container details\n$ docker inspect dockerized-todo-api\n\n# Check container internal processes\n$ docker-compose exec app ps aux\n</code></pre>"},{"location":"tutorial/docker-deployment/#log-aggregation-and-analysis","title":"Log aggregation and analysis","text":"<pre><code># docker-compose.logging.yml\nversion: '3.8'\n\nservices:\n  # ELK Stack for log aggregation\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0\n    environment:\n      - discovery.type=single-node\n      - xpack.security.enabled=false\n    volumes:\n      - elasticsearch_data:/usr/share/elasticsearch/data\n    networks:\n      - logging\n\n  logstash:\n    image: docker.elastic.co/logstash/logstash:8.6.0\n    volumes:\n      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro\n      - ./logstash/config:/usr/share/logstash/config:ro\n    networks:\n      - logging\n    depends_on:\n      - elasticsearch\n\n  kibana:\n    image: docker.elastic.co/kibana/kibana:8.6.0\n    ports:\n      - \"5601:5601\"\n    environment:\n      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200\n    networks:\n      - logging\n    depends_on:\n      - elasticsearch\n\n  # Fluentd for log collection\n  fluentd:\n    image: fluent/fluentd:v1.16-debian-1\n    volumes:\n      - ./fluentd/conf:/fluentd/etc:ro\n      - /var/log:/var/log:ro\n    networks:\n      - logging\n    depends_on:\n      - elasticsearch\n\nvolumes:\n  elasticsearch_data:\n\nnetworks:\n  logging:\n    driver: bridge\n</code></pre>"},{"location":"tutorial/docker-deployment/#prometheus-metric-collection","title":"Prometheus metric collection","text":"<pre><code># src/monitoring.py\nfrom prometheus_client import Counter, Histogram, Gauge, generate_latest\nfrom fastapi import Request, Response\nimport time\n\n# Define metrics\nREQUEST_COUNT = Counter(\n    'http_requests_total',\n    'Total HTTP requests',\n    ['method', 'endpoint', 'status_code']\n)\n\nREQUEST_DURATION = Histogram(\n    'http_request_duration_seconds',\n    'HTTP request duration in seconds',\n    ['method', 'endpoint']\n)\n\nACTIVE_CONNECTIONS = Gauge(\n    'active_connections',\n    'Number of active connections'\n)\n\nasync def metrics_middleware(request: Request, call_next):\n    \"\"\"Prometheus metric collection middleware\"\"\"\n    start_time = time.time()\n    method = request.method\n    endpoint = request.url.path\n\n    ACTIVE_CONNECTIONS.inc()\n\n    try:\n        response = await call_next(request)\n        status_code = response.status_code\n    except Exception as e:\n        status_code = 500\n        raise\n    finally:\n        duration = time.time() - start_time\n        REQUEST_DURATION.labels(method=method, endpoint=endpoint).observe(duration)\n        REQUEST_COUNT.labels(method=method, endpoint=endpoint, status_code=status_code).inc()\n        ACTIVE_CONNECTIONS.dec()\n\n    return response\n\n@app.get(\"/metrics\")\nasync def get_metrics():\n    \"\"\"Prometheus metric endpoint\"\"\"\n    return Response(generate_latest(), media_type=\"text/plain\")\n</code></pre>"},{"location":"tutorial/docker-deployment/#step-9-build-cicd-pipeline","title":"Step 9: Build CI/CD pipeline","text":""},{"location":"tutorial/docker-deployment/#github-actions-workflow-githubworkflowsdeployyml","title":"GitHub Actions workflow (<code>.github/workflows/deploy.yml</code>)","text":"<pre><code>name: Deploy to Production\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.12'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n          pip install pytest pytest-asyncio httpx\n\n      - name: Run tests\n        run: |\n          pytest tests/ -v --cov=src --cov-report=xml\n\n      - name: Upload coverage reports\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage.xml\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main'\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Log in to Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=sha\n            type=raw,value=latest\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          file: ./Dockerfile\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main'\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Deploy to production\n        uses: appleboy/ssh-action@v1.0.0\n        with:\n          host: ${{ secrets.PROD_HOST }}\n          username: ${{ secrets.PROD_USERNAME }}\n          key: ${{ secrets.PROD_SSH_KEY }}\n          script: |\n            cd /opt/dockerized-todo-api\n\n            # Pull new image\n            docker-compose -f docker-compose.prod.yml pull\n\n            # Rolling update\n            docker-compose -f docker-compose.prod.yml up -d --no-deps app\n\n            # Health check\n            sleep 30\n            curl -f http://localhost/health || exit 1\n\n            # Clean up previous image\n            docker image prune -f\n</code></pre>"},{"location":"tutorial/docker-deployment/#step-10-enhance-security","title":"Step 10: Enhance security","text":""},{"location":"tutorial/docker-deployment/#container-security-settings","title":"Container security settings","text":"<pre><code># Add security enhancement to Dockerfile\n\n# Run as non-root user\nUSER appuser\n\n# Read-only root filesystem\n# docker run --read-only --tmpfs /tmp dockerized-todo-api\n\n# Limit permissions\n# docker run --cap-drop=ALL dockerized-todo-api\n\n# Network isolation\n# docker run --network=none dockerized-todo-api\n</code></pre>"},{"location":"tutorial/docker-deployment/#docker-compose-security-settings","title":"Docker Compose security settings","text":"<pre><code># Add security settings to docker-compose.yml\nservices:\n  app:\n    # ... existing settings ...\n    security_opt:\n      - no-new-privileges:true\n    cap_drop:\n      - ALL\n    cap_add:\n      - NET_BIND_SERVICE\n    read_only: true\n    tmpfs:\n      - /tmp\n      - /app/logs\n    user: \"1000:1000\"\n</code></pre>"},{"location":"tutorial/docker-deployment/#secrets-management","title":"Secrets management","text":"<pre><code># Add secrets settings to docker-compose.yml\nversion: '3.8'\n\nservices:\n  app:\n    secrets:\n      - db_password\n      - api_key\n    environment:\n      - DB_PASSWORD_FILE=/run/secrets/db_password\n      - API_KEY_FILE=/run/secrets/api_key\n\nsecrets:\n  db_password:\n    file: ./secrets/db_password.txt\n  api_key:\n    external: true\n</code></pre>"},{"location":"tutorial/docker-deployment/#next-steps","title":"Next Steps","text":"<p>You've completed Docker containerization! Next things to try:</p> <ol> <li>Custom Response Handling - Implementing advanced API response formats</li> </ol>"},{"location":"tutorial/docker-deployment/#summary","title":"Summary","text":"<p>In this tutorial, we used Docker to:</p> <ul> <li>\u2705 Create optimized container images with multi-stage builds</li> <li>\u2705 Set up development/production environments with Docker Compose</li> <li>\u2705 Configure Nginx reverse proxy and load balancing</li> <li>\u2705 Build health check and monitoring systems</li> <li>\u2705 Implement automated deployment through CI/CD pipelines</li> <li>\u2705 Set up production-level security configurations</li> <li>\u2705 Implement logging and metrics collection systems</li> </ul> <p>Now you can safely and efficiently deploy FastAPI applications to production environments!</p>"},{"location":"tutorial/first-project/","title":"Your First Project","text":"<p>Build a complete blog API with user management, post creation, and comment system using FastAPI-fastkit.</p>"},{"location":"tutorial/first-project/#project-overview","title":"Project Overview","text":"<p>In this tutorial, we'll create a Blog API with the following features:</p> <ul> <li>User Management: Registration, authentication, and user profiles</li> <li>Post Management: Create, read, update, and delete blog posts</li> <li>Comment System: Add comments to blog posts</li> <li>Data Validation: Robust input validation and error handling</li> <li>API Documentation: Automatic OpenAPI documentation</li> <li>Testing: Complete test suite</li> </ul>"},{"location":"tutorial/first-project/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this tutorial, you'll understand:</p> <ul> <li>Advanced FastAPI-fastkit project structure</li> <li>Database integration with SQLAlchemy</li> <li>User authentication and authorization</li> <li>Complex data relationships</li> <li>Error handling and validation</li> <li>Testing best practices</li> </ul>"},{"location":"tutorial/first-project/#prerequisites","title":"Prerequisites","text":"<p>Before starting, make sure you have:</p> <ul> <li>Completed the Getting Started tutorial</li> <li>Basic understanding of REST APIs</li> <li>Python 3.12+ installed</li> <li>Text editor or IDE ready</li> </ul>"},{"location":"tutorial/first-project/#step-1-create-the-project","title":"Step 1: Create the Project","text":"<p>Let's start by creating a new project with the STANDARD stack for database support:</p> <pre><code>$ fastkit init\nEnter the project name: blog-api\nEnter the author name: Your Name\nEnter the author email: your.email@example.com\nEnter the project description: A complete blog API with users, posts, and comments\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 blog-api                                \u2502\n\u2502 Author       \u2502 Your Name                               \u2502\n\u2502 Author Email \u2502 your.email@example.com                  \u2502\n\u2502 Description  \u2502 A complete blog API with users, posts,  \u2502\n\u2502              \u2502 and comments                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nAvailable Stacks and Dependencies:\n           MINIMAL Stack\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 pydantic          \u2502\n\u2502 Dependency 4 \u2502 pydantic-settings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n           STANDARD Stack\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 sqlalchemy        \u2502\n\u2502 Dependency 4 \u2502 alembic           \u2502\n\u2502 Dependency 5 \u2502 pytest            \u2502\n\u2502 Dependency 6 \u2502 pydantic          \u2502\n\u2502 Dependency 7 \u2502 pydantic-settings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect stack (minimal, standard, full): standard\n\nAvailable Package Managers:\n                   Package Managers\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PIP    \u2502 Standard Python package manager            \u2502\n\u2502 UV     \u2502 Fast Python package manager                \u2502\n\u2502 PDM    \u2502 Modern Python dependency management        \u2502\n\u2502 POETRY \u2502 Python dependency management and packaging \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\n\n\u2728 FastAPI project 'blog-api' has been created successfully!\n</code></pre>"},{"location":"tutorial/first-project/#step-2-set-up-the-project","title":"Step 2: Set Up the Project","text":"<p>Navigate to the project and activate the virtual environment:</p> <pre><code>$ cd blog-api\n$ source .venv/bin/activate\n</code></pre>"},{"location":"tutorial/first-project/#step-3-add-required-routes","title":"Step 3: Add Required Routes","text":"<p>Let's add the main resources for our blog API:</p> <pre><code>$ fastkit addroute blog-api users\n\u2728 Successfully added new route 'users' to project 'blog-api'\n\n$ fastkit addroute blog-api posts\n\u2728 Successfully added new route 'posts' to project 'blog-api'\n\n$ fastkit addroute blog-api comments\n\u2728 Successfully added new route 'comments' to project 'blog-api'\n</code></pre>"},{"location":"tutorial/first-project/#step-4-design-the-data-models","title":"Step 4: Design the Data Models","text":"<p>Let's design our data schemas. We'll start by updating the user schema to be more realistic.</p>"},{"location":"tutorial/first-project/#update-user-schema","title":"Update User Schema","text":"<p>Edit <code>src/schemas/users.py</code>:</p> <pre><code>from typing import Optional, List\nfrom datetime import datetime\nfrom pydantic import BaseModel, EmailStr, Field\n\nclass UserBase(BaseModel):\n    email: EmailStr\n    username: str = Field(..., min_length=3, max_length=50)\n    full_name: Optional[str] = None\n    bio: Optional[str] = Field(None, max_length=500)\n    is_active: bool = True\n\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8)\n\nclass UserUpdate(BaseModel):\n    email: Optional[EmailStr] = None\n    username: Optional[str] = Field(None, min_length=3, max_length=50)\n    full_name: Optional[str] = None\n    bio: Optional[str] = Field(None, max_length=500)\n    is_active: Optional[bool] = None\n\nclass User(UserBase):\n    id: int\n    created_at: datetime\n    posts_count: int = 0\n\n    class Config:\n        from_attributes = True\n\nclass UserInDB(User):\n    hashed_password: str\n</code></pre>"},{"location":"tutorial/first-project/#create-post-schema","title":"Create Post Schema","text":"<p>Edit <code>src/schemas/posts.py</code>:</p> <pre><code>from typing import Optional, List\nfrom datetime import datetime\nfrom pydantic import BaseModel, Field\n\nclass PostBase(BaseModel):\n    title: str = Field(..., min_length=1, max_length=200)\n    content: str = Field(..., min_length=1)\n    published: bool = True\n\nclass PostCreate(PostBase):\n    pass\n\nclass PostUpdate(BaseModel):\n    title: Optional[str] = Field(None, min_length=1, max_length=200)\n    content: Optional[str] = Field(None, min_length=1)\n    published: Optional[bool] = None\n\nclass Post(PostBase):\n    id: int\n    author_id: int\n    created_at: datetime\n    updated_at: datetime\n    comments_count: int = 0\n\n    class Config:\n        from_attributes = True\n\nclass PostWithAuthor(Post):\n    author: \"User\"\n\nclass PostWithComments(Post):\n    comments: List[\"Comment\"] = []\n\n# Import to avoid circular imports\nfrom src.schemas.users import User\nfrom src.schemas.comments import Comment\nPostWithAuthor.model_rebuild()\nPostWithComments.model_rebuild()\n</code></pre>"},{"location":"tutorial/first-project/#create-comment-schema","title":"Create Comment Schema","text":"<p>Edit <code>src/schemas/comments.py</code>:</p> <pre><code>from typing import Optional\nfrom datetime import datetime\nfrom pydantic import BaseModel, Field\n\nclass CommentBase(BaseModel):\n    content: str = Field(..., min_length=1, max_length=1000)\n\nclass CommentCreate(CommentBase):\n    post_id: int\n\nclass CommentUpdate(BaseModel):\n    content: Optional[str] = Field(None, min_length=1, max_length=1000)\n\nclass Comment(CommentBase):\n    id: int\n    post_id: int\n    author_id: int\n    created_at: datetime\n    updated_at: datetime\n\n    class Config:\n        from_attributes = True\n\nclass CommentWithAuthor(Comment):\n    author: \"User\"\n\n# Import to avoid circular imports\nfrom src.schemas.users import User\nCommentWithAuthor.model_rebuild()\n</code></pre>"},{"location":"tutorial/first-project/#step-5-implement-advanced-crud-operations","title":"Step 5: Implement Advanced CRUD Operations","text":""},{"location":"tutorial/first-project/#enhanced-user-crud","title":"Enhanced User CRUD","text":"<p>Update <code>src/crud/users.py</code>:</p> <pre><code>from typing import List, Optional\nfrom datetime import datetime\nimport hashlib\nfrom src.schemas.users import UserCreate, UserUpdate, UserInDB\n\nclass UsersCRUD:\n    def __init__(self):\n        self._users: List[UserInDB] = []\n        self._next_id = 1\n\n    def _hash_password(self, password: str) -&gt; str:\n        \"\"\"Simple password hashing (use bcrypt in production)\"\"\"\n        return hashlib.sha256(password.encode()).hexdigest()\n\n    def _verify_password(self, plain_password: str, hashed_password: str) -&gt; bool:\n        \"\"\"Verify password against hash\"\"\"\n        return self._hash_password(plain_password) == hashed_password\n\n    def get_all(self) -&gt; List[UserInDB]:\n        \"\"\"Get all users\"\"\"\n        return [user for user in self._users if user.is_active]\n\n    def get_by_id(self, user_id: int) -&gt; Optional[UserInDB]:\n        \"\"\"Get user by ID\"\"\"\n        return next((user for user in self._users if user.id == user_id), None)\n\n    def get_by_email(self, email: str) -&gt; Optional[UserInDB]:\n        \"\"\"Get user by email\"\"\"\n        return next((user for user in self._users if user.email == email), None)\n\n    def get_by_username(self, username: str) -&gt; Optional[UserInDB]:\n        \"\"\"Get user by username\"\"\"\n        return next((user for user in self._users if user.username == username), None)\n\n    def create(self, user: UserCreate) -&gt; UserInDB:\n        \"\"\"Create a new user with validation\"\"\"\n        # Check for duplicates\n        if self.get_by_email(user.email):\n            raise ValueError(\"Email already registered\")\n        if self.get_by_username(user.username):\n            raise ValueError(\"Username already taken\")\n\n        new_user = UserInDB(\n            id=self._next_id,\n            email=user.email,\n            username=user.username,\n            full_name=user.full_name,\n            bio=user.bio,\n            is_active=user.is_active,\n            created_at=datetime.now(),\n            posts_count=0,\n            hashed_password=self._hash_password(user.password)\n        )\n        self._next_id += 1\n        self._users.append(new_user)\n        return new_user\n\n    def update(self, user_id: int, user_update: UserUpdate) -&gt; Optional[UserInDB]:\n        \"\"\"Update an existing user\"\"\"\n        user = self.get_by_id(user_id)\n        if not user:\n            return None\n\n        # Check for duplicates on email/username changes\n        update_data = user_update.dict(exclude_unset=True)\n        if \"email\" in update_data and update_data[\"email\"] != user.email:\n            if self.get_by_email(update_data[\"email\"]):\n                raise ValueError(\"Email already registered\")\n\n        if \"username\" in update_data and update_data[\"username\"] != user.username:\n            if self.get_by_username(update_data[\"username\"]):\n                raise ValueError(\"Username already taken\")\n\n        for field, value in update_data.items():\n            setattr(user, field, value)\n\n        return user\n\n    def delete(self, user_id: int) -&gt; bool:\n        \"\"\"Soft delete user (deactivate)\"\"\"\n        user = self.get_by_id(user_id)\n        if user:\n            user.is_active = False\n            return True\n        return False\n\n    def authenticate(self, email: str, password: str) -&gt; Optional[UserInDB]:\n        \"\"\"Authenticate user by email and password\"\"\"\n        user = self.get_by_email(email)\n        if user and self._verify_password(password, user.hashed_password):\n            return user\n        return None\n\nusers_crud = UsersCRUD()\n</code></pre>"},{"location":"tutorial/first-project/#posts-crud","title":"Posts CRUD","text":"<p>Update <code>src/crud/posts.py</code>:</p> <pre><code>from typing import List, Optional\nfrom datetime import datetime\nfrom src.schemas.posts import PostCreate, PostUpdate, Post\n\nclass PostsCRUD:\n    def __init__(self):\n        self._posts: List[Post] = []\n        self._next_id = 1\n\n    def get_all(self, skip: int = 0, limit: int = 100, published_only: bool = True) -&gt; List[Post]:\n        \"\"\"Get all posts with pagination\"\"\"\n        posts = self._posts\n        if published_only:\n            posts = [post for post in posts if post.published]\n        return posts[skip:skip + limit]\n\n    def get_by_id(self, post_id: int) -&gt; Optional[Post]:\n        \"\"\"Get post by ID\"\"\"\n        return next((post for post in self._posts if post.id == post_id), None)\n\n    def get_by_author(self, author_id: int, skip: int = 0, limit: int = 100) -&gt; List[Post]:\n        \"\"\"Get posts by author\"\"\"\n        author_posts = [post for post in self._posts if post.author_id == author_id]\n        return author_posts[skip:skip + limit]\n\n    def create(self, post: PostCreate, author_id: int) -&gt; Post:\n        \"\"\"Create a new post\"\"\"\n        now = datetime.now()\n        new_post = Post(\n            id=self._next_id,\n            title=post.title,\n            content=post.content,\n            published=post.published,\n            author_id=author_id,\n            created_at=now,\n            updated_at=now,\n            comments_count=0\n        )\n        self._next_id += 1\n        self._posts.append(new_post)\n\n        # Update author's post count\n        from src.crud.users import users_crud\n        author = users_crud.get_by_id(author_id)\n        if author:\n            author.posts_count += 1\n\n        return new_post\n\n    def update(self, post_id: int, post_update: PostUpdate, author_id: int) -&gt; Optional[Post]:\n        \"\"\"Update an existing post\"\"\"\n        post = self.get_by_id(post_id)\n        if not post or post.author_id != author_id:\n            return None\n\n        update_data = post_update.dict(exclude_unset=True)\n        for field, value in update_data.items():\n            setattr(post, field, value)\n\n        post.updated_at = datetime.now()\n        return post\n\n    def delete(self, post_id: int, author_id: int) -&gt; bool:\n        \"\"\"Delete a post\"\"\"\n        post = self.get_by_id(post_id)\n        if post and post.author_id == author_id:\n            self._posts.remove(post)\n\n            # Update author's post count\n            from src.crud.users import users_crud\n            author = users_crud.get_by_id(author_id)\n            if author:\n                author.posts_count = max(0, author.posts_count - 1)\n\n            return True\n        return False\n\n    def search(self, query: str, skip: int = 0, limit: int = 100) -&gt; List[Post]:\n        \"\"\"Search posts by title or content\"\"\"\n        query_lower = query.lower()\n        matching_posts = [\n            post for post in self._posts\n            if post.published and (\n                query_lower in post.title.lower() or\n                query_lower in post.content.lower()\n            )\n        ]\n        return matching_posts[skip:skip + limit]\n\nposts_crud = PostsCRUD()\n</code></pre>"},{"location":"tutorial/first-project/#comments-crud","title":"Comments CRUD","text":"<p>Update <code>src/crud/comments.py</code>:</p> <pre><code>from typing import List, Optional\nfrom datetime import datetime\nfrom src.schemas.comments import CommentCreate, CommentUpdate, Comment\n\nclass CommentsCRUD:\n    def __init__(self):\n        self._comments: List[Comment] = []\n        self._next_id = 1\n\n    def get_all(self) -&gt; List[Comment]:\n        \"\"\"Get all comments\"\"\"\n        return self._comments\n\n    def get_by_id(self, comment_id: int) -&gt; Optional[Comment]:\n        \"\"\"Get comment by ID\"\"\"\n        return next((comment for comment in self._comments if comment.id == comment_id), None)\n\n    def get_by_post(self, post_id: int, skip: int = 0, limit: int = 100) -&gt; List[Comment]:\n        \"\"\"Get comments for a specific post\"\"\"\n        post_comments = [comment for comment in self._comments if comment.post_id == post_id]\n        return post_comments[skip:skip + limit]\n\n    def get_by_author(self, author_id: int, skip: int = 0, limit: int = 100) -&gt; List[Comment]:\n        \"\"\"Get comments by author\"\"\"\n        author_comments = [comment for comment in self._comments if comment.author_id == author_id]\n        return author_comments[skip:skip + limit]\n\n    def create(self, comment: CommentCreate, author_id: int) -&gt; Comment:\n        \"\"\"Create a new comment\"\"\"\n        # Verify post exists\n        from src.crud.posts import posts_crud\n        post = posts_crud.get_by_id(comment.post_id)\n        if not post:\n            raise ValueError(\"Post not found\")\n\n        now = datetime.now()\n        new_comment = Comment(\n            id=self._next_id,\n            content=comment.content,\n            post_id=comment.post_id,\n            author_id=author_id,\n            created_at=now,\n            updated_at=now\n        )\n        self._next_id += 1\n        self._comments.append(new_comment)\n\n        # Update post's comment count\n        post.comments_count += 1\n\n        return new_comment\n\n    def update(self, comment_id: int, comment_update: CommentUpdate, author_id: int) -&gt; Optional[Comment]:\n        \"\"\"Update an existing comment\"\"\"\n        comment = self.get_by_id(comment_id)\n        if not comment or comment.author_id != author_id:\n            return None\n\n        update_data = comment_update.dict(exclude_unset=True)\n        for field, value in update_data.items():\n            setattr(comment, field, value)\n\n        comment.updated_at = datetime.now()\n        return comment\n\n    def delete(self, comment_id: int, author_id: int) -&gt; bool:\n        \"\"\"Delete a comment\"\"\"\n        comment = self.get_by_id(comment_id)\n        if comment and comment.author_id == author_id:\n            self._comments.remove(comment)\n\n            # Update post's comment count\n            from src.crud.posts import posts_crud\n            post = posts_crud.get_by_id(comment.post_id)\n            if post:\n                post.comments_count = max(0, post.comments_count - 1)\n\n            return True\n        return False\n\ncomments_crud = CommentsCRUD()\n</code></pre>"},{"location":"tutorial/first-project/#step-6-implement-advanced-api-routes","title":"Step 6: Implement Advanced API Routes","text":""},{"location":"tutorial/first-project/#enhanced-user-routes","title":"Enhanced User Routes","text":"<p>Update <code>src/api/routes/users.py</code>:</p> <pre><code>from typing import List\nfrom fastapi import APIRouter, HTTPException, status, Depends, Query\nfrom src.schemas.users import User, UserCreate, UserUpdate\nfrom src.crud.users import users_crud\n\nrouter = APIRouter()\n\n# Helper function to get current user (simplified for tutorial)\ndef get_current_user_id() -&gt; int:\n    # In a real app, this would verify JWT token and return user ID\n    return 1  # For tutorial purposes\n\n@router.get(\"/\", response_model=List[User])\ndef read_users(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=100)\n):\n    \"\"\"Get all users with pagination\"\"\"\n    users = users_crud.get_all()[skip:skip + limit]\n    return [User(**user.dict()) for user in users]\n\n@router.post(\"/\", response_model=User, status_code=status.HTTP_201_CREATED)\ndef create_user(user: UserCreate):\n    \"\"\"Register a new user\"\"\"\n    try:\n        new_user = users_crud.create(user)\n        return User(**new_user.dict())\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.get(\"/{user_id}\", response_model=User)\ndef read_user(user_id: int):\n    \"\"\"Get a specific user\"\"\"\n    user = users_crud.get_by_id(user_id)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"User with id {user_id} not found\"\n        )\n    return User(**user.dict())\n\n@router.put(\"/{user_id}\", response_model=User)\ndef update_user(\n    user_id: int,\n    user_update: UserUpdate,\n    current_user_id: int = Depends(get_current_user_id)\n):\n    \"\"\"Update user profile\"\"\"\n    if user_id != current_user_id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"You can only update your own profile\"\n        )\n\n    try:\n        updated_user = users_crud.update(user_id, user_update)\n        if not updated_user:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"User not found\"\n            )\n        return User(**updated_user.dict())\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.delete(\"/{user_id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_user(\n    user_id: int,\n    current_user_id: int = Depends(get_current_user_id)\n):\n    \"\"\"Deactivate user account\"\"\"\n    if user_id != current_user_id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"You can only delete your own account\"\n        )\n\n    success = users_crud.delete(user_id)\n    if not success:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"User not found\"\n        )\n\n@router.post(\"/login\")\ndef login(email: str, password: str):\n    \"\"\"Authenticate user\"\"\"\n    user = users_crud.authenticate(email, password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid email or password\"\n        )\n\n    # In a real app, return JWT token\n    return {\n        \"message\": \"Login successful\",\n        \"user_id\": user.id,\n        \"username\": user.username\n    }\n</code></pre>"},{"location":"tutorial/first-project/#enhanced-posts-routes","title":"Enhanced Posts Routes","text":"<p>Update <code>src/api/routes/posts.py</code>:</p> <pre><code>from typing import List, Optional\nfrom fastapi import APIRouter, HTTPException, status, Depends, Query\nfrom src.schemas.posts import Post, PostCreate, PostUpdate\nfrom src.crud.posts import posts_crud\n\nrouter = APIRouter()\n\ndef get_current_user_id() -&gt; int:\n    return 1  # Simplified for tutorial\n\n@router.get(\"/\", response_model=List[Post])\ndef read_posts(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=100),\n    search: Optional[str] = Query(None)\n):\n    \"\"\"Get all posts with optional search\"\"\"\n    if search:\n        posts = posts_crud.search(search, skip, limit)\n    else:\n        posts = posts_crud.get_all(skip, limit)\n    return posts\n\n@router.post(\"/\", response_model=Post, status_code=status.HTTP_201_CREATED)\ndef create_post(\n    post: PostCreate,\n    current_user_id: int = Depends(get_current_user_id)\n):\n    \"\"\"Create a new blog post\"\"\"\n    new_post = posts_crud.create(post, current_user_id)\n    return new_post\n\n@router.get(\"/{post_id}\", response_model=Post)\ndef read_post(post_id: int):\n    \"\"\"Get a specific post\"\"\"\n    post = posts_crud.get_by_id(post_id)\n    if not post:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Post not found\"\n        )\n    return post\n\n@router.put(\"/{post_id}\", response_model=Post)\ndef update_post(\n    post_id: int,\n    post_update: PostUpdate,\n    current_user_id: int = Depends(get_current_user_id)\n):\n    \"\"\"Update a blog post\"\"\"\n    updated_post = posts_crud.update(post_id, post_update, current_user_id)\n    if not updated_post:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Post not found or you don't have permission to edit it\"\n        )\n    return updated_post\n\n@router.delete(\"/{post_id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_post(\n    post_id: int,\n    current_user_id: int = Depends(get_current_user_id)\n):\n    \"\"\"Delete a blog post\"\"\"\n    success = posts_crud.delete(post_id, current_user_id)\n    if not success:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Post not found or you don't have permission to delete it\"\n        )\n\n@router.get(\"/author/{author_id}\", response_model=List[Post])\ndef read_posts_by_author(\n    author_id: int,\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=100)\n):\n    \"\"\"Get posts by a specific author\"\"\"\n    posts = posts_crud.get_by_author(author_id, skip, limit)\n    return posts\n</code></pre>"},{"location":"tutorial/first-project/#enhanced-comments-routes","title":"Enhanced Comments Routes","text":"<p>Update <code>src/api/routes/comments.py</code>:</p> <pre><code>from typing import List\nfrom fastapi import APIRouter, HTTPException, status, Depends, Query\nfrom src.schemas.comments import Comment, CommentCreate, CommentUpdate\nfrom src.crud.comments import comments_crud\n\nrouter = APIRouter()\n\ndef get_current_user_id() -&gt; int:\n    return 1  # Simplified for tutorial\n\n@router.get(\"/\", response_model=List[Comment])\ndef read_comments(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=100)\n):\n    \"\"\"Get all comments\"\"\"\n    comments = comments_crud.get_all()[skip:skip + limit]\n    return comments\n\n@router.post(\"/\", response_model=Comment, status_code=status.HTTP_201_CREATED)\ndef create_comment(\n    comment: CommentCreate,\n    current_user_id: int = Depends(get_current_user_id)\n):\n    \"\"\"Create a new comment\"\"\"\n    try:\n        new_comment = comments_crud.create(comment, current_user_id)\n        return new_comment\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.get(\"/{comment_id}\", response_model=Comment)\ndef read_comment(comment_id: int):\n    \"\"\"Get a specific comment\"\"\"\n    comment = comments_crud.get_by_id(comment_id)\n    if not comment:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Comment not found\"\n        )\n    return comment\n\n@router.put(\"/{comment_id}\", response_model=Comment)\ndef update_comment(\n    comment_id: int,\n    comment_update: CommentUpdate,\n    current_user_id: int = Depends(get_current_user_id)\n):\n    \"\"\"Update a comment\"\"\"\n    updated_comment = comments_crud.update(comment_id, comment_update, current_user_id)\n    if not updated_comment:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Comment not found or you don't have permission to edit it\"\n        )\n    return updated_comment\n\n@router.delete(\"/{comment_id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_comment(\n    comment_id: int,\n    current_user_id: int = Depends(get_current_user_id)\n):\n    \"\"\"Delete a comment\"\"\"\n    success = comments_crud.delete(comment_id, current_user_id)\n    if not success:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Comment not found or you don't have permission to delete it\"\n        )\n\n@router.get(\"/post/{post_id}\", response_model=List[Comment])\ndef read_comments_by_post(\n    post_id: int,\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=100)\n):\n    \"\"\"Get comments for a specific post\"\"\"\n    comments = comments_crud.get_by_post(post_id, skip, limit)\n    return comments\n\n@router.get(\"/author/{author_id}\", response_model=List[Comment])\ndef read_comments_by_author(\n    author_id: int,\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=100)\n):\n    \"\"\"Get comments by a specific author\"\"\"\n    comments = comments_crud.get_by_author(author_id, skip, limit)\n    return comments\n</code></pre>"},{"location":"tutorial/first-project/#step-7-test-your-blog-api","title":"Step 7: Test Your Blog API","text":"<p>Let's start the server and test our complete blog API:</p> <pre><code>$ fastkit runserver\nINFO:     Uvicorn running on http://127.0.0.1:8000\n</code></pre>"},{"location":"tutorial/first-project/#test-user-registration","title":"Test User Registration","text":"<pre><code>$ curl -X POST \"http://127.0.0.1:8000/api/v1/users/\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"email\": \"john@example.com\",\n       \"username\": \"john_doe\",\n       \"full_name\": \"John Doe\",\n       \"bio\": \"Software developer and blogger\",\n       \"password\": \"securepassword123\"\n     }'\n\n{\n  \"id\": 1,\n  \"email\": \"john@example.com\",\n  \"username\": \"john_doe\",\n  \"full_name\": \"John Doe\",\n  \"bio\": \"Software developer and blogger\",\n  \"is_active\": true,\n  \"created_at\": \"2023-12-07T10:30:00\",\n  \"posts_count\": 0\n}\n</code></pre>"},{"location":"tutorial/first-project/#test-user-login","title":"Test User Login","text":"<pre><code>$ curl -X POST \"http://127.0.0.1:8000/api/v1/users/login\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"email\": \"john@example.com\",\n       \"password\": \"securepassword123\"\n     }'\n\n{\n  \"message\": \"Login successful\",\n  \"user_id\": 1,\n  \"username\": \"john_doe\"\n}\n</code></pre>"},{"location":"tutorial/first-project/#test-post-creation","title":"Test Post Creation","text":"<pre><code>$ curl -X POST \"http://127.0.0.1:8000/api/v1/posts/\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"title\": \"My First Blog Post\",\n       \"content\": \"This is the content of my first blog post. It's about learning FastAPI with FastAPI-fastkit!\",\n       \"published\": true\n     }'\n\n{\n  \"id\": 1,\n  \"title\": \"My First Blog Post\",\n  \"content\": \"This is the content of my first blog post. It's about learning FastAPI with FastAPI-fastkit!\",\n  \"published\": true,\n  \"author_id\": 1,\n  \"created_at\": \"2023-12-07T10:35:00\",\n  \"updated_at\": \"2023-12-07T10:35:00\",\n  \"comments_count\": 0\n}\n</code></pre>"},{"location":"tutorial/first-project/#test-comment-creation","title":"Test Comment Creation","text":"<pre><code>$ curl -X POST \"http://127.0.0.1:8000/api/v1/comments/\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"content\": \"Great post! I learned a lot from this.\",\n       \"post_id\": 1\n     }'\n\n{\n  \"id\": 1,\n  \"content\": \"Great post! I learned a lot from this.\",\n  \"post_id\": 1,\n  \"author_id\": 1,\n  \"created_at\": \"2023-12-07T10:40:00\",\n  \"updated_at\": \"2023-12-07T10:40:00\"\n}\n</code></pre>"},{"location":"tutorial/first-project/#test-search-functionality","title":"Test Search Functionality","text":"<pre><code>$ curl \"http://127.0.0.1:8000/api/v1/posts/?search=FastAPI\"\n\n[\n  {\n    \"id\": 1,\n    \"title\": \"My First Blog Post\",\n    \"content\": \"This is the content of my first blog post. It's about learning FastAPI with FastAPI-fastkit!\",\n    \"published\": true,\n    \"author_id\": 1,\n    \"created_at\": \"2023-12-07T10:35:00\",\n    \"updated_at\": \"2023-12-07T10:35:00\",\n    \"comments_count\": 1\n  }\n]\n</code></pre>"},{"location":"tutorial/first-project/#step-8-api-documentation","title":"Step 8: API Documentation","text":"<p>Visit http://127.0.0.1:8000/docs to see your complete API documentation. You should now see:</p> <ul> <li>Users: Registration, login, profile management</li> <li>Posts: CRUD operations, search, author filtering</li> <li>Comments: CRUD operations, post/author filtering</li> <li>Items: Original example endpoints</li> </ul> <p>The documentation shows: - All available endpoints - Request/response schemas - Data validation rules - Error responses</p>"},{"location":"tutorial/first-project/#step-9-write-tests","title":"Step 9: Write Tests","text":"<p>Let's create comprehensive tests for our blog API. Create <code>tests/test_blog_api.py</code>:</p> <pre><code>from fastapi.testclient import TestClient\nfrom src.main import app\n\nclient = TestClient(app)\n\nclass TestUserAPI:\n    def test_create_user(self):\n        user_data = {\n            \"email\": \"test@example.com\",\n            \"username\": \"testuser\",\n            \"full_name\": \"Test User\",\n            \"bio\": \"Test bio\",\n            \"password\": \"testpassword123\"\n        }\n        response = client.post(\"/api/v1/users/\", json=user_data)\n        assert response.status_code == 201\n        data = response.json()\n        assert data[\"email\"] == user_data[\"email\"]\n        assert data[\"username\"] == user_data[\"username\"]\n        assert \"id\" in data\n        assert \"hashed_password\" not in data  # Should not expose password\n\n    def test_duplicate_email(self):\n        # First user\n        user_data1 = {\n            \"email\": \"duplicate@example.com\",\n            \"username\": \"user1\",\n            \"password\": \"password123\"\n        }\n        response1 = client.post(\"/api/v1/users/\", json=user_data1)\n        assert response1.status_code == 201\n\n        # Second user with same email\n        user_data2 = {\n            \"email\": \"duplicate@example.com\",\n            \"username\": \"user2\",\n            \"password\": \"password123\"\n        }\n        response2 = client.post(\"/api/v1/users/\", json=user_data2)\n        assert response2.status_code == 400\n        assert \"Email already registered\" in response2.json()[\"detail\"]\n\n    def test_login(self):\n        # Create user first\n        user_data = {\n            \"email\": \"login@example.com\",\n            \"username\": \"loginuser\",\n            \"password\": \"loginpassword123\"\n        }\n        client.post(\"/api/v1/users/\", json=user_data)\n\n        # Test login\n        login_data = {\n            \"email\": \"login@example.com\",\n            \"password\": \"loginpassword123\"\n        }\n        response = client.post(\"/api/v1/users/login\", json=login_data)\n        assert response.status_code == 200\n        data = response.json()\n        assert \"user_id\" in data\n        assert data[\"username\"] == \"loginuser\"\n\nclass TestPostAPI:\n    def test_create_post(self):\n        post_data = {\n            \"title\": \"Test Post\",\n            \"content\": \"This is a test post content\",\n            \"published\": True\n        }\n        response = client.post(\"/api/v1/posts/\", json=post_data)\n        assert response.status_code == 201\n        data = response.json()\n        assert data[\"title\"] == post_data[\"title\"]\n        assert data[\"content\"] == post_data[\"content\"]\n        assert \"id\" in data\n        assert \"author_id\" in data\n\n    def test_read_posts(self):\n        response = client.get(\"/api/v1/posts/\")\n        assert response.status_code == 200\n        data = response.json()\n        assert isinstance(data, list)\n\n    def test_search_posts(self):\n        # Create a post with specific content\n        post_data = {\n            \"title\": \"FastAPI Tutorial\",\n            \"content\": \"Learn how to build APIs with FastAPI\",\n            \"published\": True\n        }\n        client.post(\"/api/v1/posts/\", json=post_data)\n\n        # Search for the post\n        response = client.get(\"/api/v1/posts/?search=FastAPI\")\n        assert response.status_code == 200\n        data = response.json()\n        assert len(data) &gt; 0\n        assert any(\"FastAPI\" in post[\"title\"] or \"FastAPI\" in post[\"content\"] for post in data)\n\nclass TestCommentAPI:\n    def test_create_comment(self):\n        # Create a post first\n        post_data = {\n            \"title\": \"Post for Comments\",\n            \"content\": \"This post will receive comments\",\n            \"published\": True\n        }\n        post_response = client.post(\"/api/v1/posts/\", json=post_data)\n        post_id = post_response.json()[\"id\"]\n\n        # Create comment\n        comment_data = {\n            \"content\": \"This is a test comment\",\n            \"post_id\": post_id\n        }\n        response = client.post(\"/api/v1/comments/\", json=comment_data)\n        assert response.status_code == 201\n        data = response.json()\n        assert data[\"content\"] == comment_data[\"content\"]\n        assert data[\"post_id\"] == post_id\n\n    def test_get_comments_by_post(self):\n        # Create post and comment first\n        post_data = {\n            \"title\": \"Post with Comments\",\n            \"content\": \"This post has comments\",\n            \"published\": True\n        }\n        post_response = client.post(\"/api/v1/posts/\", json=post_data)\n        post_id = post_response.json()[\"id\"]\n\n        comment_data = {\n            \"content\": \"Comment on post\",\n            \"post_id\": post_id\n        }\n        client.post(\"/api/v1/comments/\", json=comment_data)\n\n        # Get comments for the post\n        response = client.get(f\"/api/v1/comments/post/{post_id}\")\n        assert response.status_code == 200\n        data = response.json()\n        assert len(data) &gt; 0\n        assert all(comment[\"post_id\"] == post_id for comment in data)\n\n# Run the tests\nif __name__ == \"__main__\":\n    import pytest\n    pytest.main([__file__])\n</code></pre>"},{"location":"tutorial/first-project/#run-the-tests","title":"Run the Tests","text":"<pre><code>$ python -m pytest tests/test_blog_api.py -v\n======================== test session starts ========================\ntests/test_blog_api.py::TestUserAPI::test_create_user PASSED\ntests/test_blog_api.py::TestUserAPI::test_duplicate_email PASSED\ntests/test_blog_api.py::TestUserAPI::test_login PASSED\ntests/test_blog_api.py::TestPostAPI::test_create_post PASSED\ntests/test_blog_api.py::TestPostAPI::test_read_posts PASSED\ntests/test_blog_api.py::TestPostAPI::test_search_posts PASSED\ntests/test_blog_api.py::TestCommentAPI::test_create_comment PASSED\ntests/test_blog_api.py::TestCommentAPI::test_get_comments_by_post PASSED\n======================== 8 passed in 1.23s ========================\n</code></pre>"},{"location":"tutorial/first-project/#what-youve-built","title":"What You've Built","text":"<p>Congratulations! You've successfully built a complete blog API with:</p>"},{"location":"tutorial/first-project/#features-implemented","title":"\u2705 Features Implemented","text":"<ul> <li>User Management</li> <li>User registration with validation</li> <li>User authentication (login)</li> <li>Profile management</li> <li> <p>Duplicate prevention</p> </li> <li> <p>Blog Posts</p> </li> <li>Create, read, update, delete posts</li> <li>Author-based filtering</li> <li>Search functionality</li> <li> <p>Publish/draft status</p> </li> <li> <p>Comment System</p> </li> <li>Add comments to posts</li> <li>View comments by post or author</li> <li> <p>Comment management</p> </li> <li> <p>Data Validation</p> </li> <li>Email validation</li> <li>Password requirements</li> <li>Content length limits</li> <li> <p>Required field validation</p> </li> <li> <p>Error Handling</p> </li> <li>Proper HTTP status codes</li> <li>Descriptive error messages</li> <li> <p>Input validation errors</p> </li> <li> <p>API Documentation</p> </li> <li>Automatic OpenAPI generation</li> <li>Interactive testing interface</li> <li> <p>Request/response schemas</p> </li> <li> <p>Testing</p> </li> <li>Comprehensive test coverage</li> <li>Unit tests for all endpoints</li> <li>Edge case testing</li> </ul>"},{"location":"tutorial/first-project/#next-steps","title":"Next Steps","text":""},{"location":"tutorial/first-project/#potential-enhancements","title":"Potential Enhancements","text":"<ol> <li>Real Authentication</li> <li>Implement JWT tokens</li> <li>Add password hashing with bcrypt</li> <li> <p>Role-based permissions</p> </li> <li> <p>Database Integration</p> </li> <li>Use PostgreSQL or MySQL</li> <li>Implement proper database models</li> <li> <p>Add database migrations</p> </li> <li> <p>Advanced Features</p> </li> <li>File uploads for images</li> <li>Email notifications</li> <li>Post categories/tags</li> <li> <p>Like/dislike system</p> </li> <li> <p>Production Readiness</p> </li> <li>Add logging</li> <li>Implement caching</li> <li>Add rate limiting</li> <li>Environment configuration</li> </ol>"},{"location":"tutorial/first-project/#continue-learning","title":"Continue Learning","text":"<ol> <li>Using Templates: Explore the <code>fastapi-psql-orm</code> template for database integration</li> <li>Adding Routes: Learn more advanced routing patterns</li> <li>Contributing: Contribute to FastAPI-fastkit</li> </ol> <p>Best Practices You've Learned</p> <ul> <li>Modular Architecture: Separation of concerns with schemas, CRUD, and routes</li> <li>Data Validation: Using Pydantic for robust input validation</li> <li>Error Handling: Proper HTTP status codes and error messages</li> <li>Testing: Comprehensive test coverage for all functionality</li> <li>Documentation: Leveraging automatic API documentation generation</li> </ul> <p>You now have the skills to build production-quality APIs with FastAPI-fastkit! \ud83d\ude80</p>"},{"location":"tutorial/getting-started/","title":"Getting Started","text":"<p>A comprehensive, step-by-step tutorial for getting started with FastAPI-fastkit. This guide will take you from installation to running your first API in about 15 minutes.</p>"},{"location":"tutorial/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before we begin, make sure you have:</p> <ul> <li>Python 3.12 or higher installed on your system</li> <li>Basic knowledge of Python (variables, functions, classes)</li> <li>Terminal/Command line access</li> <li>Text editor or IDE (VS Code, PyCharm, etc.)</li> </ul>"},{"location":"tutorial/getting-started/#step-1-installation","title":"Step 1: Installation","text":"<p>First, let's install FastAPI-fastkit. We recommend using a virtual environment to keep your projects isolated.</p>"},{"location":"tutorial/getting-started/#option-a-using-pip-traditional","title":"Option A: Using pip (Traditional)","text":"<pre><code>$ pip install fastapi-fastkit\n---&gt; 100%\nSuccessfully installed fastapi-fastkit\n</code></pre>"},{"location":"tutorial/getting-started/#option-b-using-uv-recommended-faster","title":"Option B: Using UV (Recommended - Faster)","text":"<p>UV is a fast Python package manager. If you don't have UV installed:</p> <pre><code># Install UV first\n$ curl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Then install FastAPI-fastkit\n$ uv pip install fastapi-fastkit\n---&gt; 100%\nSuccessfully installed fastapi-fastkit\n</code></pre>"},{"location":"tutorial/getting-started/#option-c-using-a-virtual-environment","title":"Option C: Using a Virtual Environment","text":"<pre><code>$ python -m venv fastapi-env\n$ source fastapi-env/bin/activate  # On Windows: fastapi-env\\Scripts\\activate\n$ pip install fastapi-fastkit\n</code></pre>"},{"location":"tutorial/getting-started/#verify-installation","title":"Verify Installation","text":"<p>Check that FastAPI-fastkit is installed correctly:</p> <pre><code>$ fastkit --version\nFastAPI-fastkit version 1.0.0\n</code></pre>"},{"location":"tutorial/getting-started/#step-2-create-your-first-project","title":"Step 2: Create Your First Project","text":"<p>Now let's create your first FastAPI project using the interactive <code>init</code> command:</p> <pre><code>$ fastkit init\nEnter the project name: my-first-api\nEnter the author name: Your Name\nEnter the author email: your.email@example.com\nEnter the project description: My first FastAPI project\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 my-first-api            \u2502\n\u2502 Author       \u2502 Your Name               \u2502\n\u2502 Author Email \u2502 your.email@example.com  \u2502\n\u2502 Description  \u2502 My first FastAPI project\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nAvailable Stacks and Dependencies:\n           MINIMAL Stack\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 pydantic          \u2502\n\u2502 Dependency 4 \u2502 pydantic-settings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n           STANDARD Stack\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 sqlalchemy        \u2502\n\u2502 Dependency 4 \u2502 alembic           \u2502\n\u2502 Dependency 5 \u2502 pytest            \u2502\n\u2502 Dependency 6 \u2502 pydantic          \u2502\n\u2502 Dependency 7 \u2502 pydantic-settings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect stack (minimal, standard, full): minimal\n\nAvailable Package Managers:\n                   Package Managers\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PIP    \u2502 Standard Python package manager            \u2502\n\u2502 UV     \u2502 Fast Python package manager                \u2502\n\u2502 PDM    \u2502 Modern Python dependency management        \u2502\n\u2502 POETRY \u2502 Python dependency management and packaging \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\n\nCreating virtual environment...\nInstalling dependencies...\n\u2728 FastAPI project 'my-first-api' has been created successfully!\n</code></pre> <p>Stack Selection</p> <p>We chose MINIMAL for this tutorial to keep things simple. For real projects, consider STANDARD (includes database support) or FULL (includes background tasks).</p>"},{"location":"tutorial/getting-started/#step-3-navigate-to-your-project","title":"Step 3: Navigate to Your Project","text":"<p>Move into your newly created project directory:</p> <pre><code>$ cd my-first-api\n$ ls -la\ntotal 32\ndrwxr-xr-x  8 user user  256 Dec  7 10:30 .\ndrwxr-xr-x  3 user user   96 Dec  7 10:30 ..\ndrwxr-xr-x  5 user user  160 Dec  7 10:30 .venv\n-rw-r--r--  1 user user  156 Dec  7 10:30 README.md\n-rw-r--r--  1 user user  243 Dec  7 10:30 requirements.txt\ndrwxr-xr-x  3 user user   96 Dec  7 10:30 scripts\n-rw-r--r--  1 user user 1245 Dec  7 10:30 setup.py\ndrwxr-xr-x  8 user user  256 Dec  7 10:30 src\ndrwxr-xr-x  3 user user   96 Dec  7 10:30 tests\n</code></pre>"},{"location":"tutorial/getting-started/#step-4-activate-virtual-environment","title":"Step 4: Activate Virtual Environment","text":"<p>Your project comes with a pre-configured virtual environment. Let's activate it:</p> <pre><code>$ source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n(my-first-api) $\n</code></pre> <p>Notice how your terminal prompt now shows <code>(my-first-api)</code> indicating the virtual environment is active.</p>"},{"location":"tutorial/getting-started/#step-5-start-the-development-server","title":"Step 5: Start the Development Server","text":"<p>Now comes the exciting part - let's start your FastAPI server:</p> <pre><code>$ fastkit runserver\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720] using StatReload\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre> <p>\ud83c\udf89 Congratulations! Your FastAPI server is now running.</p>"},{"location":"tutorial/getting-started/#step-6-test-your-api","title":"Step 6: Test Your API","text":"<p>Let's test your API in several ways:</p>"},{"location":"tutorial/getting-started/#method-1-browser","title":"Method 1: Browser","text":"<p>Open your web browser and visit:</p> <ul> <li>Main API endpoint: http://127.0.0.1:8000</li> </ul> <p>You should see: <pre><code>{\"message\": \"Hello World\"}\n</code></pre></p>"},{"location":"tutorial/getting-started/#method-2-interactive-api-documentation","title":"Method 2: Interactive API Documentation","text":"<p>Visit the automatically generated API documentation:</p> <ul> <li>Swagger UI: http://127.0.0.1:8000/docs</li> <li>ReDoc: http://127.0.0.1:8000/redoc</li> </ul> <p>The Swagger UI is particularly useful - you can: - See all available endpoints - Test endpoints directly in your browser - View request/response schemas - Download OpenAPI specifications</p>"},{"location":"tutorial/getting-started/#method-3-command-line","title":"Method 3: Command Line","text":"<p>Open a new terminal (keep the server running) and test with curl:</p> <pre><code>$ curl http://127.0.0.1:8000\n{\"message\":\"Hello World\"}\n\n$ curl http://127.0.0.1:8000/api/v1/items/\n[]\n\n$ curl -X POST \"http://127.0.0.1:8000/api/v1/items/\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"title\": \"My First Item\", \"description\": \"This is a test item\"}'\n{\n  \"id\": 1,\n  \"title\": \"My First Item\",\n  \"description\": \"This is a test item\"\n}\n</code></pre>"},{"location":"tutorial/getting-started/#step-7-understand-your-project-structure","title":"Step 7: Understand Your Project Structure","text":"<p>Let's explore what FastAPI-fastkit generated for you:</p> <pre><code>$ tree src\nsrc/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 main.py                 # FastAPI application entry point\n\u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 config.py          # Application configuration\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 api.py             # Main API router\n\u2502   \u2514\u2500\u2500 routes/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 items.py       # Items API endpoints\n\u251c\u2500\u2500 crud/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 items.py           # Business logic for items\n\u251c\u2500\u2500 schemas/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 items.py           # Data validation schemas\n\u2514\u2500\u2500 mocks/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 mock_items.json    # Sample data\n</code></pre>"},{"location":"tutorial/getting-started/#key-files-explained","title":"Key Files Explained","text":"<p><code>src/main.py</code> - The heart of your application: <pre><code>from fastapi import FastAPI\nfrom src.api.api import api_router\nfrom src.core.config import settings\n\napp = FastAPI(\n    title=settings.PROJECT_NAME,\n    version=settings.VERSION,\n    openapi_url=f\"{settings.API_V1_STR}/openapi.json\"\n)\n\napp.include_router(api_router, prefix=settings.API_V1_STR)\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello World\"}\n</code></pre></p> <p><code>src/core/config.py</code> - Application settings: <pre><code>from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    PROJECT_NAME: str = \"my-first-api\"\n    VERSION: str = \"1.0.0\"\n    API_V1_STR: str = \"/api/v1\"\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n</code></pre></p> <p><code>src/api/routes/items.py</code> - API endpoints: <pre><code>from typing import List\nfrom fastapi import APIRouter, HTTPException\nfrom src.schemas.items import Item, ItemCreate, ItemUpdate\nfrom src.crud.items import items_crud\n\nrouter = APIRouter()\n\n@router.get(\"/\", response_model=List[Item])\ndef read_items():\n    \"\"\"Get all items\"\"\"\n    return items_crud.get_all()\n\n@router.post(\"/\", response_model=Item)\ndef create_item(item: ItemCreate):\n    \"\"\"Create a new item\"\"\"\n    return items_crud.create(item)\n</code></pre></p>"},{"location":"tutorial/getting-started/#step-8-add-your-first-custom-route","title":"Step 8: Add Your First Custom Route","text":"<p>Let's add a new API route to practice what you've learned:</p> <pre><code>$ fastkit addroute my-first-api users\n                       Adding New Route\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project          \u2502 my-first-api                             \u2502\n\u2502 Route Name       \u2502 users                                    \u2502\n\u2502 Target Directory \u2502 ~/my-first-api                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDo you want to add route 'users' to project 'my-first-api'? [Y/n]: y\n\n\u2728 Successfully added new route 'users' to project 'my-first-api'\n</code></pre> <p>The server will automatically restart and now you have new endpoints: - <code>GET /api/v1/users/</code> - Get all users - <code>POST /api/v1/users/</code> - Create a new user - <code>GET /api/v1/users/{user_id}</code> - Get a specific user - And more...</p>"},{"location":"tutorial/getting-started/#test-your-new-route","title":"Test Your New Route","text":"<pre><code>$ curl -X POST \"http://127.0.0.1:8000/api/v1/users/\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"title\": \"John Doe\", \"description\": \"Software Developer\"}'\n{\n  \"id\": 1,\n  \"title\": \"John Doe\",\n  \"description\": \"Software Developer\"\n}\n\n$ curl http://127.0.0.1:8000/api/v1/users/\n[\n  {\n    \"id\": 1,\n    \"title\": \"John Doe\",\n    \"description\": \"Software Developer\"\n  }\n]\n</code></pre>"},{"location":"tutorial/getting-started/#step-9-explore-and-modify-the-code","title":"Step 9: Explore and Modify the Code","text":"<p>Now let's make a small modification to understand how the code works.</p>"},{"location":"tutorial/getting-started/#modify-the-welcome-message","title":"Modify the Welcome Message","text":"<p>Open <code>src/main.py</code> in your text editor and change the root endpoint:</p> <pre><code>@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Welcome to my first FastAPI application!\"}\n</code></pre> <p>Save the file. Thanks to auto-reload, your server automatically restarts.</p>"},{"location":"tutorial/getting-started/#test-the-change","title":"Test the Change","text":"<pre><code>$ curl http://127.0.0.1:8000\n{\"message\":\"Welcome to my first FastAPI application!\"}\n</code></pre>"},{"location":"tutorial/getting-started/#add-a-new-endpoint","title":"Add a New Endpoint","text":"<p>Let's add a simple endpoint to <code>src/main.py</code>:</p> <pre><code>@app.get(\"/hello/{name}\")\ndef say_hello(name: str):\n    return {\"message\": f\"Hello, {name}!\"}\n</code></pre>"},{"location":"tutorial/getting-started/#test-the-new-endpoint","title":"Test the New Endpoint","text":"<pre><code>$ curl http://127.0.0.1:8000/hello/World\n{\"message\":\"Hello, World!\"}\n\n$ curl http://127.0.0.1:8000/hello/FastAPI\n{\"message\":\"Hello, FastAPI!\"}\n</code></pre>"},{"location":"tutorial/getting-started/#step-10-run-tests","title":"Step 10: Run Tests","text":"<p>Your project comes with pre-configured tests. Let's run them:</p> <pre><code>$ python -m pytest\n======================== test session starts ========================\ncollected 5 items\n\ntests/test_items.py::test_create_item PASSED\ntests/test_items.py::test_read_items PASSED\ntests/test_items.py::test_read_item PASSED\ntests/test_items.py::test_update_item PASSED\ntests/test_items.py::test_delete_item PASSED\n\n======================== 5 passed in 0.45s ========================\n</code></pre>"},{"location":"tutorial/getting-started/#understanding-core-concepts","title":"Understanding Core Concepts","text":""},{"location":"tutorial/getting-started/#1-fastapi-application-structure","title":"1. FastAPI Application Structure","text":"<p>FastAPI-fastkit follows a modular architecture:</p> <ul> <li><code>main.py</code>: Application entry point and global endpoints</li> <li><code>api/</code>: API route organization</li> <li><code>core/</code>: Application configuration and settings</li> <li><code>crud/</code>: Business logic and data operations</li> <li><code>schemas/</code>: Data validation and serialization</li> <li><code>tests/</code>: Automated testing</li> </ul>"},{"location":"tutorial/getting-started/#2-dependency-management","title":"2. Dependency Management","text":"<p>Your project uses modern Python dependency management:</p> <ul> <li>Virtual environment: Isolated Python environment</li> <li>requirements.txt: Lists all dependencies</li> <li>Automatic installation: Dependencies installed during project creation</li> </ul>"},{"location":"tutorial/getting-started/#3-development-server","title":"3. Development Server","text":"<p>FastAPI-fastkit uses Uvicorn as the ASGI server:</p> <ul> <li>Auto-reload: Automatically restarts when code changes</li> <li>Fast startup: Quick development iteration</li> <li>Production-ready: Same server used in production</li> </ul>"},{"location":"tutorial/getting-started/#4-api-documentation","title":"4. API Documentation","text":"<p>FastAPI automatically generates:</p> <ul> <li>OpenAPI specification: Industry-standard API documentation</li> <li>Swagger UI: Interactive testing interface</li> <li>ReDoc: Alternative documentation view</li> </ul>"},{"location":"tutorial/getting-started/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've successfully:</p> <p>\u2705 Installed FastAPI-fastkit \u2705 Created your first project \u2705 Started the development server \u2705 Tested your API endpoints \u2705 Added a new route \u2705 Modified existing code \u2705 Run tests</p>"},{"location":"tutorial/getting-started/#continue-learning","title":"Continue Learning","text":"<ol> <li>Your First Project: Build a complete blog API with advanced features</li> <li>Adding Routes: Learn to create complex API endpoints</li> <li>Using Templates: Explore pre-built project templates</li> </ol>"},{"location":"tutorial/getting-started/#experiment-more","title":"Experiment More","text":"<p>Try these challenges:</p> <ol> <li>Add validation: Modify schemas to add data validation rules</li> <li>Custom responses: Change response formats in routes</li> <li>Environment variables: Use <code>.env</code> files for configuration</li> <li>Add middleware: Implement CORS or authentication</li> <li>Database integration: Upgrade to STANDARD stack for database support</li> </ol>"},{"location":"tutorial/getting-started/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<p>Server won't start: - Check you're in the project directory - Ensure virtual environment is activated - Verify no syntax errors in your code</p> <p>Import errors: - Make sure all <code>__init__.py</code> files exist - Check your import paths are correct - Verify you're using the virtual environment</p> <p>Port already in use: <pre><code>$ fastkit runserver --port 8080\n</code></pre></p>"},{"location":"tutorial/getting-started/#best-practices-youve-learned","title":"Best Practices You've Learned","text":"<ol> <li>Virtual Environments: Always use isolated environments</li> <li>Project Structure: Follow organized, modular architecture</li> <li>Auto-reload: Use development server for fast iteration</li> <li>API Documentation: Leverage automatic documentation generation</li> <li>Testing: Run tests regularly during development</li> </ol> <p>Development Tips</p> <ul> <li>Keep the development server running while coding</li> <li>Use the interactive docs (<code>/docs</code>) to test your APIs</li> <li>Check the terminal for helpful error messages</li> <li>Commit your code to version control regularly</li> </ul> <p>You're now ready to build amazing APIs with FastAPI-fastkit! \ud83d\ude80</p>"},{"location":"tutorial/mcp-integration/","title":"MCP (Model Context Protocol) Integration","text":"<p>Learn how to integrate Model Context Protocol (MCP) with FastAPI to build a system where AI models can use API endpoints as tools. We'll implement a complete AI-integrated API including authentication, permission management, and MCP server implementation using the <code>fastapi-mcp</code> template.</p>"},{"location":"tutorial/mcp-integration/#what-youll-learn-in-this-tutorial","title":"What You'll Learn in This Tutorial","text":"<ul> <li>Model Context Protocol (MCP) concepts and implementation</li> <li>Building JWT-based authentication systems</li> <li>Implementing Role-Based Access Control (RBAC)</li> <li>Exposing and managing MCP tools</li> <li>Secure API communication with AI models</li> <li>User session and context management</li> </ul>"},{"location":"tutorial/mcp-integration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed the Custom Response Handling Tutorial</li> <li>Understanding of JWT and OAuth2 basic concepts</li> <li>API communication concepts with AI/LLM models</li> <li>Basic knowledge of MCP protocol</li> </ul>"},{"location":"tutorial/mcp-integration/#what-is-model-context-protocol-mcp","title":"What is Model Context Protocol (MCP)?","text":"<p>MCP is a standardized protocol that allows AI models to interact with external systems.</p>"},{"location":"tutorial/mcp-integration/#traditional-vs-mcp-approach","title":"Traditional vs MCP Approach","text":"<p>Traditional Approach (Direct API Calls): <pre><code>AI Model \u2192 HTTP Request \u2192 API Server \u2192 Response\n</code></pre></p> <p>MCP Approach: <pre><code>AI Model \u2192 MCP Client \u2192 MCP Server (FastAPI) \u2192 Safe Tool Execution \u2192 Response\n</code></pre></p>"},{"location":"tutorial/mcp-integration/#advantages-of-mcp","title":"Advantages of MCP","text":"<ul> <li>Security: Integrated authentication and permission management</li> <li>Standardization: Consistent interface provision</li> <li>Context Management: Session-based state maintenance</li> <li>Tool Abstraction: Expose complex APIs as simple tools</li> </ul>"},{"location":"tutorial/mcp-integration/#step-1-creating-mcp-integration-project","title":"Step 1: Creating MCP Integration Project","text":"<p>Create a project using the <code>fastapi-mcp</code> template:</p> <pre><code>$ fastkit startdemo fastapi-mcp\nEnter the project name: ai-integrated-api\nEnter the author name: Developer Kim\nEnter the author email: developer@example.com\nEnter the project description: MCP-based API server integrated with AI models\nDeploying FastAPI project using 'fastapi-mcp' template\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 ai-integrated-api                           \u2502\n\u2502 Author       \u2502 Developer Kim                               \u2502\n\u2502 Author Email \u2502 developer@example.com                       \u2502\n\u2502 Description  \u2502 MCP-based API server integrated with AI models \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       Template Dependencies\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi        \u2502\n\u2502 Dependency 2 \u2502 uvicorn        \u2502\n\u2502 Dependency 3 \u2502 pydantic       \u2502\n\u2502 Dependency 4 \u2502 python-jose    \u2502\n\u2502 Dependency 5 \u2502 passlib        \u2502\n\u2502 Dependency 6 \u2502 python-multipart\u2502\n\u2502 Dependency 7 \u2502 mcp            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\n\n\u2728 FastAPI project 'ai-integrated-api' from 'fastapi-mcp' has been created successfully!\n</code></pre>"},{"location":"tutorial/mcp-integration/#step-2-project-structure-analysis","title":"Step 2: Project Structure Analysis","text":"<p>Let's examine the structure of the generated project:</p> <pre><code>ai-integrated-api/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.py                     # FastAPI application\n\u2502   \u251c\u2500\u2500 auth/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py               # Authentication-related data models\n\u2502   \u2502   \u251c\u2500\u2500 jwt_handler.py          # JWT token processing\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py         # Authentication dependencies\n\u2502   \u2502   \u2514\u2500\u2500 routes.py               # Authentication router\n\u2502   \u251c\u2500\u2500 mcp/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 server.py               # MCP server implementation\n\u2502   \u2502   \u251c\u2500\u2500 tools.py                # MCP tool definitions\n\u2502   \u2502   \u2514\u2500\u2500 client.py               # MCP client (for testing)\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 api.py                  # API router collection\n\u2502   \u2502   \u2514\u2500\u2500 routes/\n\u2502   \u2502       \u251c\u2500\u2500 items.py            # Item management API\n\u2502   \u2502       \u251c\u2500\u2500 users.py            # User management API\n\u2502   \u2502       \u2514\u2500\u2500 admin.py            # Admin API\n\u2502   \u251c\u2500\u2500 schemas/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 auth.py                 # Authentication schemas\n\u2502   \u2502   \u251c\u2500\u2500 users.py                # User schemas\n\u2502   \u2502   \u2514\u2500\u2500 items.py                # Item schemas\n\u2502   \u2514\u2500\u2500 core/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 config.py               # Configuration\n\u2502       \u251c\u2500\u2500 database.py             # Database (in-memory)\n\u2502       \u2514\u2500\u2500 security.py             # Security configuration\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 test_auth.py                # Authentication tests\n    \u251c\u2500\u2500 test_mcp.py                 # MCP tests\n    \u2514\u2500\u2500 test_integration.py         # Integration tests\n</code></pre>"},{"location":"tutorial/mcp-integration/#step-3-authentication-system-implementation","title":"Step 3: Authentication System Implementation","text":""},{"location":"tutorial/mcp-integration/#jwt-token-processing-srcauthjwt_handlerpy","title":"JWT Token Processing (<code>src/auth/jwt_handler.py</code>)","text":"<pre><code>from datetime import datetime, timedelta\nfrom typing import Optional, Dict, Any\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\n\nfrom src.core.config import settings\n\n# Password hashing\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\ndef verify_password(plain_password: str, hashed_password: str) -&gt; bool:\n    \"\"\"Password verification\"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password: str) -&gt; str:\n    \"\"\"Password hashing\"\"\"\n    return pwd_context.hash(password)\n\ndef create_access_token(data: Dict[str, Any], expires_delta: Optional[timedelta] = None) -&gt; str:\n    \"\"\"Access token generation\"\"\"\n    to_encode = data.copy()\n\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n\n    to_encode.update({\"exp\": expire, \"iat\": datetime.utcnow()})\n\n    encoded_jwt = jwt.encode(\n        to_encode,\n        settings.SECRET_KEY,\n        algorithm=settings.ALGORITHM\n    )\n\n    return encoded_jwt\n\ndef create_refresh_token(user_id: str) -&gt; str:\n    \"\"\"Refresh token generation\"\"\"\n    data = {\"sub\": user_id, \"type\": \"refresh\"}\n    expire = datetime.utcnow() + timedelta(days=settings.REFRESH_TOKEN_EXPIRE_DAYS)\n\n    to_encode = data.copy()\n    to_encode.update({\"exp\": expire, \"iat\": datetime.utcnow()})\n\n    return jwt.encode(\n        to_encode,\n        settings.SECRET_KEY,\n        algorithm=settings.ALGORITHM\n    )\n\ndef decode_token(token: str) -&gt; Optional[Dict[str, Any]]:\n    \"\"\"Token decoding\"\"\"\n    try:\n        payload = jwt.decode(\n            token,\n            settings.SECRET_KEY,\n            algorithms=[settings.ALGORITHM]\n        )\n        return payload\n    except JWTError:\n        return None\n\ndef verify_token(token: str, token_type: str = \"access\") -&gt; Optional[str]:\n    \"\"\"Token verification and user ID return\"\"\"\n    payload = decode_token(token)\n\n    if not payload:\n        return None\n\n    # Token type verification\n    if token_type == \"refresh\" and payload.get(\"type\") != \"refresh\":\n        return None\n\n    user_id = payload.get(\"sub\")\n    if not user_id:\n        return None\n\n    return user_id\n\nclass TokenManager:\n    \"\"\"Token management class\"\"\"\n\n    def __init__(self):\n        self.blacklisted_tokens = set()\n\n    def blacklist_token(self, token: str):\n        \"\"\"Add token to blacklist\"\"\"\n        self.blacklisted_tokens.add(token)\n\n    def is_blacklisted(self, token: str) -&gt; bool:\n        \"\"\"Check if token is blacklisted\"\"\"\n        return token in self.blacklisted_tokens\n\n    def create_token_pair(self, user_id: str, user_role: str) -&gt; Dict[str, str]:\n        \"\"\"Create access/refresh token pair\"\"\"\n        access_token_data = {\n            \"sub\": user_id,\n            \"role\": user_role,\n            \"type\": \"access\"\n        }\n\n        access_token = create_access_token(access_token_data)\n        refresh_token = create_refresh_token(user_id)\n\n        return {\n            \"access_token\": access_token,\n            \"refresh_token\": refresh_token,\n            \"token_type\": \"bearer\"\n        }\n\n# Global token manager\ntoken_manager = TokenManager()\n</code></pre>"},{"location":"tutorial/mcp-integration/#user-model-and-database-srcauthmodelspy","title":"User Model and Database (<code>src/auth/models.py</code>)","text":"<pre><code>from typing import List, Optional, Dict, Any\nfrom pydantic import BaseModel, EmailStr\nfrom enum import Enum\nfrom datetime import datetime\n\nclass UserRole(str, Enum):\n    \"\"\"User roles\"\"\"\n    ADMIN = \"admin\"\n    USER = \"user\"\n    AI_AGENT = \"ai_agent\"\n    READONLY = \"readonly\"\n\nclass Permission(str, Enum):\n    \"\"\"Permissions\"\"\"\n    READ_ITEMS = \"read:items\"\n    WRITE_ITEMS = \"write:items\"\n    DELETE_ITEMS = \"delete:items\"\n    MANAGE_USERS = \"manage:users\"\n    USE_MCP_TOOLS = \"use:mcp_tools\"\n    ADMIN_MCP = \"admin:mcp\"\n\nclass User(BaseModel):\n    \"\"\"User model\"\"\"\n    id: str\n    email: EmailStr\n    username: str\n    full_name: Optional[str] = None\n    role: UserRole\n    permissions: List[Permission]\n    is_active: bool = True\n    created_at: datetime\n    last_login: Optional[datetime] = None\n    api_key: Optional[str] = None  # For MCP client\n\nclass UserInDB(User):\n    \"\"\"User model for database storage\"\"\"\n    hashed_password: str\n\nclass UserCreate(BaseModel):\n    \"\"\"User creation schema\"\"\"\n    email: EmailStr\n    username: str\n    password: str\n    full_name: Optional[str] = None\n    role: UserRole = UserRole.USER\n\nclass UserUpdate(BaseModel):\n    \"\"\"User update schema\"\"\"\n    email: Optional[EmailStr] = None\n    username: Optional[str] = None\n    full_name: Optional[str] = None\n    role: Optional[UserRole] = None\n    is_active: Optional[bool] = None\n\nclass LoginRequest(BaseModel):\n    \"\"\"Login request schema\"\"\"\n    username: str\n    password: str\n\nclass TokenResponse(BaseModel):\n    \"\"\"Token response schema\"\"\"\n    access_token: str\n    refresh_token: str\n    token_type: str = \"bearer\"\n    expires_in: int\n    user: User\n\n# Default permission mapping by role\nROLE_PERMISSIONS = {\n    UserRole.ADMIN: [\n        Permission.READ_ITEMS,\n        Permission.WRITE_ITEMS,\n        Permission.DELETE_ITEMS,\n        Permission.MANAGE_USERS,\n        Permission.USE_MCP_TOOLS,\n        Permission.ADMIN_MCP\n    ],\n    UserRole.USER: [\n        Permission.READ_ITEMS,\n        Permission.WRITE_ITEMS,\n        Permission.USE_MCP_TOOLS\n    ],\n    UserRole.AI_AGENT: [\n        Permission.READ_ITEMS,\n        Permission.WRITE_ITEMS,\n        Permission.USE_MCP_TOOLS\n    ],\n    UserRole.READONLY: [\n        Permission.READ_ITEMS\n    ]\n}\n\nclass UserDatabase:\n    \"\"\"Memory-based user database\"\"\"\n\n    def __init__(self):\n        self.users: Dict[str, UserInDB] = {}\n        self._init_default_users()\n\n    def _init_default_users(self):\n        \"\"\"Create default users\"\"\"\n        from src.auth.jwt_handler import get_password_hash\n        import uuid\n\n        # Admin account\n        admin_id = str(uuid.uuid4())\n        self.users[admin_id] = UserInDB(\n            id=admin_id,\n            email=\"admin@example.com\",\n            username=\"admin\",\n            full_name=\"System Administrator\",\n            role=UserRole.ADMIN,\n            permissions=ROLE_PERMISSIONS[UserRole.ADMIN],\n            hashed_password=get_password_hash(\"admin123\"),\n            created_at=datetime.utcnow(),\n            api_key=str(uuid.uuid4())\n        )\n\n        # AI agent account\n        ai_id = str(uuid.uuid4())\n        self.users[ai_id] = UserInDB(\n            id=ai_id,\n            email=\"ai@example.com\",\n            username=\"ai_agent\",\n            full_name=\"AI Assistant\",\n            role=UserRole.AI_AGENT,\n            permissions=ROLE_PERMISSIONS[UserRole.AI_AGENT],\n            hashed_password=get_password_hash(\"ai123\"),\n            created_at=datetime.utcnow(),\n            api_key=str(uuid.uuid4())\n        )\n\n    def get_user_by_username(self, username: str) -&gt; Optional[UserInDB]:\n        \"\"\"Get user by username\"\"\"\n        return next(\n            (user for user in self.users.values() if user.username == username),\n            None\n        )\n\n    def get_user_by_id(self, user_id: str) -&gt; Optional[UserInDB]:\n        \"\"\"Get user by ID\"\"\"\n        return self.users.get(user_id)\n\n    def get_user_by_api_key(self, api_key: str) -&gt; Optional[UserInDB]:\n        \"\"\"Get user by API key\"\"\"\n        return next(\n            (user for user in self.users.values() if user.api_key == api_key),\n            None\n        )\n\n    def create_user(self, user_create: UserCreate) -&gt; UserInDB:\n        \"\"\"Create user\"\"\"\n        import uuid\n        from src.auth.jwt_handler import get_password_hash\n\n        user_id = str(uuid.uuid4())\n        user = UserInDB(\n            id=user_id,\n            email=user_create.email,\n            username=user_create.username,\n            full_name=user_create.full_name,\n            role=user_create.role,\n            permissions=ROLE_PERMISSIONS[user_create.role],\n            hashed_password=get_password_hash(user_create.password),\n            created_at=datetime.utcnow(),\n            api_key=str(uuid.uuid4())\n        )\n\n        self.users[user_id] = user\n        return user\n\n    def update_user(self, user_id: str, user_update: UserUpdate) -&gt; Optional[UserInDB]:\n        \"\"\"Update user\"\"\"\n        if user_id not in self.users:\n            return None\n\n        user = self.users[user_id]\n        update_data = user_update.dict(exclude_unset=True)\n\n        for field, value in update_data.items():\n            setattr(user, field, value)\n\n        # Update permissions if role changed\n        if \"role\" in update_data:\n            user.permissions = ROLE_PERMISSIONS[user.role]\n\n        return user\n\n    def update_last_login(self, user_id: str):\n        \"\"\"Update last login time\"\"\"\n        if user_id in self.users:\n            self.users[user_id].last_login = datetime.utcnow()\n\n# Global database instance\nuser_db = UserDatabase()\n</code></pre>"},{"location":"tutorial/mcp-integration/#step-4-authentication-dependencies-implementation","title":"Step 4: Authentication Dependencies Implementation","text":""},{"location":"tutorial/mcp-integration/#authentication-dependencies-srcauthdependenciespy","title":"Authentication Dependencies (<code>src/auth/dependencies.py</code>)","text":"<pre><code>from typing import Optional, List\nfrom fastapi import Depends, HTTPException, status, Security\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials, APIKeyHeader\nfrom jose import JWTError\n\nfrom src.auth.jwt_handler import decode_token, token_manager\nfrom src.auth.models import User, UserInDB, Permission, user_db\n\n# Security schema\nsecurity = HTTPBearer()\napi_key_header = APIKeyHeader(name=\"X-API-Key\", auto_error=False)\n\nasync def get_current_user(\n    credentials: HTTPAuthorizationCredentials = Security(security)\n) -&gt; User:\n    \"\"\"Get current authenticated user\"\"\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n\n    try:\n        token = credentials.credentials\n\n        # Check blacklist\n        if token_manager.is_blacklisted(token):\n            raise credentials_exception\n\n        payload = decode_token(token)\n        if payload is None:\n            raise credentials_exception\n\n        user_id: str = payload.get(\"sub\")\n        if user_id is None:\n            raise credentials_exception\n\n    except JWTError:\n        raise credentials_exception\n\n    user = user_db.get_user_by_id(user_id)\n    if user is None:\n        raise credentials_exception\n\n    if not user.is_active:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Inactive user\"\n        )\n\n    return User(**user.dict())\n\nasync def get_current_user_by_api_key(\n    api_key: Optional[str] = Security(api_key_header)\n) -&gt; Optional[User]:\n    \"\"\"Authenticate user by API key\"\"\"\n    if not api_key:\n        return None\n\n    user = user_db.get_user_by_api_key(api_key)\n    if not user or not user.is_active:\n        return None\n\n    return User(**user.dict())\n\nasync def get_current_user_flexible(\n    token_user: Optional[User] = Depends(get_current_user),\n    api_key_user: Optional[User] = Depends(get_current_user_by_api_key)\n) -&gt; User:\n    \"\"\"Authenticate user by token or API key (flexible authentication)\"\"\"\n    user = token_user or api_key_user\n\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Authentication required\"\n        )\n\n    return user\n\ndef require_permissions(*required_permissions: Permission):\n    \"\"\"Dependency requiring specific permissions\"\"\"\n    def permission_checker(current_user: User = Depends(get_current_user_flexible)) -&gt; User:\n        for permission in required_permissions:\n            if permission not in current_user.permissions:\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail=f\"Permission '{permission}' required\"\n                )\n        return current_user\n\n    return permission_checker\n\ndef require_roles(*required_roles):\n    \"\"\"Dependency requiring specific roles\"\"\"\n    def role_checker(current_user: User = Depends(get_current_user_flexible)) -&gt; User:\n        if current_user.role not in required_roles:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=f\"Role must be one of: {', '.join(required_roles)}\"\n            )\n        return current_user\n\n    return role_checker\n\n# Common permission dependencies\nRequireAdmin = require_roles(\"admin\")\nRequireReadItems = require_permissions(Permission.READ_ITEMS)\nRequireWriteItems = require_permissions(Permission.WRITE_ITEMS)\nRequireDeleteItems = require_permissions(Permission.DELETE_ITEMS)\nRequireMCPTools = require_permissions(Permission.USE_MCP_TOOLS)\nRequireAdminMCP = require_permissions(Permission.ADMIN_MCP)\n</code></pre>"},{"location":"tutorial/mcp-integration/#authentication-router-srcauthroutespy","title":"Authentication Router (<code>src/auth/routes.py</code>)","text":"<pre><code>from datetime import timedelta\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordRequestForm\n\nfrom src.auth.models import (\n    User, UserCreate, UserUpdate, LoginRequest, TokenResponse,\n    user_db, UserRole\n)\nfrom src.auth.jwt_handler import (\n    verify_password, token_manager, verify_token, create_access_token\n)\nfrom src.auth.dependencies import get_current_user, RequireAdmin\nfrom src.core.config import settings\n\nrouter = APIRouter(prefix=\"/auth\", tags=[\"authentication\"])\n\n@router.post(\"/register\", response_model=User)\nasync def register_user(user_create: UserCreate):\n    \"\"\"Register user\"\"\"\n    # Check duplicate username\n    if user_db.get_user_by_username(user_create.username):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Username already registered\"\n        )\n\n    # First user is automatically set as admin\n    if not user_db.users:\n        user_create.role = UserRole.ADMIN\n\n    user = user_db.create_user(user_create)\n    return User(**user.dict())\n\n@router.post(\"/login\", response_model=TokenResponse)\nasync def login_user(form_data: OAuth2PasswordRequestForm = Depends()):\n    \"\"\"User login\"\"\"\n    user = user_db.get_user_by_username(form_data.username)\n\n    if not user or not verify_password(form_data.password, user.hashed_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    if not user.is_active:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Inactive user\"\n        )\n\n    # Create token\n    tokens = token_manager.create_token_pair(user.id, user.role)\n\n    # Update last login time\n    user_db.update_last_login(user.id)\n\n    return TokenResponse(\n        access_token=tokens[\"access_token\"],\n        refresh_token=tokens[\"refresh_token\"],\n        token_type=tokens[\"token_type\"],\n        expires_in=settings.ACCESS_TOKEN_EXPIRE_MINUTES * 60,\n        user=User(**user.dict())\n    )\n\n@router.post(\"/refresh\", response_model=dict)\nasync def refresh_token(refresh_token: str):\n    \"\"\"Refresh token\"\"\"\n    user_id = verify_token(refresh_token, \"refresh\")\n\n    if not user_id:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid refresh token\"\n        )\n\n    user = user_db.get_user_by_id(user_id)\n    if not user or not user.is_active:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"User not found or inactive\"\n        )\n\n    # Create new token pair\n    tokens = token_manager.create_token_pair(user.id, user.role)\n\n    return {\n        \"access_token\": tokens[\"access_token\"],\n        \"refresh_token\": tokens[\"refresh_token\"],\n        \"token_type\": tokens[\"token_type\"],\n        \"expires_in\": settings.ACCESS_TOKEN_EXPIRE_MINUTES * 60\n    }\n\n@router.post(\"/logout\")\nasync def logout_user(current_user: User = Depends(get_current_user)):\n    \"\"\"User logout\"\"\"\n    # In actual implementation, add token to blacklist\n    return {\"message\": \"Successfully logged out\"}\n\n@router.get(\"/me\", response_model=User)\nasync def get_current_user_info(current_user: User = Depends(get_current_user)):\n    \"\"\"Get current user information\"\"\"\n    return current_user\n\n@router.put(\"/me\", response_model=User)\nasync def update_current_user(\n    user_update: UserUpdate,\n    current_user: User = Depends(get_current_user)\n):\n    \"\"\"Update current user information\"\"\"\n    # Normal users cannot change role\n    if user_update.role and current_user.role != UserRole.ADMIN:\n        user_update.role = None\n\n    updated_user = user_db.update_user(current_user.id, user_update)\n    if not updated_user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"User not found\"\n        )\n\n    return User(**updated_user.dict())\n\n@router.get(\"/users\", response_model=list[User])\nasync def list_users(admin_user: User = Depends(RequireAdmin)):\n    \"\"\"Get user list (admin only)\"\"\"\n    return [User(**user.dict()) for user in user_db.users.values()]\n\n@router.post(\"/users/{user_id}/generate-api-key\")\nasync def generate_api_key(\n    user_id: str,\n    admin_user: User = Depends(RequireAdmin)\n):\n    \"\"\"Create user API key (admin only)\"\"\"\n    import uuid\n\n    user = user_db.get_user_by_id(user_id)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"User not found\"\n        )\n\n    # Create new API key\n    new_api_key = str(uuid.uuid4())\n    user.api_key = new_api_key\n\n    return {\n        \"api_key\": new_api_key,\n        \"message\": \"API key generated successfully\"\n    }\n</code></pre>"},{"location":"tutorial/mcp-integration/#step-5-mcp-server-implementation","title":"Step 5: MCP Server Implementation","text":""},{"location":"tutorial/mcp-integration/#mcp-tool-definition-srcmcptoolspy","title":"MCP Tool Definition (<code>src/mcp/tools.py</code>)","text":"<pre><code>from typing import Dict, Any, List, Optional\nfrom pydantic import BaseModel, Field\nfrom enum import Enum\n\nclass ToolCategory(str, Enum):\n    \"\"\"Tool category\"\"\"\n    DATA_MANAGEMENT = \"data_management\"\n    SEARCH = \"search\"\n    ANALYSIS = \"analysis\"\n    ADMIN = \"admin\"\n\nclass MCPTool(BaseModel):\n    \"\"\"MCP tool definition\"\"\"\n    name: str = Field(..., description=\"Tool name\")\n    description: str = Field(..., description=\"Tool description\")\n    category: ToolCategory = Field(..., description=\"Tool category\")\n    parameters: Dict[str, Any] = Field(default_factory=dict, description=\"Parameter schema\")\n    required_permissions: List[str] = Field(default_factory=list, description=\"Required permissions\")\n    examples: List[Dict[str, Any]] = Field(default_factory=list, description=\"Usage examples\")\n\nclass ToolRegistry:\n    \"\"\"Tool registry\"\"\"\n\n    def __init__(self):\n        self.tools: Dict[str, MCPTool] = {}\n        self._register_default_tools()\n\n    def _register_default_tools(self):\n        \"\"\"Register default tools\"\"\"\n\n        # Create item tool\n        self.register_tool(MCPTool(\n            name=\"create_item\",\n            description=\"Create a new item\",\n            category=ToolCategory.DATA_MANAGEMENT,\n            parameters={\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Item name\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Item description\"\n                    },\n                    \"price\": {\n                        \"type\": \"number\",\n                        \"description\": \"Item price\",\n                        \"minimum\": 0\n                    },\n                    \"category\": {\n                        \"type\": \"string\",\n                        \"description\": \"Item category\"\n                    }\n                },\n                \"required\": [\"name\", \"price\"]\n            },\n            required_permissions=[\"write:items\"],\n            examples=[\n                {\n                    \"name\": \"Notebook\",\n                    \"description\": \"High-performance gaming notebook\",\n                    \"price\": 1500000,\n                    \"category\": \"electronics\"\n                }\n            ]\n        ))\n\n        # Search item tool\n        self.register_tool(MCPTool(\n            name=\"search_items\",\n            description=\"Search for items\",\n            category=ToolCategory.SEARCH,\n            parameters={\n                \"type\": \"object\",\n                \"properties\": {\n                    \"query\": {\n                        \"type\": \"string\",\n                        \"description\": \"Search query\"\n                    },\n                    \"category\": {\n                        \"type\": \"string\",\n                        \"description\": \"Category filter\"\n                    },\n                    \"min_price\": {\n                        \"type\": \"number\",\n                        \"description\": \"Minimum price\"\n                    },\n                    \"max_price\": {\n                        \"type\": \"number\",\n                        \"description\": \"Maximum price\"\n                    },\n                    \"limit\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Result count limit\",\n                        \"default\": 10,\n                        \"maximum\": 100\n                    }\n                },\n                \"required\": [\"query\"]\n            },\n            required_permissions=[\"read:items\"],\n            examples=[\n                {\n                    \"query\": \"Notebook\",\n                    \"category\": \"electronics\",\n                    \"max_price\": 2000000,\n                    \"limit\": 5\n                }\n            ]\n        ))\n\n        # Analyze item tool\n        self.register_tool(MCPTool(\n            name=\"analyze_items\",\n            description=\"Analyze item data\",\n            category=ToolCategory.ANALYSIS,\n            parameters={\n                \"type\": \"object\",\n                \"properties\": {\n                    \"analysis_type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"price_distribution\", \"category_breakdown\", \"trend_analysis\"],\n                        \"description\": \"Analysis type\"\n                    },\n                    \"date_range\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"start_date\": {\"type\": \"string\", \"format\": \"date\"},\n                            \"end_date\": {\"type\": \"string\", \"format\": \"date\"}\n                        },\n                        \"description\": \"Analysis period\"\n                    }\n                },\n                \"required\": [\"analysis_type\"]\n            },\n            required_permissions=[\"read:items\"],\n            examples=[\n                {\n                    \"analysis_type\": \"price_distribution\",\n                    \"date_range\": {\n                        \"start_date\": \"2024-01-01\",\n                        \"end_date\": \"2024-12-31\"\n                    }\n                }\n            ]\n        ))\n\n        # Manage user tool (admin only)\n        self.register_tool(MCPTool(\n            name=\"manage_users\",\n            description=\"Manage users\",\n            category=ToolCategory.ADMIN,\n            parameters={\n                \"type\": \"object\",\n                \"properties\": {\n                    \"action\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"list\", \"create\", \"update\", \"deactivate\"],\n                        \"description\": \"Action to perform\"\n                    },\n                    \"user_data\": {\n                        \"type\": \"object\",\n                        \"description\": \"User data (create/update)\"\n                    },\n                    \"user_id\": {\n                        \"type\": \"string\",\n                        \"description\": \"User ID (update/deactivate)\"\n                    }\n                },\n                \"required\": [\"action\"]\n            },\n            required_permissions=[\"manage:users\"],\n            examples=[\n                {\n                    \"action\": \"list\"\n                },\n                {\n                    \"action\": \"create\",\n                    \"user_data\": {\n                        \"username\": \"newuser\",\n                        \"email\": \"newuser@example.com\",\n                        \"role\": \"user\"\n                    }\n                }\n            ]\n        ))\n\n    def register_tool(self, tool: MCPTool):\n        \"\"\"Register tool\"\"\"\n        self.tools[tool.name] = tool\n\n    def get_tool(self, tool_name: str) -&gt; Optional[MCPTool]:\n        \"\"\"Get tool\"\"\"\n        return self.tools.get(tool_name)\n\n    def list_tools(self, user_permissions: List[str] = None) -&gt; List[MCPTool]:\n        \"\"\"List tools by user permissions\"\"\"\n        if user_permissions is None:\n            return list(self.tools.values())\n\n        available_tools = []\n        for tool in self.tools.values():\n            # Check permissions\n            if all(perm in user_permissions for perm in tool.required_permissions):\n                available_tools.append(tool)\n\n        return available_tools\n\n    def get_tools_by_category(self, category: ToolCategory, user_permissions: List[str] = None) -&gt; List[MCPTool]:\n        \"\"\"List tools by category\"\"\"\n        tools = self.list_tools(user_permissions)\n        return [tool for tool in tools if tool.category == category]\n\n# Global tool registry\ntool_registry = ToolRegistry()\n</code></pre>"},{"location":"tutorial/mcp-integration/#mcp-server-implementation-srcmcpserverpy","title":"MCP Server Implementation (<code>src/mcp/server.py</code>)","text":"<pre><code>from typing import Dict, Any, List, Optional\nfrom fastapi import HTTPException, status\nimport asyncio\nimport json\n\nfrom src.mcp.tools import tool_registry, ToolCategory\nfrom src.auth.models import User, Permission\nfrom src.api.routes.items import ItemCRUD\nfrom src.auth.models import user_db\n\nclass MCPServer:\n    \"\"\"Model Context Protocol server\"\"\"\n\n    def __init__(self):\n        self.item_crud = ItemCRUD()\n        self.active_sessions: Dict[str, Dict[str, Any]] = {}\n\n    async def create_session(self, user: User) -&gt; str:\n        \"\"\"Create MCP session\"\"\"\n        import uuid\n\n        session_id = str(uuid.uuid4())\n        self.active_sessions[session_id] = {\n            \"user_id\": user.id,\n            \"user\": user,\n            \"created_at\": datetime.utcnow(),\n            \"context\": {},\n            \"tool_usage_count\": 0,\n            \"last_activity\": datetime.utcnow()\n        }\n\n        return session_id\n\n    async def get_session(self, session_id: str) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Get session\"\"\"\n        session = self.active_sessions.get(session_id)\n        if session:\n            session[\"last_activity\"] = datetime.utcnow()\n        return session\n\n    async def close_session(self, session_id: str):\n        \"\"\"Close session\"\"\"\n        if session_id in self.active_sessions:\n            del self.active_sessions[session_id]\n\n    async def list_tools(self, user: User) -&gt; List[Dict[str, Any]]:\n        \"\"\"List tools available to user\"\"\"\n        user_permissions = [perm.value for perm in user.permissions]\n        tools = tool_registry.list_tools(user_permissions)\n\n        return [\n            {\n                \"name\": tool.name,\n                \"description\": tool.description,\n                \"category\": tool.category,\n                \"parameters\": tool.parameters,\n                \"examples\": tool.examples\n            }\n            for tool in tools\n        ]\n\n    async def execute_tool(\n        self,\n        tool_name: str,\n        parameters: Dict[str, Any],\n        user: User,\n        session_id: Optional[str] = None\n    ) -&gt; Dict[str, Any]:\n        \"\"\"Execute tool\"\"\"\n\n        # Check if tool exists\n        tool = tool_registry.get_tool(tool_name)\n        if not tool:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=f\"Tool '{tool_name}' not found\"\n            )\n\n        # Check permissions\n        user_permissions = [perm.value for perm in user.permissions]\n        for required_perm in tool.required_permissions:\n            if required_perm not in user_permissions:\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail=f\"Permission '{required_perm}' required for tool '{tool_name}'\"\n                )\n\n        # Update session\n        if session_id:\n            session = await self.get_session(session_id)\n            if session:\n                session[\"tool_usage_count\"] += 1\n\n        # Execute tool\n        try:\n            result = await self._execute_tool_logic(tool_name, parameters, user)\n\n            return {\n                \"success\": True,\n                \"tool\": tool_name,\n                \"result\": result,\n                \"timestamp\": datetime.utcnow().isoformat()\n            }\n\n        except Exception as e:\n            return {\n                \"success\": False,\n                \"tool\": tool_name,\n                \"error\": str(e),\n                \"timestamp\": datetime.utcnow().isoformat()\n            }\n\n    async def _execute_tool_logic(\n        self,\n        tool_name: str,\n        parameters: Dict[str, Any],\n        user: User\n    ) -&gt; Any:\n        \"\"\"Execute tool logic\"\"\"\n\n        if tool_name == \"create_item\":\n            return await self._create_item(parameters)\n\n        elif tool_name == \"search_items\":\n            return await self._search_items(parameters)\n\n        elif tool_name == \"analyze_items\":\n            return await self._analyze_items(parameters)\n\n        elif tool_name == \"manage_users\":\n            return await self._manage_users(parameters, user)\n\n        else:\n            raise ValueError(f\"Tool '{tool_name}' implementation not found\")\n\n    async def _create_item(self, parameters: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Create item tool implementation\"\"\"\n        from src.schemas.items import ItemCreate\n\n        try:\n            item_create = ItemCreate(**parameters)\n            created_item = await self.item_crud.create(item_create)\n\n            return {\n                \"action\": \"create_item\",\n                \"item\": created_item.dict(),\n                \"message\": f\"Item '{created_item.name}' created successfully\"\n            }\n        except Exception as e:\n            raise ValueError(f\"Failed to create item: {str(e)}\")\n\n    async def _search_items(self, parameters: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Search item tool implementation\"\"\"\n        query = parameters.get(\"query\", \"\")\n        category = parameters.get(\"category\")\n        min_price = parameters.get(\"min_price\")\n        max_price = parameters.get(\"max_price\")\n        limit = parameters.get(\"limit\", 10)\n\n        # Search logic implementation\n        all_items = await self.item_crud.get_all()\n        filtered_items = []\n\n        for item in all_items:\n            # Text search\n            if query.lower() not in item.name.lower() and query.lower() not in (item.description or \"\").lower():\n                continue\n\n            # Category filter\n            if category and getattr(item, 'category', None) != category:\n                continue\n\n            # Price filter\n            if min_price is not None and item.price &lt; min_price:\n                continue\n            if max_price is not None and item.price &gt; max_price:\n                continue\n\n            filtered_items.append(item)\n\n        # Result limit\n        result_items = filtered_items[:limit]\n\n        return {\n            \"action\": \"search_items\",\n            \"query\": query,\n            \"total_found\": len(filtered_items),\n            \"returned_count\": len(result_items),\n            \"items\": [item.dict() for item in result_items]\n        }\n\n    async def _analyze_items(self, parameters: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Analyze item tool implementation\"\"\"\n        analysis_type = parameters.get(\"analysis_type\")\n        date_range = parameters.get(\"date_range\", {})\n\n        all_items = await self.item_crud.get_all()\n\n        if analysis_type == \"price_distribution\":\n            prices = [item.price for item in all_items]\n            if not prices:\n                return {\"analysis\": \"price_distribution\", \"result\": \"No items found\"}\n\n            return {\n                \"analysis\": \"price_distribution\",\n                \"result\": {\n                    \"total_items\": len(prices),\n                    \"min_price\": min(prices),\n                    \"max_price\": max(prices),\n                    \"average_price\": sum(prices) / len(prices),\n                    \"price_ranges\": {\n                        \"under_100k\": len([p for p in prices if p &lt; 100000]),\n                        \"100k_to_500k\": len([p for p in prices if 100000 &lt;= p &lt; 500000]),\n                        \"500k_to_1m\": len([p for p in prices if 500000 &lt;= p &lt; 1000000]),\n                        \"over_1m\": len([p for p in prices if p &gt;= 1000000])\n                    }\n                }\n            }\n\n        elif analysis_type == \"category_breakdown\":\n            categories = {}\n            for item in all_items:\n                category = getattr(item, 'category', 'uncategorized')\n                categories[category] = categories.get(category, 0) + 1\n\n            return {\n                \"analysis\": \"category_breakdown\",\n                \"result\": {\n                    \"total_categories\": len(categories),\n                    \"categories\": categories\n                }\n            }\n\n        else:\n            raise ValueError(f\"Unknown analysis type: {analysis_type}\")\n\n    async def _manage_users(self, parameters: Dict[str, Any], requesting_user: User) -&gt; Dict[str, Any]:\n        \"\"\"Manage user tool implementation\"\"\"\n        action = parameters.get(\"action\")\n\n        # Check admin permissions\n        if Permission.MANAGE_USERS not in requesting_user.permissions:\n            raise ValueError(\"Insufficient permissions for user management\")\n\n        if action == \"list\":\n            users = [User(**user.dict()) for user in user_db.users.values()]\n            return {\n                \"action\": \"list_users\",\n                \"total_users\": len(users),\n                \"users\": [user.dict() for user in users]\n            }\n\n        elif action == \"create\":\n            user_data = parameters.get(\"user_data\", {})\n            from src.auth.models import UserCreate\n\n            user_create = UserCreate(**user_data)\n            created_user = user_db.create_user(user_create)\n\n            return {\n                \"action\": \"create_user\",\n                \"user\": User(**created_user.dict()).dict(),\n                \"message\": f\"User '{created_user.username}' created successfully\"\n            }\n\n        else:\n            raise ValueError(f\"Unknown user management action: {action}\")\n\n# Global MCP server instance\nmcp_server = MCPServer()\n</code></pre>"},{"location":"tutorial/mcp-integration/#step-6-mcp-api-endpoint-implementation","title":"Step 6: MCP API Endpoint implementation","text":""},{"location":"tutorial/mcp-integration/#mcp-api-router-srcapiroutesmcppy","title":"MCP API Router (<code>src/api/routes/mcp.py</code>)","text":"<pre><code>from typing import Dict, Any, Optional\nfrom fastapi import APIRouter, Depends, HTTPException, status, BackgroundTasks\nfrom pydantic import BaseModel\n\nfrom src.auth.dependencies import get_current_user_flexible, RequireMCPTools\nfrom src.auth.models import User\nfrom src.mcp.server import mcp_server\nfrom src.mcp.tools import ToolCategory\n\nrouter = APIRouter(prefix=\"/mcp\", tags=[\"MCP\"])\n\nclass ToolExecuteRequest(BaseModel):\n    \"\"\"Tool execution request\"\"\"\n    tool_name: str\n    parameters: Dict[str, Any]\n    session_id: Optional[str] = None\n\nclass SessionCreateResponse(BaseModel):\n    \"\"\"Session creation response\"\"\"\n    session_id: str\n    message: str\n\n@router.post(\"/session\", response_model=SessionCreateResponse)\nasync def create_mcp_session(\n    current_user: User = Depends(RequireMCPTools)\n):\n    \"\"\"Create MCP session\"\"\"\n    session_id = await mcp_server.create_session(current_user)\n\n    return SessionCreateResponse(\n        session_id=session_id,\n        message=f\"MCP session created (User: {current_user.username})\"\n    )\n\n@router.delete(\"/session/{session_id}\")\nasync def close_mcp_session(\n    session_id: str,\n    current_user: User = Depends(RequireMCPTools)\n):\n    \"\"\"Close MCP session\"\"\"\n    session = await mcp_server.get_session(session_id)\n\n    if not session:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Session not found\"\n        )\n\n    # Check session owner\n    if session[\"user_id\"] != current_user.id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Cannot close another user's session\"\n        )\n\n    await mcp_server.close_session(session_id)\n\n    return {\"message\": \"Session closed successfully\"}\n\n@router.get(\"/tools\")\nasync def list_mcp_tools(\n    category: Optional[ToolCategory] = None,\n    current_user: User = Depends(RequireMCPTools)\n):\n    \"\"\"List available MCP tools\"\"\"\n    tools = await mcp_server.list_tools(current_user)\n\n    if category:\n        tools = [tool for tool in tools if tool[\"category\"] == category]\n\n    return {\n        \"user\": current_user.username,\n        \"total_tools\": len(tools),\n        \"tools\": tools\n    }\n\n@router.post(\"/execute\")\nasync def execute_mcp_tool(\n    request: ToolExecuteRequest,\n    background_tasks: BackgroundTasks,\n    current_user: User = Depends(RequireMCPTools)\n):\n    \"\"\"Execute MCP tool\"\"\"\n\n    # Check session (optional)\n    if request.session_id:\n        session = await mcp_server.get_session(request.session_id)\n        if not session:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Session not found\"\n            )\n\n        if session[\"user_id\"] != current_user.id:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"Cannot use another user's session\"\n            )\n\n    # Execute tool\n    result = await mcp_server.execute_tool(\n        tool_name=request.tool_name,\n        parameters=request.parameters,\n        user=current_user,\n        session_id=request.session_id\n    )\n\n    # Log tool usage in background\n    background_tasks.add_task(\n        log_tool_usage,\n        current_user.id,\n        request.tool_name,\n        result[\"success\"]\n    )\n\n    return result\n\n@router.get(\"/sessions\")\nasync def list_user_sessions(\n    current_user: User = Depends(RequireMCPTools)\n):\n    \"\"\"List active user sessions\"\"\"\n    user_sessions = []\n\n    for session_id, session_data in mcp_server.active_sessions.items():\n        if session_data[\"user_id\"] == current_user.id:\n            user_sessions.append({\n                \"session_id\": session_id,\n                \"created_at\": session_data[\"created_at\"],\n                \"tool_usage_count\": session_data[\"tool_usage_count\"],\n                \"last_activity\": session_data[\"last_activity\"]\n            })\n\n    return {\n        \"user\": current_user.username,\n        \"active_sessions\": len(user_sessions),\n        \"sessions\": user_sessions\n    }\n\n@router.get(\"/stats\")\nasync def get_mcp_stats(\n    current_user: User = Depends(RequireMCPTools)\n):\n    \"\"\"MCP usage statistics\"\"\"\n    total_sessions = len(mcp_server.active_sessions)\n    user_sessions = len([\n        s for s in mcp_server.active_sessions.values()\n        if s[\"user_id\"] == current_user.id\n    ])\n\n    return {\n        \"user_stats\": {\n            \"username\": current_user.username,\n            \"active_sessions\": user_sessions,\n            \"permissions\": [perm.value for perm in current_user.permissions]\n        },\n        \"server_stats\": {\n            \"total_active_sessions\": total_sessions,\n            \"available_tools\": len(await mcp_server.list_tools(current_user))\n        }\n    }\n\nasync def log_tool_usage(user_id: str, tool_name: str, success: bool):\n    \"\"\"Log tool usage (background job)\"\"\"\n    import logging\n\n    logger = logging.getLogger(\"mcp.usage\")\n    logger.info(\n        f\"Tool usage - User: {user_id}, Tool: {tool_name}, Success: {success}\"\n    )\n</code></pre>"},{"location":"tutorial/mcp-integration/#step-7-application-integration-and-testing","title":"Step 7: Application Integration and Testing","text":""},{"location":"tutorial/mcp-integration/#main-application-srcmainpy","title":"Main Application (<code>src/main.py</code>)","text":"<pre><code>from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\nfrom src.auth.routes import router as auth_router\nfrom src.api.routes.items import router as items_router\nfrom src.api.routes.mcp import router as mcp_router\nfrom src.core.config import settings\n\napp = FastAPI(\n    title=\"AI Integrated API\",\n    description=\"AI model integrated MCP-based API server\",\n    version=\"1.0.0\"\n)\n\n# CORS settings\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.ALLOWED_HOSTS,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Include routers\napp.include_router(auth_router)\napp.include_router(items_router, prefix=\"/api/v1\")\napp.include_router(mcp_router, prefix=\"/api/v1\")\n\n@app.get(\"/\")\nasync def root():\n    return {\n        \"message\": \"AI Integrated API with MCP Support\",\n        \"version\": \"1.0.0\",\n        \"endpoints\": {\n            \"authentication\": \"/auth\",\n            \"items\": \"/api/v1/items\",\n            \"mcp\": \"/api/v1/mcp\",\n            \"docs\": \"/docs\"\n        }\n    }\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"version\": \"1.0.0\",\n        \"services\": {\n            \"auth\": \"operational\",\n            \"mcp\": \"operational\",\n            \"database\": \"operational\"\n        }\n    }\n</code></pre>"},{"location":"tutorial/mcp-integration/#run-server-and-test","title":"Run server and test","text":"<pre><code>$ cd ai-integrated-api\n$ fastkit runserver\nStarting FastAPI server at 127.0.0.1:8000...\n\n# User login\n$ curl -X POST \"http://localhost:8000/auth/login\" \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d \"username=admin&amp;password=admin123\"\n\n{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 1800,\n  \"user\": {\n    \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"email\": \"admin@example.com\",\n    \"username\": \"admin\",\n    \"role\": \"admin\",\n    \"permissions\": [\"read:items\", \"write:items\", ...]\n  }\n}\n\n# Create MCP session\n$ curl -X POST \"http://localhost:8000/api/v1/mcp/session\" \\\n  -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\"\n\n{\n  \"session_id\": \"abc123-def456-ghi789\",\n  \"message\": \"MCP session created (User: admin)\"\n}\n\n# List available tools\n$ curl \"http://localhost:8000/api/v1/mcp/tools\" \\\n  -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\"\n\n{\n  \"user\": \"admin\",\n  \"total_tools\": 4,\n  \"tools\": [\n    {\n      \"name\": \"create_item\",\n      \"description\": \"Create a new item\",\n      \"category\": \"data_management\",\n      \"parameters\": {...},\n      \"examples\": [...]\n    },\n    ...\n  ]\n}\n\n# Execute MCP tool (create item)\n$ curl -X POST \"http://localhost:8000/api/v1/mcp/execute\" \\\n  -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"tool_name\": \"create_item\",\n    \"parameters\": {\n      \"name\": \"AI generated item\",\n      \"description\": \"MCP through AI generated item\",\n      \"price\": 500000,\n      \"category\": \"ai_generated\"\n    },\n    \"session_id\": \"abc123-def456-ghi789\"\n  }'\n\n{\n  \"success\": true,\n  \"tool\": \"create_item\",\n  \"result\": {\n    \"action\": \"create_item\",\n    \"item\": {\n      \"id\": 1,\n      \"name\": \"AI generated item\",\n      \"description\": \"MCP through AI generated item\",\n      \"price\": 500000,\n      \"category\": \"ai_generated\",\n      \"created_at\": \"2024-01-01T12:00:00Z\"\n    },\n    \"message\": \"Item 'AI generated item' created successfully\"\n  },\n  \"timestamp\": \"2024-01-01T12:00:00.123456Z\"\n}\n\n# Execute MCP tool (search item)\n$ curl -X POST \"http://localhost:8000/api/v1/mcp/execute\" \\\n  -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"tool_name\": \"search_items\",\n    \"parameters\": {\n      \"query\": \"AI\",\n      \"limit\": 5\n    }\n  }'\n</code></pre>"},{"location":"tutorial/mcp-integration/#step-8-ai-client-example","title":"Step 8: AI Client Example","text":""},{"location":"tutorial/mcp-integration/#python-mcp-client-example","title":"Python MCP Client Example","text":"<pre><code># client_example.py\nimport asyncio\nimport aiohttp\nfrom typing import Dict, Any, List\n\nclass MCPClient:\n    \"\"\"MCP client example\"\"\"\n\n    def __init__(self, base_url: str, api_key: str):\n        self.base_url = base_url\n        self.api_key = api_key\n        self.session_id = None\n        self.session = None\n\n    async def __aenter__(self):\n        self.session = aiohttp.ClientSession(\n            headers={\"X-API-Key\": self.api_key}\n        )\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        if self.session_id:\n            await self.close_session()\n        if self.session:\n            await self.session.close()\n\n    async def create_session(self) -&gt; str:\n        \"\"\"Create MCP session\"\"\"\n        async with self.session.post(f\"{self.base_url}/api/v1/mcp/session\") as resp:\n            data = await resp.json()\n            self.session_id = data[\"session_id\"]\n            return self.session_id\n\n    async def close_session(self):\n        \"\"\"Close MCP session\"\"\"\n        if self.session_id:\n            async with self.session.delete(f\"{self.base_url}/api/v1/mcp/session/{self.session_id}\"):\n                pass\n            self.session_id = None\n\n    async def list_tools(self) -&gt; List[Dict[str, Any]]:\n        \"\"\"List available tools\"\"\"\n        async with self.session.get(f\"{self.base_url}/api/v1/mcp/tools\") as resp:\n            data = await resp.json()\n            return data[\"tools\"]\n\n    async def execute_tool(self, tool_name: str, parameters: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Execute tool\"\"\"\n        payload = {\n            \"tool_name\": tool_name,\n            \"parameters\": parameters,\n            \"session_id\": self.session_id\n        }\n\n        async with self.session.post(\n            f\"{self.base_url}/api/v1/mcp/execute\",\n            json=payload\n        ) as resp:\n            return await resp.json()\n\n    async def ai_assistant_workflow(self, user_request: str) -&gt; str:\n        \"\"\"AI assistant workflow simulation\"\"\"\n\n        # 1. Create session\n        await self.create_session()\n        print(f\"Session created: {self.session_id}\")\n\n        # 2. Analyze user request and select appropriate tool\n        if \"Create item\" in user_request or \"Create\" in user_request:\n            # Create item request\n            result = await self.execute_tool(\"create_item\", {\n                \"name\": \"AI recommended item\",\n                \"description\": \"AI generated item based on user request\",\n                \"price\": 100000,\n                \"category\": \"ai_recommended\"\n            })\n\n            if result[\"success\"]:\n                item_name = result[\"result\"][\"item\"][\"name\"]\n                return f\"\u2705 '{item_name}' item created successfully!\"\n            else:\n                return f\"\u274c Item creation failed: {result.get('error', 'Unknown error')}\"\n\n        elif \"Search\" in user_request or \"Find\" in user_request:\n            # Search request\n            search_query = \"Item\"  # Actually extracted from NLP\n            result = await self.execute_tool(\"search_items\", {\n                \"query\": search_query,\n                \"limit\": 5\n            })\n\n            if result[\"success\"]:\n                items = result[\"result\"][\"items\"]\n                item_list = \"\\n\".join([f\"- {item['name']} (\u20a9{item['price']:,})\" for item in items])\n                return f\"\ud83d\udd0d Search results ({len(items)} items):\\n{item_list}\"\n            else:\n                return f\"\u274c Search failed: {result.get('error', 'Unknown error')}\"\n\n        elif \"Analyze\" in user_request:\n            # Analyze request\n            result = await self.execute_tool(\"analyze_items\", {\n                \"analysis_type\": \"price_distribution\"\n            })\n\n            if result[\"success\"]:\n                analysis = result[\"result\"][\"result\"]\n                return f\"\ud83d\udcca Price analysis:\\nAverage price: \u20a9{analysis['average_price']:,.0f}\\nMinimum: \u20a9{analysis['min_price']:,} - Maximum: \u20a9{analysis['max_price']:,}\"\n            else:\n                return f\"\u274c Analysis failed: {result.get('error', 'Unknown error')}\"\n\n        else:\n            return \"Sorry, I couldn't find a tool to handle that request.\"\n\nasync def main():\n    \"\"\"Client test\"\"\"\n    async with MCPClient(\"http://localhost:8000\", \"your-api-key-here\") as client:\n\n        # List available tools\n        tools = await client.list_tools()\n        print(f\"Available tools: {len(tools)}\")\n        for tool in tools:\n            print(f\"- {tool['name']}: {tool['description']}\")\n\n        print(\"\\n\" + \"=\"*50 + \"\\n\")\n\n        # AI assistant simulation\n        test_requests = [\n            \"Create a new item\",\n            \"Search for items\",\n            \"Analyze price distribution\"\n        ]\n\n        for request in test_requests:\n            print(f\"User request: {request}\")\n            response = await client.ai_assistant_workflow(request)\n            print(f\"AI response: {response}\")\n            print(\"-\" * 30)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"tutorial/mcp-integration/#summary","title":"Summary","text":"<p>In this tutorial, we implemented MCP (Model Context Protocol) integration with:</p> <ul> <li>\u2705 JWT-based authentication system construction</li> <li>\u2705 Role-Based Access Control (RBAC) implementation</li> <li>\u2705 MCP server and tool system implementation</li> <li>\u2705 Session-based context management</li> <li>\u2705 Secure API communication with AI models</li> <li>\u2705 Tool permission management and usage tracking</li> <li>\u2705 Real AI client example implementation</li> </ul> <p>Now you can build a complete MCP-based system where AI models can safely and efficiently utilize API functionality!</p>"},{"location":"user-guide/adding-routes/","title":"Adding Routes","text":"<p>Learn how to add new API routes to your existing FastAPI project.</p>"},{"location":"user-guide/adding-routes/#basic-route-addition","title":"Basic Route Addition","text":""},{"location":"user-guide/adding-routes/#using-the-addroute-command","title":"Using the <code>addroute</code> Command","text":"<p>FastAPI-fastkit's <code>addroute</code> command makes it easy to add new routes:</p> <pre><code>$ fastkit addroute my-awesome-api users\n                       Adding New Route\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project          \u2502 my-awesome-api                           \u2502\n\u2502 Route Name       \u2502 users                                    \u2502\n\u2502 Target Directory \u2502 ~/my-awesome-api                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDo you want to add route 'users' to project 'my-awesome-api'? [Y/n]: y\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Info \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2139 Updated main.py to include the API router          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Success \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2728 Successfully added new route 'users' to project    \u2502\n\u2502 `my-awesome-api`                                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"user-guide/adding-routes/#what-gets-created","title":"What Gets Created","text":"<p>When you add a route, FastAPI-fastkit automatically creates:</p>"},{"location":"user-guide/adding-routes/#1-route-file-srcapiroutesuserspy","title":"1. Route File: <code>src/api/routes/users.py</code>","text":"<pre><code>from typing import List\nfrom fastapi import APIRouter, HTTPException, status\nfrom src.schemas.users import User, UserCreate, UserUpdate\nfrom src.crud.users import users_crud\n\nrouter = APIRouter()\n\n@router.get(\"/\", response_model=List[User])\ndef read_users():\n    \"\"\"Get all users\"\"\"\n    return users_crud.get_all()\n\n@router.post(\"/\", response_model=User, status_code=status.HTTP_201_CREATED)\ndef create_user(user: UserCreate):\n    \"\"\"Create a new user\"\"\"\n    return users_crud.create(user)\n\n@router.get(\"/{user_id}\", response_model=User)\ndef read_user(user_id: int):\n    \"\"\"Get a specific user\"\"\"\n    user = users_crud.get_by_id(user_id)\n    if user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user\n\n@router.put(\"/{user_id}\", response_model=User)\ndef update_user(user_id: int, user: UserUpdate):\n    \"\"\"Update a user\"\"\"\n    updated_user = users_crud.update(user_id, user)\n    if updated_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return updated_user\n\n@router.delete(\"/{user_id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_user(user_id: int):\n    \"\"\"Delete a user\"\"\"\n    success = users_crud.delete(user_id)\n    if not success:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n</code></pre>"},{"location":"user-guide/adding-routes/#2-crud-operations-srccruduserspy","title":"2. CRUD Operations: <code>src/crud/users.py</code>","text":"<pre><code>from typing import List, Optional\nfrom src.schemas.users import User, UserCreate, UserUpdate\n\nclass UsersCRUD:\n    def __init__(self):\n        self._users: List[User] = []\n        self._next_id = 1\n\n    def get_all(self) -&gt; List[User]:\n        \"\"\"Get all users\"\"\"\n        return self._users\n\n    def get_by_id(self, user_id: int) -&gt; Optional[User]:\n        \"\"\"Get user by ID\"\"\"\n        return next((user for user in self._users if user.id == user_id), None)\n\n    def create(self, user: UserCreate) -&gt; User:\n        \"\"\"Create a new user\"\"\"\n        new_user = User(\n            id=self._next_id,\n            title=user.title,\n            description=user.description\n        )\n        self._next_id += 1\n        self._users.append(new_user)\n        return new_user\n\n    def update(self, user_id: int, user: UserUpdate) -&gt; Optional[User]:\n        \"\"\"Update an existing user\"\"\"\n        existing_user = self.get_by_id(user_id)\n        if existing_user:\n            update_data = user.dict(exclude_unset=True)\n            for field, value in update_data.items():\n                setattr(existing_user, field, value)\n            return existing_user\n        return None\n\n    def delete(self, user_id: int) -&gt; bool:\n        \"\"\"Delete a user\"\"\"\n        user = self.get_by_id(user_id)\n        if user:\n            self._users.remove(user)\n            return True\n        return False\n\nusers_crud = UsersCRUD()\n</code></pre>"},{"location":"user-guide/adding-routes/#3-pydantic-schemas-srcschemasuserspy","title":"3. Pydantic Schemas: <code>src/schemas/users.py</code>","text":"<pre><code>from typing import Optional\nfrom pydantic import BaseModel\n\nclass UserBase(BaseModel):\n    title: str\n    description: Optional[str] = None\n\nclass UserCreate(UserBase):\n    pass\n\nclass UserUpdate(BaseModel):\n    title: Optional[str] = None\n    description: Optional[str] = None\n\nclass User(UserBase):\n    id: int\n\n    class Config:\n        from_attributes = True\n</code></pre>"},{"location":"user-guide/adding-routes/#4-router-registration","title":"4. Router Registration","text":"<p>The command automatically updates <code>src/api/api.py</code> to include the new router:</p> <pre><code>from fastapi import APIRouter\nfrom src.api.routes import items, users\n\napi_router = APIRouter()\n\napi_router.include_router(items.router, prefix=\"/items\", tags=[\"items\"])\napi_router.include_router(users.router, prefix=\"/users\", tags=[\"users\"])\n</code></pre>"},{"location":"user-guide/adding-routes/#generated-api-endpoints","title":"Generated API Endpoints","text":"<p>After adding the <code>users</code> route, you'll have these endpoints:</p> Method Endpoint Description <code>GET</code> <code>/api/v1/users/</code> Get all users <code>POST</code> <code>/api/v1/users/</code> Create a new user <code>GET</code> <code>/api/v1/users/{user_id}</code> Get a specific user <code>PUT</code> <code>/api/v1/users/{user_id}</code> Update a user <code>DELETE</code> <code>/api/v1/users/{user_id}</code> Delete a user"},{"location":"user-guide/adding-routes/#testing-your-new-routes","title":"Testing Your New Routes","text":""},{"location":"user-guide/adding-routes/#1-start-the-server","title":"1. Start the Server","text":"<pre><code>$ fastkit runserver\nINFO:     Uvicorn running on http://127.0.0.1:8000\n</code></pre>"},{"location":"user-guide/adding-routes/#2-check-api-documentation","title":"2. Check API Documentation","text":"<p>Visit http://127.0.0.1:8000/docs to see your new endpoints in the interactive documentation.</p>"},{"location":"user-guide/adding-routes/#3-test-with-curl","title":"3. Test with curl","text":"<p>Create a user:</p> <pre><code>$ curl -X POST \"http://127.0.0.1:8000/api/v1/users/\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"title\": \"John Doe\", \"description\": \"Software Developer\"}'\n\n{\n  \"id\": 1,\n  \"title\": \"John Doe\",\n  \"description\": \"Software Developer\"\n}\n</code></pre> <p>Get all users:</p> <pre><code>$ curl http://127.0.0.1:8000/api/v1/users/\n\n[\n  {\n    \"id\": 1,\n    \"title\": \"John Doe\",\n    \"description\": \"Software Developer\"\n  }\n]\n</code></pre> <p>Get a specific user:</p> <pre><code>$ curl http://127.0.0.1:8000/api/v1/users/1\n\n{\n  \"id\": 1,\n  \"title\": \"John Doe\",\n  \"description\": \"Software Developer\"\n}\n</code></pre>"},{"location":"user-guide/adding-routes/#customizing-generated-code","title":"Customizing Generated Code","text":"<p>The generated code is fully customizable. Here are common modifications:</p>"},{"location":"user-guide/adding-routes/#1-enhanced-user-schema","title":"1. Enhanced User Schema","text":"<p>Modify <code>src/schemas/users.py</code> for more realistic user data:</p> <pre><code>from typing import Optional\nfrom datetime import datetime\nfrom pydantic import BaseModel, EmailStr, Field\n\nclass UserBase(BaseModel):\n    email: EmailStr\n    username: str = Field(..., min_length=3, max_length=50)\n    full_name: Optional[str] = None\n    is_active: bool = True\n\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8)\n\nclass UserUpdate(BaseModel):\n    email: Optional[EmailStr] = None\n    username: Optional[str] = Field(None, min_length=3, max_length=50)\n    full_name: Optional[str] = None\n    is_active: Optional[bool] = None\n\nclass User(UserBase):\n    id: int\n    created_at: datetime\n\n    class Config:\n        from_attributes = True\n\nclass UserInDB(User):\n    hashed_password: str\n</code></pre>"},{"location":"user-guide/adding-routes/#2-enhanced-crud-with-validation","title":"2. Enhanced CRUD with Validation","text":"<p>Update <code>src/crud/users.py</code> with better validation:</p> <pre><code>from typing import List, Optional\nfrom datetime import datetime\nimport hashlib\nfrom src.schemas.users import UserCreate, UserUpdate, UserInDB\n\nclass UsersCRUD:\n    def __init__(self):\n        self._users: List[UserInDB] = []\n        self._next_id = 1\n\n    def _hash_password(self, password: str) -&gt; str:\n        \"\"\"Simple password hashing (use bcrypt in production)\"\"\"\n        return hashlib.sha256(password.encode()).hexdigest()\n\n    def get_by_email(self, email: str) -&gt; Optional[UserInDB]:\n        \"\"\"Get user by email\"\"\"\n        return next((user for user in self._users if user.email == email), None)\n\n    def get_by_username(self, username: str) -&gt; Optional[UserInDB]:\n        \"\"\"Get user by username\"\"\"\n        return next((user for user in self._users if user.username == username), None)\n\n    def create(self, user: UserCreate) -&gt; UserInDB:\n        \"\"\"Create a new user with validation\"\"\"\n        # Check for duplicates\n        if self.get_by_email(user.email):\n            raise ValueError(\"Email already registered\")\n        if self.get_by_username(user.username):\n            raise ValueError(\"Username already taken\")\n\n        new_user = UserInDB(\n            id=self._next_id,\n            email=user.email,\n            username=user.username,\n            full_name=user.full_name,\n            is_active=user.is_active,\n            created_at=datetime.now(),\n            hashed_password=self._hash_password(user.password)\n        )\n        self._next_id += 1\n        self._users.append(new_user)\n        return new_user\n\nusers_crud = UsersCRUD()\n</code></pre>"},{"location":"user-guide/adding-routes/#3-enhanced-route-with-error-handling","title":"3. Enhanced Route with Error Handling","text":"<p>Update <code>src/api/routes/users.py</code> with better error handling:</p> <pre><code>from typing import List\nfrom fastapi import APIRouter, HTTPException, status\nfrom src.schemas.users import User, UserCreate, UserUpdate\nfrom src.crud.users import users_crud\n\nrouter = APIRouter()\n\n@router.post(\"/\", response_model=User, status_code=status.HTTP_201_CREATED)\ndef create_user(user: UserCreate):\n    \"\"\"Create a new user\"\"\"\n    try:\n        new_user = users_crud.create(user)\n        # Return user without password hash\n        return User(**new_user.dict())\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.get(\"/{user_id}\", response_model=User)\ndef read_user(user_id: int):\n    \"\"\"Get a specific user\"\"\"\n    user = users_crud.get_by_id(user_id)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"User with id {user_id} not found\"\n        )\n    return User(**user.dict())\n</code></pre>"},{"location":"user-guide/adding-routes/#adding-multiple-routes","title":"Adding Multiple Routes","text":"<p>You can add multiple routes to build a complete API:</p> <pre><code># Add more resource routes\n$ fastkit addroute my-awesome-api products\n$ fastkit addroute my-awesome-api orders\n$ fastkit addroute my-awesome-api categories\n\n# Each creates the full CRUD structure\n</code></pre> <p>This creates a comprehensive API with: - <code>/api/v1/users/</code> - User management - <code>/api/v1/products/</code> - Product catalog - <code>/api/v1/orders/</code> - Order processing - <code>/api/v1/categories/</code> - Category management</p>"},{"location":"user-guide/adding-routes/#route-organization","title":"Route Organization","text":""},{"location":"user-guide/adding-routes/#grouping-related-endpoints","title":"Grouping Related Endpoints","text":"<p>You can organize routes by domain:</p> <pre><code># src/api/api.py\nfrom fastapi import APIRouter\nfrom src.api.routes import users, products, orders, categories\n\napi_router = APIRouter()\n\n# User management\napi_router.include_router(\n    users.router,\n    prefix=\"/users\",\n    tags=[\"User Management\"]\n)\n\n# E-commerce\napi_router.include_router(\n    products.router,\n    prefix=\"/products\",\n    tags=[\"E-commerce\"]\n)\napi_router.include_router(\n    orders.router,\n    prefix=\"/orders\",\n    tags=[\"E-commerce\"]\n)\napi_router.include_router(\n    categories.router,\n    prefix=\"/categories\",\n    tags=[\"E-commerce\"]\n)\n</code></pre>"},{"location":"user-guide/adding-routes/#adding-route-dependencies","title":"Adding Route Dependencies","text":"<p>Add authentication or other dependencies:</p> <pre><code>from fastapi import APIRouter, Depends\nfrom src.core.auth import get_current_user\n\nrouter = APIRouter()\n\n@router.get(\"/profile\", response_model=User)\ndef get_user_profile(current_user: User = Depends(get_current_user)):\n    \"\"\"Get current user's profile\"\"\"\n    return current_user\n\n@router.post(\"/\", response_model=User)\ndef create_user(\n    user: UserCreate,\n    current_user: User = Depends(get_current_user)\n):\n    \"\"\"Create a new user (admin only)\"\"\"\n    if not current_user.is_admin:\n        raise HTTPException(status_code=403, detail=\"Admin access required\")\n    return users_crud.create(user)\n</code></pre>"},{"location":"user-guide/adding-routes/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/adding-routes/#1-consistent-naming","title":"1. Consistent Naming","text":"<p>Follow consistent naming conventions: - Route names: Use plural nouns (<code>users</code>, <code>products</code>, <code>orders</code>) - Schema names: Use singular (<code>User</code>, <code>Product</code>, <code>Order</code>) - CRUD classes: End with <code>CRUD</code> (<code>UsersCRUD</code>, <code>ProductsCRUD</code>)</p>"},{"location":"user-guide/adding-routes/#2-error-handling","title":"2. Error Handling","text":"<p>Always handle errors gracefully:</p> <pre><code>@router.post(\"/\", response_model=User)\ndef create_user(user: UserCreate):\n    try:\n        return users_crud.create(user)\n    except ValueError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=\"Internal server error\")\n</code></pre>"},{"location":"user-guide/adding-routes/#3-documentation","title":"3. Documentation","text":"<p>Add comprehensive docstrings:</p> <pre><code>@router.get(\"/{user_id}\", response_model=User)\ndef read_user(user_id: int):\n    \"\"\"\n    Get a specific user by ID.\n\n    Args:\n        user_id: The unique identifier for the user\n\n    Returns:\n        User: The user object with all details\n\n    Raises:\n        HTTPException: 404 if user not found\n    \"\"\"\n    user = users_crud.get_by_id(user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user\n</code></pre>"},{"location":"user-guide/adding-routes/#4-testing","title":"4. Testing","text":"<p>Always test your new routes:</p> <pre><code># tests/test_users.py\nfrom fastapi.testclient import TestClient\nfrom src.main import app\n\nclient = TestClient(app)\n\ndef test_create_user():\n    user_data = {\n        \"email\": \"test@example.com\",\n        \"username\": \"testuser\",\n        \"password\": \"securepassword123\"\n    }\n    response = client.post(\"/api/v1/users/\", json=user_data)\n    assert response.status_code == 201\n    assert response.json()[\"email\"] == user_data[\"email\"]\n\ndef test_get_user():\n    response = client.get(\"/api/v1/users/1\")\n    assert response.status_code == 200\n</code></pre>"},{"location":"user-guide/adding-routes/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/adding-routes/#route-not-appearing","title":"Route Not Appearing","text":"<p>If your route doesn't appear in the API documentation:</p> <ol> <li>Check router registration in <code>src/api/api.py</code></li> <li>Restart the server after adding routes</li> <li>Check for import errors in the route file</li> </ol>"},{"location":"user-guide/adding-routes/#import-errors","title":"Import Errors","text":"<p>If you get import errors:</p> <ol> <li>Check file structure matches the expected layout</li> <li>Verify schema imports in route and CRUD files</li> <li>Ensure all <code>__init__.py</code> files exist</li> </ol>"},{"location":"user-guide/adding-routes/#server-wont-start","title":"Server Won't Start","text":"<p>If the server fails to start after adding routes:</p> <ol> <li>Check syntax errors in generated files</li> <li>Verify schema compatibility between files</li> <li>Check logs for specific error messages</li> </ol>"},{"location":"user-guide/adding-routes/#next-steps","title":"Next Steps","text":"<p>Now that you know how to add routes:</p> <ol> <li>Your First Project: Build a complete blog API</li> <li>CLI Reference: Learn all available commands</li> <li>Using Templates: Explore pre-built project templates</li> </ol> <p>Route Development Tips</p> <ul> <li>Always test new routes in the interactive docs (<code>/docs</code>)</li> <li>Use meaningful HTTP status codes</li> <li>Implement proper error handling for all endpoints</li> <li>Keep route handlers simple and delegate business logic to CRUD classes</li> </ul>"},{"location":"user-guide/cli-reference/","title":"CLI Reference","text":"<p>Complete reference for all FastAPI-fastkit command-line interface commands.</p>"},{"location":"user-guide/cli-reference/#global-options","title":"Global Options","text":"<p>All commands support these global options:</p> <pre><code>$ fastkit [GLOBAL_OPTIONS] COMMAND [COMMAND_OPTIONS]\n</code></pre>"},{"location":"user-guide/cli-reference/#global-options_1","title":"Global Options","text":"Option Description <code>--version</code> Show FastAPI-fastkit version <code>--help</code> Show help message"},{"location":"user-guide/cli-reference/#examples","title":"Examples","text":"<pre><code>$ fastkit --version\nFastAPI-fastkit version 1.0.0\n\n$ fastkit --help\nUsage: fastkit [OPTIONS] COMMAND [ARGS]...\n\n  FastAPI-fastkit CLI\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  addroute       Add a new route to FastAPI project\n  init           Create a new FastAPI project\n  list-templates List available FastAPI templates\n  runserver      Start FastAPI development server\n  startdemo      Create FastAPI project from template\n</code></pre>"},{"location":"user-guide/cli-reference/#commands","title":"Commands","text":""},{"location":"user-guide/cli-reference/#init","title":"<code>init</code>","text":"<p>Create a new FastAPI project with interactive setup.</p>"},{"location":"user-guide/cli-reference/#syntax","title":"Syntax","text":"<pre><code>$ fastkit init [OPTIONS]\n</code></pre>"},{"location":"user-guide/cli-reference/#options","title":"Options","text":"Option Description Default <code>--package-manager</code> Package manager to use (pip, uv, pdm, poetry) uv <code>--help</code> Show command help -"},{"location":"user-guide/cli-reference/#interactive-prompts","title":"Interactive Prompts","text":"<p>The <code>init</code> command will prompt you for:</p> <ol> <li>Project name: Directory name and package name</li> <li>Author name: Package author information</li> <li>Author email: Contact email for package</li> <li>Project description: Brief description of the project</li> <li>Stack selection: Choose from minimal, standard, or full</li> <li>Package manager selection: Choose from pip, uv, pdm, or poetry (unless specified with <code>--package-manager</code>)</li> </ol>"},{"location":"user-guide/cli-reference/#stack-options","title":"Stack Options","text":"<p>MINIMAL Stack:</p> <ul> <li><code>fastapi</code> - FastAPI framework</li> <li><code>uvicorn</code> - ASGI server</li> <li><code>pydantic</code> - Data validation</li> <li><code>pydantic-settings</code> - Configuration management</li> </ul> <p>STANDARD Stack:</p> <ul> <li>All MINIMAL stack packages</li> <li><code>sqlalchemy</code> - SQL toolkit and ORM</li> <li><code>alembic</code> - Database migration tool</li> <li><code>pytest</code> - Testing framework</li> </ul> <p>FULL Stack:</p> <ul> <li>All STANDARD stack packages</li> <li><code>redis</code> - In-memory data store</li> <li><code>celery</code> - Distributed task queue</li> </ul>"},{"location":"user-guide/cli-reference/#examples_1","title":"Examples","text":"<pre><code>$ fastkit init\nEnter the project name: my-api\nEnter the author name: John Doe\nEnter the author email: john@example.com\nEnter the project description: My awesome API\n\nSelect stack (minimal, standard, full): standard\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\n\n\u2728 FastAPI project 'my-api' has been created successfully!\n</code></pre>"},{"location":"user-guide/cli-reference/#generated-structure","title":"Generated Structure","text":"<p>Creates a project with this structure:</p> <pre><code>my-api/\n\u251c\u2500\u2500 .venv/                    # Virtual environment\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py              # FastAPI application\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 config.py        # Configuration\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 api.py          # API router collection\n\u2502   \u2502   \u2514\u2500\u2500 routes/\n\u2502   \u2502       \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u2514\u2500\u2500 items.py     # Example route\n\u2502   \u251c\u2500\u2500 crud/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 items.py         # CRUD operations\n\u2502   \u251c\u2500\u2500 schemas/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 items.py         # Pydantic schemas\n\u2502   \u2514\u2500\u2500 mocks/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 mock_items.json  # Test data\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 scripts/\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"user-guide/cli-reference/#addroute","title":"<code>addroute</code>","text":"<p>Add a new API route to an existing FastAPI project.</p>"},{"location":"user-guide/cli-reference/#syntax_1","title":"Syntax","text":"<pre><code>$ fastkit addroute PROJECT_NAME ROUTE_NAME [OPTIONS]\n</code></pre>"},{"location":"user-guide/cli-reference/#arguments","title":"Arguments","text":"Argument Description Required <code>PROJECT_NAME</code> Name of the existing project Yes <code>ROUTE_NAME</code> Name of the new route (plural recommended) Yes"},{"location":"user-guide/cli-reference/#options_1","title":"Options","text":"Option Description Default <code>--help</code> Show command help -"},{"location":"user-guide/cli-reference/#examples_2","title":"Examples","text":"<pre><code>$ fastkit addroute my-api users\n                       Adding New Route\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project          \u2502 my-api                                   \u2502\n\u2502 Route Name       \u2502 users                                    \u2502\n\u2502 Target Directory \u2502 ~/my-api                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDo you want to add route 'users' to project 'my-api'? [Y/n]: y\n\n\u2728 Successfully added new route 'users' to project 'my-api'\n</code></pre>"},{"location":"user-guide/cli-reference/#generated-files","title":"Generated Files","text":"<p>Creates these files in the project:</p> <ul> <li><code>src/api/routes/users.py</code> - Route handlers</li> <li><code>src/crud/users.py</code> - CRUD operations</li> <li><code>src/schemas/users.py</code> - Pydantic schemas</li> </ul> <p>Also updates <code>src/api/api.py</code> to include the new router.</p>"},{"location":"user-guide/cli-reference/#generated-endpoints","title":"Generated Endpoints","text":"<p>Creates full CRUD endpoints:</p> Method Endpoint Description <code>GET</code> <code>/api/v1/users/</code> Get all users <code>POST</code> <code>/api/v1/users/</code> Create new user <code>GET</code> <code>/api/v1/users/{user_id}</code> Get specific user <code>PUT</code> <code>/api/v1/users/{user_id}</code> Update user <code>DELETE</code> <code>/api/v1/users/{user_id}</code> Delete user"},{"location":"user-guide/cli-reference/#startdemo","title":"<code>startdemo</code>","text":"<p>Create a FastAPI project from a pre-built template.</p>"},{"location":"user-guide/cli-reference/#syntax_2","title":"Syntax","text":"<pre><code>$ fastkit startdemo [OPTIONS]\n</code></pre>"},{"location":"user-guide/cli-reference/#options_2","title":"Options","text":"Option Description Default <code>--package-manager</code> Package manager to use (pip, uv, pdm, poetry) uv <code>--help</code> Show command help -"},{"location":"user-guide/cli-reference/#interactive-prompts_1","title":"Interactive Prompts","text":"<p>The <code>startdemo</code> command will prompt you for:</p> <ol> <li>Project name: Directory name for the new project</li> <li>Author name: Package author information</li> <li>Author email: Contact email</li> <li>Project description: Brief description</li> <li>Package manager selection: Choose from pip, uv, pdm, or poetry (unless specified with <code>--package-manager</code>)</li> </ol>"},{"location":"user-guide/cli-reference/#available-templates","title":"Available Templates","text":"Template Description Features <code>fastapi-default</code> Simple FastAPI Project Basic CRUD, Mock data <code>fastapi-async-crud</code> Async Item Management API Async/await, Performance <code>fastapi-custom-response</code> Custom Response System Custom responses, Pagination <code>fastapi-dockerized</code> Dockerized FastAPI API Docker, Production ready <code>fastapi-psql-orm</code> PostgreSQL FastAPI API PostgreSQL, SQLAlchemy, Alembic <code>fastapi-empty</code> Minimal FastAPI Project Bare minimum setup"},{"location":"user-guide/cli-reference/#examples_3","title":"Examples","text":"<pre><code>$ fastkit startdemo fastapi-psql-orm\nEnter the project name: my-blog\nEnter the author name: Jane Smith\nEnter the author email: jane@example.com\nEnter the project description: Blog API with PostgreSQL\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: poetry\nDo you want to proceed with project creation? [y/N]: y\n\n\u2728 FastAPI project 'my-blog' from 'fastapi-psql-orm' has been created!\n</code></pre>"},{"location":"user-guide/cli-reference/#runserver","title":"<code>runserver</code>","text":"<p>Start the FastAPI development server.</p>"},{"location":"user-guide/cli-reference/#syntax_3","title":"Syntax","text":"<pre><code>$ fastkit runserver [OPTIONS]\n</code></pre>"},{"location":"user-guide/cli-reference/#options_3","title":"Options","text":"Option Short Description Default <code>--host</code> <code>-h</code> Host to bind to <code>127.0.0.1</code> <code>--port</code> <code>-p</code> Port to bind to <code>8000</code> <code>--reload</code> <code>-r</code> Enable auto-reload <code>True</code> <code>--workers</code> <code>-w</code> Number of workers <code>1</code> <code>--help</code> Show command help -"},{"location":"user-guide/cli-reference/#examples_4","title":"Examples","text":"<pre><code># Basic usage (default settings)\n$ fastkit runserver\nINFO:     Uvicorn running on http://127.0.0.1:8000\n\n# Custom host and port\n$ fastkit runserver --host 0.0.0.0 --port 8080\nINFO:     Uvicorn running on http://0.0.0.0:8080\n\n# Disable auto-reload\n$ fastkit runserver --no-reload\nINFO:     Uvicorn running on http://127.0.0.1:8000\n\n# Multiple workers (production)\n$ fastkit runserver --workers 4\nINFO:     Uvicorn running on http://127.0.0.1:8000\n</code></pre>"},{"location":"user-guide/cli-reference/#requirements","title":"Requirements","text":"<ul> <li>Must be run from a FastAPI project directory</li> <li>Project must have <code>src/main.py</code> with FastAPI app</li> <li>Virtual environment should be activated</li> </ul>"},{"location":"user-guide/cli-reference/#list-templates","title":"<code>list-templates</code>","text":"<p>List all available FastAPI project templates.</p>"},{"location":"user-guide/cli-reference/#syntax_4","title":"Syntax","text":"<pre><code>$ fastkit list-templates [OPTIONS]\n</code></pre>"},{"location":"user-guide/cli-reference/#options_4","title":"Options","text":"Option Description Default <code>--help</code> Show command help -"},{"location":"user-guide/cli-reference/#examples_5","title":"Examples","text":"<pre><code>$ fastkit list-templates\n                      Available Templates\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 fastapi-custom-response \u2502 Async Item Management API with    \u2502\n\u2502                         \u2502 Custom Response System            \u2502\n\u2502 fastapi-dockerized      \u2502 Dockerized FastAPI Item           \u2502\n\u2502                         \u2502 Management API                    \u2502\n\u2502 fastapi-empty           \u2502 No description                    \u2502\n\u2502 fastapi-async-crud      \u2502 Async Item Management API Server  \u2502\n\u2502 fastapi-psql-orm        \u2502 Dockerized FastAPI Item           \u2502\n\u2502                         \u2502 Management API with PostgreSQL    \u2502\n\u2502 fastapi-default         \u2502 Simple FastAPI Project            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/cli-reference/#environment-variables","title":"Environment Variables","text":"<p>FastAPI-fastkit respects these environment variables:</p> Variable Description Default <code>FASTKIT_CONFIG_DIR</code> Configuration directory <code>~/.fastkit</code> <code>FASTKIT_TEMPLATES_DIR</code> Custom templates directory Built-in templates <code>FASTKIT_LOG_LEVEL</code> Logging level <code>INFO</code>"},{"location":"user-guide/cli-reference/#examples_6","title":"Examples","text":"<pre><code># Custom configuration directory\n$ export FASTKIT_CONFIG_DIR=~/my-fastkit-config\n$ fastkit init\n\n# Custom templates directory\n$ export FASTKIT_TEMPLATES_DIR=~/my-templates\n$ fastkit list-templates\n\n# Debug logging\n$ export FASTKIT_LOG_LEVEL=DEBUG\n$ fastkit init\n</code></pre>"},{"location":"user-guide/cli-reference/#configuration-files","title":"Configuration Files","text":"<p>FastAPI-fastkit can use configuration files for default settings.</p>"},{"location":"user-guide/cli-reference/#configuration-file-location","title":"Configuration File Location","text":"<ol> <li><code>$FASTKIT_CONFIG_DIR/config.yaml</code> (if <code>FASTKIT_CONFIG_DIR</code> is set)</li> <li><code>~/.fastkit/config.yaml</code> (default)</li> <li><code>./fastkit.yaml</code> (project-specific)</li> </ol>"},{"location":"user-guide/cli-reference/#configuration-format","title":"Configuration Format","text":"<pre><code># ~/.fastkit/config.yaml\ndefault:\n  author:\n    name: \"Your Name\"\n    email: \"your.email@example.com\"\n\n  project:\n    stack: \"standard\"\n    create_venv: true\n    install_deps: true\n\n  server:\n    host: \"127.0.0.1\"\n    port: 8000\n    reload: true\n\ntemplates:\n  custom_dir: \"~/my-templates\"\n\nlogging:\n  level: \"INFO\"\n  file: \"~/.fastkit/logs/fastkit.log\"\n</code></pre>"},{"location":"user-guide/cli-reference/#common-workflows","title":"Common Workflows","text":""},{"location":"user-guide/cli-reference/#1-create-new-project","title":"1. Create New Project","text":"<pre><code># Create a new project\n$ fastkit init\n# Follow prompts...\n\n# Navigate to project\n$ cd my-awesome-api\n\n# Activate virtual environment\n$ source .venv/bin/activate\n\n# Start development server\n$ fastkit runserver\n</code></pre>"},{"location":"user-guide/cli-reference/#2-add-features-to-existing-project","title":"2. Add Features to Existing Project","text":"<pre><code># Add multiple routes\n$ fastkit addroute my-api users\n$ fastkit addroute my-api products\n$ fastkit addroute my-api orders\n\n# Test the API\n$ fastkit runserver\n# Visit http://127.0.0.1:8000/docs\n</code></pre>"},{"location":"user-guide/cli-reference/#3-use-templates-for-complex-projects","title":"3. Use Templates for Complex Projects","text":"<pre><code># List available templates\n$ fastkit list-templates\n\n# Create from template\n$ fastkit startdemo\n# Select fastapi-psql-orm for database project\n\n# Setup database (for PostgreSQL template)\n$ cd my-project\n$ docker-compose up -d postgres\n$ source .venv/bin/activate\n$ alembic upgrade head\n$ fastkit runserver\n</code></pre>"},{"location":"user-guide/cli-reference/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/cli-reference/#command-not-found","title":"Command Not Found","text":"<p>If <code>fastkit</code> command is not found:</p> <ol> <li> <p>Check installation: <pre><code>$ pip show fastapi-fastkit\n</code></pre> </p> </li> <li> <p>Reinstall if needed: <pre><code>$ pip uninstall fastapi-fastkit\n$ pip install fastapi-fastkit\n</code></pre> </p> </li> <li> <p>Check PATH: <pre><code>$ which fastkit\n</code></pre> </p> </li> </ol>"},{"location":"user-guide/cli-reference/#virtual-environment-issues","title":"Virtual Environment Issues","text":"<p>If virtual environment creation fails:</p> <ol> <li> <p>Check Python version: <pre><code>$ python --version  # Should be 3.12+\n</code></pre> </p> </li> <li> <p>Check venv module: <pre><code>$ python -m venv --help\n</code></pre> </p> </li> <li> <p>Manual virtual environment: <pre><code>$ python -m venv .venv\n$ source .venv/bin/activate\n$ pip install -r requirements.txt\n</code></pre> </p> </li> </ol>"},{"location":"user-guide/cli-reference/#server-wont-start","title":"Server Won't Start","text":"<p>If <code>fastkit runserver</code> fails:</p> <ol> <li>Check you're in project directory</li> <li>Verify <code>src/main.py</code> exists</li> <li> <p>Activate virtual environment: <pre><code>$ source .venv/bin/activate\n</code></pre> </p> </li> <li> <p>Check for syntax errors: <pre><code>$ python -c \"from src.main import app\"\n</code></pre> </p> </li> </ol>"},{"location":"user-guide/cli-reference/#port-already-in-use","title":"Port Already in Use","text":"<p>If port 8000 is busy:</p> <pre><code># Use different port\n$ fastkit runserver --port 8080\n\n# Or kill existing process\n$ lsof -ti:8000 | xargs kill -9\n</code></pre>"},{"location":"user-guide/cli-reference/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user-guide/cli-reference/#custom-templates","title":"Custom Templates","text":"<p>You can create custom templates by:</p> <ol> <li> <p>Creating template directory: <pre><code>my-template/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 main.py-tpl\n\u251c\u2500\u2500 requirements.txt-tpl\n\u2514\u2500\u2500 setup.py-tpl\n</code></pre></p> </li> <li> <p>Setting environment variable: <pre><code>$ export FASTKIT_TEMPLATES_DIR=~/my-templates\n</code></pre> </p> </li> <li> <p>Using custom template: <pre><code>$ fastkit startdemo\n# Your custom templates will appear in the list\n</code></pre> </p> </li> </ol>"},{"location":"user-guide/cli-reference/#scripting-with-fastapi-fastkit","title":"Scripting with FastAPI-fastkit","text":"<p>You can use FastAPI-fastkit in scripts:</p> <pre><code>#!/bin/bash\n# create-microservices.sh\n\nfor service in users products orders; do\n    echo \"Creating $service service...\"\n    fastkit init &lt;&lt;EOF\n$service-service\nCompany Team\nteam@company.com\n$service microservice\nminimal\ny\nEOF\n\n    cd \"$service-service\"\n    fastkit addroute \"$service-service\" \"$service\"\n    cd ..\ndone\n</code></pre>"},{"location":"user-guide/cli-reference/#integration-with-cicd","title":"Integration with CI/CD","text":"<p>Example GitHub Actions workflow:</p> <pre><code>name: Test FastAPI-fastkit Project\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.12'\n\n    - name: Install FastAPI-fastkit\n      run: pip install fastapi-fastkit\n\n    - name: Create test project\n      run: |\n        fastkit init &lt;&lt;EOF\n        test-project\n        CI\n        ci@example.com\n        Test project\n        standard\n        y\n        EOF\n\n    - name: Test project\n      run: |\n        cd test-project\n        source .venv/bin/activate\n        python -m pytest\n</code></pre>"},{"location":"user-guide/cli-reference/#package-manager-support","title":"Package Manager Support","text":"<p>FastAPI-fastkit supports multiple Python package managers, allowing you to choose the one that best fits your workflow.</p>"},{"location":"user-guide/cli-reference/#supported-package-managers","title":"Supported Package Managers","text":"Manager Description Dependency File Best For UV (default) Fast Python package manager <code>pyproject.toml</code> Speed and performance PDM Modern Python dependency management <code>pyproject.toml</code> Advanced dependency resolution Poetry Python dependency management and packaging <code>pyproject.toml</code> Poetry-based workflows PIP Standard Python package manager <code>requirements.txt</code> Traditional Python development"},{"location":"user-guide/cli-reference/#specifying-package-manager","title":"Specifying Package Manager","text":""},{"location":"user-guide/cli-reference/#global-configuration","title":"Global Configuration","text":"<p>You can set your preferred package manager for all projects:</p> <pre><code># Using command line options\n$ fastkit init --package-manager poetry\n$ fastkit startdemo --package-manager pdm\n</code></pre>"},{"location":"user-guide/cli-reference/#project-specific-selection","title":"Project-specific Selection","text":"<p>Each project can use a different package manager. The choice is made during project creation and affects:</p> <ul> <li>Dependency file format: Each manager creates its appropriate files</li> <li>Virtual environment management: Different activation methods</li> <li>Dependency installation: Manager-specific commands</li> </ul>"},{"location":"user-guide/cli-reference/#package-manager-features","title":"Package Manager Features","text":""},{"location":"user-guide/cli-reference/#uv-default","title":"UV (Default)","text":"<ul> <li>Fast: Rust-based, extremely fast dependency resolution</li> <li>Compatible: Drop-in replacement for pip and pip-tools</li> <li>Modern: Support for PEP 621 project metadata</li> </ul> <pre><code>$ fastkit init --package-manager uv\n# Creates pyproject.toml with UV configuration\n</code></pre>"},{"location":"user-guide/cli-reference/#pdm","title":"PDM","text":"<ul> <li>Modern: PEP 582 and PEP 621 support</li> <li>Advanced: Sophisticated dependency resolution</li> <li>Flexible: Multiple project layouts</li> </ul> <pre><code>$ fastkit init --package-manager pdm\n# Creates pyproject.toml with PDM configuration\n</code></pre>"},{"location":"user-guide/cli-reference/#poetry","title":"Poetry","text":"<ul> <li>Established: Mature and widely adopted</li> <li>Integrated: Build and publish support</li> <li>Lockfile: poetry.lock for reproducible builds</li> </ul> <pre><code>$ fastkit init --package-manager poetry\n# Creates pyproject.toml with Poetry configuration\n</code></pre>"},{"location":"user-guide/cli-reference/#pip","title":"PIP","text":"<ul> <li>Standard: Built into Python</li> <li>Compatible: Works everywhere</li> <li>Simple: Straightforward dependency management</li> </ul> <pre><code>$ fastkit init --package-manager pip\n# Creates requirements.txt\n</code></pre>"},{"location":"user-guide/cli-reference/#working-with-projects","title":"Working with Projects","text":"<p>After creating a project with a specific package manager:</p>"},{"location":"user-guide/cli-reference/#uv-projects","title":"UV Projects","text":"<pre><code>cd my-project\nuv sync          # Install dependencies\nuv add requests  # Add new dependency\nuv run pytest   # Run commands in environment\n</code></pre>"},{"location":"user-guide/cli-reference/#pdm-projects","title":"PDM Projects","text":"<pre><code>cd my-project\npdm install      # Install dependencies\npdm add requests # Add new dependency\npdm run pytest  # Run commands in environment\n</code></pre>"},{"location":"user-guide/cli-reference/#poetry-projects","title":"Poetry Projects","text":"<pre><code>cd my-project\npoetry install      # Install dependencies\npoetry add requests # Add new dependency\npoetry run pytest  # Run commands in environment\n</code></pre>"},{"location":"user-guide/cli-reference/#pip-projects","title":"PIP Projects","text":"<pre><code>cd my-project\nsource .venv/bin/activate  # Linux/macOS\n.venv\\Scripts\\activate     # Windows\npip install -r requirements.txt\npip install requests\npytest\n</code></pre>"},{"location":"user-guide/cli-reference/#next-steps","title":"Next Steps","text":"<p>Now that you understand the CLI:</p> <ol> <li>Quick Start: Try the commands hands-on</li> <li>Your First Project: Build a complete application</li> <li>Contributing: Contribute to FastAPI-fastkit</li> </ol> <p>CLI Tips</p> <ul> <li>Use <code>--help</code> with any command for detailed help</li> <li>Configure default settings to speed up project creation</li> <li>Use templates for complex project setups</li> <li>Combine commands to create powerful workflows</li> </ul>"},{"location":"user-guide/creating-projects/","title":"Creating Projects","text":"<p>A detailed guide on how to create various types of FastAPI projects with FastAPI-fastkit.</p>"},{"location":"user-guide/creating-projects/#basic-project-creation","title":"Basic Project Creation","text":""},{"location":"user-guide/creating-projects/#1-interactive-mode-project-creation","title":"1. Interactive Mode Project Creation","text":"<p>The most basic way to create a project interactively:</p> <pre><code>$ fastkit init\nEnter the project name: my-awesome-api\nEnter the author name: John Doe\nEnter the author email: john@example.com\nEnter the project description: Awesome FastAPI project\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 my-awesome-api          \u2502\n\u2502 Author       \u2502 John Doe                \u2502\n\u2502 Author Email \u2502 john@example.com        \u2502\n\u2502 Description  \u2502 Awesome FastAPI project \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/creating-projects/#2-stack-selection","title":"2. Stack Selection","text":"<p>Choose the dependency stack to include in your project:</p>"},{"location":"user-guide/creating-projects/#minimal-stack-default","title":"MINIMAL Stack (Default)","text":"<p>The most basic FastAPI project:</p> <ul> <li><code>fastapi</code> - FastAPI framework</li> <li><code>uvicorn</code> - ASGI server</li> <li><code>pydantic</code> - Data validation</li> <li><code>pydantic-settings</code> - Settings management</li> </ul> <p>Best for:</p> <ul> <li>Learning FastAPI</li> <li>Simple APIs</li> <li>Prototypes</li> <li>Microservices</li> </ul>"},{"location":"user-guide/creating-projects/#standard-stack","title":"STANDARD Stack","text":"<p>Includes database support and testing:</p> <ul> <li>All MINIMAL dependencies</li> <li><code>sqlalchemy</code> - ORM for database operations</li> <li><code>alembic</code> - Database migrations</li> <li><code>pytest</code> - Testing framework</li> </ul> <p>Best for:</p> <ul> <li>Most web applications</li> <li>APIs with database storage</li> <li>Production-ready applications</li> <li>Team projects</li> </ul>"},{"location":"user-guide/creating-projects/#full-stack","title":"FULL Stack","text":"<p>Complete development environment:</p> <ul> <li>All STANDARD dependencies</li> <li><code>redis</code> - Caching and session storage</li> <li><code>celery</code> - Background task processing</li> </ul> <p>Best for:</p> <ul> <li>Large applications</li> <li>High-performance requirements</li> <li>Complex business logic</li> <li>Enterprise applications</li> </ul>"},{"location":"user-guide/creating-projects/#advanced-project-options","title":"Advanced Project Options","text":""},{"location":"user-guide/creating-projects/#custom-project-configuration","title":"Custom Project Configuration","text":"<p>You can customize your project during creation:</p> <pre><code>$ fastkit init\nEnter the project name: advanced-api\nEnter the author name: Development Team\nEnter the author email: dev@company.com\nEnter the project description: Advanced FastAPI application with custom features\n\n# Choose STANDARD stack for database support\nSelect stack (minimal, standard, full): standard\nDo you want to proceed with project creation? [y/N]: y\n</code></pre>"},{"location":"user-guide/creating-projects/#project-structure-explanation","title":"Project Structure Explanation","text":"<p>When you create a project, FastAPI-fastkit generates this structure:</p> <pre><code>my-awesome-api/\n\u251c\u2500\u2500 .venv/                      # Virtual environment\n\u251c\u2500\u2500 src/                        # Source code\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py                # Application entry point\n\u2502   \u251c\u2500\u2500 core/                  # Core configuration\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 config.py         # Settings and configuration\n\u2502   \u251c\u2500\u2500 api/                   # API layer\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 api.py            # Main API router\n\u2502   \u2502   \u2514\u2500\u2500 routes/           # Individual route modules\n\u2502   \u2502       \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u2514\u2500\u2500 items.py      # Example items endpoints\n\u2502   \u251c\u2500\u2500 crud/                  # Database operations\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 items.py          # CRUD operations for items\n\u2502   \u251c\u2500\u2500 schemas/               # Pydantic models\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 items.py          # Data validation schemas\n\u2502   \u2514\u2500\u2500 mocks/                 # Test data\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 mock_items.json   # Sample data for development\n\u251c\u2500\u2500 tests/                     # Test suite\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 conftest.py           # Test configuration\n\u2502   \u2514\u2500\u2500 test_items.py         # Example tests\n\u251c\u2500\u2500 scripts/                   # Utility scripts\n\u2502   \u251c\u2500\u2500 test.sh               # Run tests\n\u2502   \u251c\u2500\u2500 coverage.sh           # Test coverage\n\u2502   \u2514\u2500\u2500 lint.sh               # Code linting\n\u251c\u2500\u2500 requirements.txt           # Python dependencies\n\u251c\u2500\u2500 setup.py                  # Package configuration\n\u2514\u2500\u2500 README.md                 # Project documentation\n</code></pre>"},{"location":"user-guide/creating-projects/#3-package-manager-selection","title":"3. Package Manager Selection","text":"<p>FastAPI-fastkit supports multiple Python package managers. Choose the one that best fits your development workflow:</p>"},{"location":"user-guide/creating-projects/#available-package-managers","title":"Available Package Managers","text":"<pre><code>Available Package Managers:\n                   Package Managers\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PIP    \u2502 Standard Python package manager            \u2502\n\u2502 UV     \u2502 Fast Python package manager                \u2502\n\u2502 PDM    \u2502 Modern Python dependency management        \u2502\n\u2502 POETRY \u2502 Python dependency management and packaging \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\n</code></pre> <p>Each package manager has its advantages:</p>"},{"location":"user-guide/creating-projects/#uv-default-recommended","title":"UV (Default - Recommended)","text":"<p>Fast Rust-based package manager</p> <ul> <li>\u26a1 Ultra-fast: 10-100x faster than pip</li> <li>\ud83d\udd27 Drop-in replacement: Compatible with pip workflows</li> <li>\ud83d\udce6 Modern: Full PEP 621 support</li> <li>\ud83d\udee0\ufe0f Reliable: Deterministic resolution</li> </ul> <p>Generated files: - <code>pyproject.toml</code> (PEP 621 format) - <code>uv.lock</code> (lockfile)</p> <p>Usage after creation: <pre><code>cd my-project\nuv sync              # Install dependencies\nuv add requests      # Add new dependency\nuv run pytest       # Run tests\n</code></pre></p>"},{"location":"user-guide/creating-projects/#pdm","title":"PDM","text":"<p>Modern Python dependency management</p> <ul> <li>\ud83d\ude80 Modern: PEP 582 and PEP 621 support</li> <li>\ud83e\udde0 Smart: Advanced dependency resolution</li> <li>\ud83d\udcbc Professional: Workspace and multi-project support</li> <li>\ud83d\udcca Analytics: Dependency analysis tools</li> </ul> <p>Generated files: - <code>pyproject.toml</code> (PEP 621 format) - <code>pdm.lock</code> (lockfile)</p> <p>Usage after creation: <pre><code>cd my-project\npdm install          # Install dependencies\npdm add requests     # Add new dependency\npdm run pytest      # Run tests\n</code></pre></p>"},{"location":"user-guide/creating-projects/#poetry","title":"Poetry","text":"<p>Mature dependency management and packaging</p> <ul> <li>\u2705 Established: Mature and widely adopted</li> <li>\ud83d\udce6 Integrated: Build and publish support</li> <li>\ud83d\udd12 Reproducible: poetry.lock for exact versions</li> <li>\ud83c\udfd7\ufe0f Complete: Full project lifecycle management</li> </ul> <p>Generated files: - <code>pyproject.toml</code> (Poetry format) - <code>poetry.lock</code> (lockfile)</p> <p>Usage after creation: <pre><code>cd my-project\npoetry install       # Install dependencies\npoetry add requests  # Add new dependency\npoetry run pytest   # Run tests\n</code></pre></p>"},{"location":"user-guide/creating-projects/#pip","title":"PIP","text":"<p>Standard Python package manager</p> <ul> <li>\ud83c\udfe0 Built-in: Included with Python</li> <li>\ud83c\udf0d Universal: Works everywhere</li> <li>\ud83d\udcda Familiar: Most developers know it</li> <li>\ud83d\udd27 Simple: Straightforward workflow</li> </ul> <p>Generated files: - <code>requirements.txt</code></p> <p>Usage after creation: <pre><code>cd my-project\nsource .venv/bin/activate    # Linux/macOS\n.venv\\Scripts\\activate       # Windows\npip install -r requirements.txt\npip install requests\npytest\n</code></pre></p>"},{"location":"user-guide/creating-projects/#specifying-package-manager","title":"Specifying Package Manager","text":"<p>You can specify your preferred package manager:</p> <p>Interactive selection (default): <pre><code>$ fastkit init\n# ... prompts for package manager selection\n</code></pre></p> <p>Command line option: <pre><code>$ fastkit init --package-manager poetry\n$ fastkit init --package-manager pdm\n$ fastkit init --package-manager uv\n$ fastkit init --package-manager pip\n</code></pre></p>"},{"location":"user-guide/creating-projects/#understanding-each-directory","title":"Understanding Each Directory","text":""},{"location":"user-guide/creating-projects/#src-directory","title":"<code>src/</code> Directory","text":"<p>Contains all your application source code following the src layout pattern, which is a Python packaging best practice.</p>"},{"location":"user-guide/creating-projects/#core-module","title":"<code>core/</code> Module","text":"<ul> <li>config.py: Application settings, environment variables, and configuration</li> <li>Centralizes all configuration management</li> <li>Supports <code>.env</code> file for environment-specific settings</li> </ul>"},{"location":"user-guide/creating-projects/#api-module","title":"<code>api/</code> Module","text":"<ul> <li>api.py: Main API router that includes all sub-routers</li> <li>routes/: Individual route modules for different resources</li> <li>Clean separation of concerns for different API endpoints</li> </ul>"},{"location":"user-guide/creating-projects/#crud-module","title":"<code>crud/</code> Module","text":"<ul> <li>Database operations and business logic</li> <li>Create, Read, Update, Delete operations</li> <li>Abstraction layer between API routes and data storage</li> </ul>"},{"location":"user-guide/creating-projects/#schemas-module","title":"<code>schemas/</code> Module","text":"<ul> <li>Pydantic models for data validation</li> <li>Request/response schemas</li> <li>Type definitions and data models</li> </ul>"},{"location":"user-guide/creating-projects/#tests-directory","title":"<code>tests/</code> Directory","text":"<ul> <li>Complete test suite for your application</li> <li>Includes unit tests and integration tests</li> <li>Pre-configured with pytest</li> </ul>"},{"location":"user-guide/creating-projects/#stack-comparison","title":"Stack Comparison","text":"Feature MINIMAL STANDARD FULL FastAPI &amp; Uvicorn \u2705 \u2705 \u2705 Data Validation \u2705 \u2705 \u2705 Database Support \u274c \u2705 \u2705 Migrations \u274c \u2705 \u2705 Testing Framework \u274c \u2705 \u2705 Caching (Redis) \u274c \u274c \u2705 Background Tasks \u274c \u274c \u2705 Best For Learning, Simple APIs Most Applications Enterprise, Complex Apps"},{"location":"user-guide/creating-projects/#project-creation-examples","title":"Project Creation Examples","text":""},{"location":"user-guide/creating-projects/#example-1-learning-project","title":"Example 1: Learning Project","text":"<pre><code>$ fastkit init\nEnter the project name: fastapi-learning\nEnter the author name: Student\nEnter the author email: student@example.com\nEnter the project description: Learning FastAPI basics\n\nSelect stack (minimal, standard, full): minimal\nDo you want to proceed with project creation? [y/N]: y\n</code></pre>"},{"location":"user-guide/creating-projects/#example-2-e-commerce-api","title":"Example 2: E-commerce API","text":"<pre><code>$ fastkit init\nEnter the project name: ecommerce-api\nEnter the author name: E-commerce Team\nEnter the author email: team@ecommerce.com\nEnter the project description: E-commerce platform API\n\nSelect stack (minimal, standard, full): standard\nDo you want to proceed with project creation? [y/N]: y\n</code></pre>"},{"location":"user-guide/creating-projects/#example-3-high-performance-application","title":"Example 3: High-Performance Application","text":"<pre><code>$ fastkit init\nEnter the project name: enterprise-api\nEnter the author name: Enterprise Team\nEnter the author email: enterprise@company.com\nEnter the project description: High-performance enterprise API\n\nSelect stack (minimal, standard, full): full\nDo you want to proceed with project creation? [y/N]: y\n</code></pre>"},{"location":"user-guide/creating-projects/#after-project-creation","title":"After Project Creation","text":""},{"location":"user-guide/creating-projects/#1-activate-virtual-environment","title":"1. Activate Virtual Environment","text":"<pre><code>$ cd my-awesome-api\n$ source .venv/bin/activate  # Linux/macOS\n$ .venv\\Scripts\\activate     # Windows\n</code></pre>"},{"location":"user-guide/creating-projects/#2-verify-installation","title":"2. Verify Installation","text":"<pre><code>$ pip list\nPackage         Version\nfastapi         0.104.1\nuvicorn         0.24.0\npydantic        2.5.0\n...\n</code></pre>"},{"location":"user-guide/creating-projects/#3-start-development","title":"3. Start Development","text":"<pre><code>$ fastkit runserver\nINFO:     Uvicorn running on http://127.0.0.1:8000\n</code></pre>"},{"location":"user-guide/creating-projects/#configuration-management","title":"Configuration Management","text":""},{"location":"user-guide/creating-projects/#environment-variables","title":"Environment Variables","text":"<p>Your project supports environment-based configuration through <code>.env</code> files:</p> <p>Create a <code>.env</code> file in your project root:</p> <pre><code># .env\nAPP_NAME=My Awesome API\nAPP_VERSION=1.0.0\nDEBUG=True\nDATABASE_URL=sqlite:///./app.db\nSECRET_KEY=your-secret-key-here\n</code></pre>"},{"location":"user-guide/creating-projects/#configuration-in-code","title":"Configuration in Code","text":"<p>The generated <code>src/core/config.py</code> automatically loads these variables:</p> <pre><code>from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    APP_NAME: str = \"FastAPI Application\"\n    APP_VERSION: str = \"1.0.0\"\n    DEBUG: bool = False\n    DATABASE_URL: str = \"sqlite:///./app.db\"\n    SECRET_KEY: str = \"dev-secret-key\"\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n</code></pre>"},{"location":"user-guide/creating-projects/#customization-options","title":"Customization Options","text":""},{"location":"user-guide/creating-projects/#adding-custom-dependencies","title":"Adding Custom Dependencies","text":"<p>After project creation, you can add more dependencies:</p> <pre><code>$ pip install requests httpx python-jose\n$ pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"user-guide/creating-projects/#modifying-project-structure","title":"Modifying Project Structure","text":"<p>While the generated structure follows best practices, you can modify it:</p> <ul> <li>Add new modules in <code>src/</code></li> <li>Create additional route files in <code>api/routes/</code></li> <li>Extend CRUD operations in <code>crud/</code></li> <li>Add more schemas in <code>schemas/</code></li> </ul>"},{"location":"user-guide/creating-projects/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/creating-projects/#1-virtual-environment","title":"1. Virtual Environment","text":"<p>Always use virtual environments to isolate project dependencies:</p> <pre><code># Create project with virtual environment\n$ fastkit init  # Automatically creates .venv/\n\n# Activate when working\n$ source .venv/bin/activate\n</code></pre>"},{"location":"user-guide/creating-projects/#2-version-control","title":"2. Version Control","text":"<p>Initialize git repository after project creation:</p> <pre><code>$ cd my-awesome-api\n$ git init\n$ git add .\n$ git commit -m \"Initial commit - FastAPI project setup\"\n</code></pre>"},{"location":"user-guide/creating-projects/#3-environment-configuration","title":"3. Environment Configuration","text":"<ul> <li>Use <code>.env</code> files for local development</li> <li>Use environment variables for production</li> <li>Never commit sensitive data to version control</li> </ul>"},{"location":"user-guide/creating-projects/#4-testing","title":"4. Testing","text":"<p>Leverage the included test framework:</p> <pre><code>$ python -m pytest\n$ bash scripts/test.sh\n</code></pre>"},{"location":"user-guide/creating-projects/#next-steps","title":"Next Steps","text":"<p>After creating your project:</p> <ol> <li>Adding Routes: Learn to add new API endpoints</li> <li>CLI Reference: Master all available commands</li> <li>Your First Project Tutorial: Build a complete application</li> </ol> <p>Project Creation Tips</p> <ul> <li>Choose the stack that matches your project requirements</li> <li>Start with MINIMAL for learning, use STANDARD for most projects</li> <li>The project structure is designed for scalability and maintainability</li> <li>All generated code follows FastAPI best practices</li> </ul>"},{"location":"user-guide/installation/","title":"Installation","text":"<p>This guide explains how to install FastAPI-fastkit.</p>"},{"location":"user-guide/installation/#requirements","title":"Requirements","text":"<p>To use FastAPI-fastkit, you need to meet the following requirements:</p> <ul> <li>Python: 3.12 or higher</li> <li>Operating System: Windows, macOS, Linux supported</li> </ul>"},{"location":"user-guide/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"user-guide/installation/#install-with-pip-recommended","title":"Install with pip (Recommended)","text":"<p>The simplest installation method:</p> <pre><code>$ pip install FastAPI-fastkit\n---&gt; 100%\nSuccessfully installed FastAPI-fastkit\n</code></pre>"},{"location":"user-guide/installation/#install-specific-version","title":"Install Specific Version","text":"<p>To install a specific version:</p> <pre><code>$ pip install FastAPI-fastkit==1.0.0\n---&gt; 100%\nSuccessfully installed FastAPI-fastkit-1.0.0\n</code></pre>"},{"location":"user-guide/installation/#install-development-version","title":"Install Development Version","text":"<p>To install the latest development version directly from GitHub:</p> <pre><code>$ pip install git+https://github.com/bnbong/FastAPI-fastkit.git\n---&gt; 100%\nSuccessfully installed FastAPI-fastkit\n</code></pre> <p>Development Version Warning</p> <p>Development versions may be unstable and are not recommended for production environments.</p>"},{"location":"user-guide/installation/#virtual-environment-setup-recommended","title":"Virtual Environment Setup (Recommended)","text":"<p>It's highly recommended to use a virtual environment to avoid dependency conflicts:</p>"},{"location":"user-guide/installation/#using-venv","title":"Using venv","text":"<pre><code>$ python -m venv fastapi-env\n$ source fastapi-env/bin/activate  # Linux/macOS\n$ fastapi-env\\Scripts\\activate     # Windows\n$ pip install FastAPI-fastkit\n</code></pre>"},{"location":"user-guide/installation/#using-conda","title":"Using conda","text":"<pre><code>$ conda create -n fastapi-env python=3.12\n$ conda activate fastapi-env\n$ pip install FastAPI-fastkit\n</code></pre>"},{"location":"user-guide/installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify that FastAPI-fastkit is installed correctly:</p> <pre><code>$ fastkit --version\nFastAPI-fastkit version 1.0.0\n</code></pre> <pre><code>$ fastkit --help\nUsage: fastkit [OPTIONS] COMMAND [ARGS]...\n\n  FastAPI-fastkit CLI\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  addroute       Add a new route to FastAPI project\n  init           Create a new FastAPI project\n  list-templates List available FastAPI templates\n  runserver      Start FastAPI development server\n  startdemo      Create FastAPI project from template\n</code></pre>"},{"location":"user-guide/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/installation/#command-not-found","title":"Command not found","text":"<p>If you get a \"command not found\" error:</p> <ol> <li>Check if FastAPI-fastkit is installed:</li> </ol> <pre><code>$ pip show FastAPI-fastkit\n</code></pre> <ol> <li>Check your virtual environment:</li> </ol> <pre><code>$ which python\n$ which pip\n</code></pre> <ol> <li>Reinstall FastAPI-fastkit:</li> </ol> <pre><code>$ pip uninstall FastAPI-fastkit\n$ pip install FastAPI-fastkit\n</code></pre>"},{"location":"user-guide/installation/#permission-errors","title":"Permission errors","text":"<p>If you encounter permission errors during installation:</p> <p>On Linux/macOS:</p> <pre><code>$ pip install --user FastAPI-fastkit\n</code></pre> <p>On Windows (Run as Administrator):</p> <pre><code>$ pip install FastAPI-fastkit\n</code></pre>"},{"location":"user-guide/installation/#python-version-compatibility","title":"Python version compatibility","text":"<p>FastAPI-fastkit requires Python 3.12+. Check your Python version:</p> <pre><code>$ python --version\nPython 3.12.0\n</code></pre> <p>If you have an older version, please upgrade Python:</p> <ul> <li>Official Python: python.org/downloads</li> <li>With pyenv: <code>pyenv install 3.12.0</code></li> <li>With conda: <code>conda install python=3.12</code></li> </ul>"},{"location":"user-guide/installation/#next-steps","title":"Next Steps","text":"<p>Once installation is complete:</p> <ol> <li>Quick Start: Create your first project in 5 minutes</li> <li>Getting Started Tutorial: Step-by-step detailed tutorial</li> <li>CLI Reference: Complete command reference</li> </ol> <p>Installation Tips</p> <ul> <li>Always use virtual environments for project isolation</li> <li>Keep FastAPI-fastkit updated to the latest version</li> <li>Check the GitHub repository for updates and issues</li> </ul>"},{"location":"user-guide/quick-start/","title":"Quick Start","text":"<p>Create your first FastAPI project with FastAPI-fastkit in under 5 minutes!</p>"},{"location":"user-guide/quick-start/#1-create-project","title":"1. Create Project","text":"<p>Use FastAPI-fastkit's <code>init</code> command to create a new project:</p> <pre><code>$ fastkit init\nEnter the project name: my-first-app\nEnter the author name: Your Name\nEnter the author email: your.email@example.com\nEnter the project description: My first FastAPI application\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 my-first-app                \u2502\n\u2502 Author       \u2502 Your Name                   \u2502\n\u2502 Author Email \u2502 your.email@example.com      \u2502\n\u2502 Description  \u2502 My first FastAPI application\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nAvailable Stacks and Dependencies:\n           MINIMAL Stack\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 pydantic          \u2502\n\u2502 Dependency 4 \u2502 pydantic-settings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n           STANDARD Stack\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 sqlalchemy        \u2502\n\u2502 Dependency 4 \u2502 alembic           \u2502\n\u2502 Dependency 5 \u2502 pytest            \u2502\n\u2502 Dependency 6 \u2502 pydantic          \u2502\n\u2502 Dependency 7 \u2502 pydantic-settings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n             FULL Stack\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 sqlalchemy        \u2502\n\u2502 Dependency 4 \u2502 alembic           \u2502\n\u2502 Dependency 5 \u2502 pytest            \u2502\n\u2502 Dependency 6 \u2502 redis             \u2502\n\u2502 Dependency 7 \u2502 celery            \u2502\n\u2502 Dependency 8 \u2502 pydantic          \u2502\n\u2502 Dependency 9 \u2502 pydantic-settings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect stack (minimal, standard, full): minimal\n\nAvailable Package Managers:\n                   Package Managers\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PIP    \u2502 Standard Python package manager            \u2502\n\u2502 UV     \u2502 Fast Python package manager                \u2502\n\u2502 PDM    \u2502 Modern Python dependency management        \u2502\n\u2502 POETRY \u2502 Python dependency management and packaging \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\n\n\u2728 FastAPI project 'my-first-app' has been created successfully!\n</code></pre>"},{"location":"user-guide/quick-start/#2-activate-virtual-environment","title":"2. Activate Virtual Environment","text":"<p>Navigate to your project and activate the virtual environment:</p> <pre><code>$ cd my-first-app\n$ source .venv/bin/activate  # Linux/macOS\n$ .venv\\Scripts\\activate     # Windows\n</code></pre>"},{"location":"user-guide/quick-start/#3-start-development-server","title":"3. Start Development Server","text":"<p>Start the FastAPI development server:</p> <pre><code>$ fastkit runserver\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre> <p>Congratulations!</p> <p>Your FastAPI server is now running! Open your browser to check it out.</p>"},{"location":"user-guide/quick-start/#4-test-your-api","title":"4. Test Your API","text":"<p>Open your browser and visit these URLs:</p>"},{"location":"user-guide/quick-start/#main-endpoint","title":"Main Endpoint","text":"<p>Visit http://127.0.0.1:8000</p> <p>You'll see:</p> <pre><code>{\"message\": \"Hello World\"}\n</code></pre>"},{"location":"user-guide/quick-start/#interactive-api-documentation","title":"Interactive API Documentation","text":"<p>Visit http://127.0.0.1:8000/docs</p> <p>This is the automatically generated Swagger UI documentation where you can: - See all your API endpoints - Test endpoints directly in the browser - View request/response schemas</p>"},{"location":"user-guide/quick-start/#alternative-documentation","title":"Alternative Documentation","text":"<p>Visit http://127.0.0.1:8000/redoc</p> <p>This is the ReDoc documentation interface with a different, clean design.</p>"},{"location":"user-guide/quick-start/#5-add-your-first-route","title":"5. Add Your First Route","text":"<p>Let's add a new API route to your project:</p> <pre><code>$ fastkit addroute my-first-app users\n                       Adding New Route\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project          \u2502 my-first-app                             \u2502\n\u2502 Route Name       \u2502 users                                    \u2502\n\u2502 Target Directory \u2502 ~/my-first-app                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDo you want to add route 'users' to project 'my-first-app'? [Y/n]: y\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Info \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2139 Updated main.py to include the API router          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Success \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u2728 Successfully added new route 'users' to project    \u2502\n\u2502 `my-first-app`                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>The server will automatically reload, and now you have new endpoints:</p> <ul> <li><code>GET /api/v1/users/</code> - Get all users</li> <li><code>POST /api/v1/users/</code> - Create a new user</li> <li><code>GET /api/v1/users/{user_id}</code> - Get a specific user</li> <li><code>PUT /api/v1/users/{user_id}</code> - Update a user</li> <li><code>DELETE /api/v1/users/{user_id}</code> - Delete a user</li> </ul>"},{"location":"user-guide/quick-start/#6-test-the-new-api","title":"6. Test the New API","text":""},{"location":"user-guide/quick-start/#using-curl","title":"Using curl","text":"<p>Get all users:</p> <pre><code>$ curl http://127.0.0.1:8000/api/v1/users/\n[]\n</code></pre> <p>Create a new user:</p> <pre><code>$ curl -X POST \"http://127.0.0.1:8000/api/v1/users/\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"title\": \"John Doe\", \"description\": \"Software Developer\"}'\n{\n  \"id\": 1,\n  \"title\": \"John Doe\",\n  \"description\": \"Software Developer\"\n}\n</code></pre>"},{"location":"user-guide/quick-start/#using-the-interactive-docs","title":"Using the Interactive Docs","text":"<ol> <li>Visit http://127.0.0.1:8000/docs</li> <li>Expand the \"users\" section</li> <li>Click on \"POST /api/v1/users/\"</li> <li>Click \"Try it out\"</li> <li>Fill in the request body:    <pre><code>{\n  \"title\": \"Jane Smith\",\n  \"description\": \"Product Manager\"\n}\n</code></pre></li> <li>Click \"Execute\"</li> </ol>"},{"location":"user-guide/quick-start/#7-explore-your-project-structure","title":"7. Explore Your Project Structure","text":"<p>Your generated project has a clean, organized structure:</p> <pre><code>my-first-app/\n\u251c\u2500\u2500 .venv/                    # Virtual environment\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py              # FastAPI app entry point\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 config.py        # App configuration\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 api.py          # API router collection\n\u2502   \u2502   \u2514\u2500\u2500 routes/\n\u2502   \u2502       \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u251c\u2500\u2500 items.py     # Default items route\n\u2502   \u2502       \u2514\u2500\u2500 users.py     # Your new users route\n\u2502   \u251c\u2500\u2500 crud/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 items.py         # CRUD operations for items\n\u2502   \u2502   \u2514\u2500\u2500 users.py         # CRUD operations for users\n\u2502   \u251c\u2500\u2500 schemas/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 items.py         # Pydantic schemas for items\n\u2502   \u2502   \u2514\u2500\u2500 users.py         # Pydantic schemas for users\n\u2502   \u2514\u2500\u2500 mocks/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 mock_items.json  # Test data\n\u251c\u2500\u2500 tests/                   # Test files\n\u251c\u2500\u2500 scripts/                 # Utility scripts\n\u251c\u2500\u2500 requirements.txt         # Python dependencies\n\u251c\u2500\u2500 setup.py                # Package configuration\n\u2514\u2500\u2500 README.md               # Project documentation\n</code></pre>"},{"location":"user-guide/quick-start/#8-package-manager-options","title":"8. Package Manager Options","text":"<p>FastAPI-fastkit supports multiple Python package managers to suit your preferences:</p>"},{"location":"user-guide/quick-start/#available-package-managers","title":"Available Package Managers","text":"Manager Description Best For UV Fast Python package manager (default) Speed and performance PDM Modern Python dependency management Advanced dependency resolution Poetry Python dependency management and packaging Poetry-based workflows PIP Standard Python package manager Traditional Python development"},{"location":"user-guide/quick-start/#specifying-package-manager","title":"Specifying Package Manager","text":"<p>You can specify your preferred package manager in several ways:</p>"},{"location":"user-guide/quick-start/#1-interactive-selection-default","title":"1. Interactive Selection (Default)","text":"<p>When you run <code>fastkit init</code> or <code>fastkit startdemo</code>, you'll be prompted to choose:</p> <pre><code>$ fastkit init\n# ... after project details and stack selection ...\n\nAvailable Package Managers:\n                   Package Managers\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PIP    \u2502 Standard Python package manager            \u2502\n\u2502 UV     \u2502 Fast Python package manager                \u2502\n\u2502 PDM    \u2502 Modern Python dependency management        \u2502\n\u2502 POETRY \u2502 Python dependency management and packaging \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\n</code></pre>"},{"location":"user-guide/quick-start/#2-command-line-option","title":"2. Command Line Option","text":"<p>Skip the interactive prompt by specifying the package manager directly:</p> <pre><code>$ fastkit init --package-manager poetry\n$ fastkit startdemo --package-manager pdm\n</code></pre>"},{"location":"user-guide/quick-start/#dependency-files-generated","title":"Dependency Files Generated","text":"<p>Each package manager creates its appropriate dependency files:</p> <ul> <li>UV/PDM: <code>pyproject.toml</code> (PEP 621 format)</li> <li>Poetry: <code>pyproject.toml</code> (Poetry format)</li> <li>PIP: <code>requirements.txt</code></li> </ul>"},{"location":"user-guide/quick-start/#9-whats-next","title":"9. What's Next?","text":"<p>Congratulations! You've successfully:</p> <p>\u2705 Created your first FastAPI project \u2705 Started the development server \u2705 Added a new API route \u2705 Tested your APIs</p>"},{"location":"user-guide/quick-start/#continue-learning","title":"Continue Learning","text":"<ol> <li>Your First Project: Build a more complex blog API</li> <li>Creating Projects: Learn about different stacks and options</li> <li>Adding Routes: Master the art of API development</li> <li>Using Templates: Explore pre-built project templates</li> </ol>"},{"location":"user-guide/quick-start/#experiment-more","title":"Experiment More","text":"<p>Try these commands to explore more features:</p> <pre><code># List available templates\n$ fastkit list-templates\n\n# Create a project from a template\n$ fastkit startdemo\n\n# Add more routes\n$ fastkit addroute my-first-app products\n$ fastkit addroute my-first-app orders\n</code></pre> <p>Development Tips</p> <ul> <li>The server automatically reloads when you change files</li> <li>Always check the interactive docs at <code>/docs</code> when adding new features</li> <li>Use the virtual environment to keep dependencies isolated</li> <li>Explore the generated code to understand the project structure</li> </ul>"},{"location":"user-guide/using-templates/","title":"Using Templates","text":"<p>FastAPI-fastkit provides pre-built project templates to help you get started quickly with different technology stacks.</p>"},{"location":"user-guide/using-templates/#available-templates","title":"Available Templates","text":"<p>Check the available templates with the <code>list-templates</code> command:</p> <pre><code>$ fastkit list-templates\n                      Available Templates\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 fastapi-custom-response \u2502 Async Item Management API with    \u2502\n\u2502                         \u2502 Custom Response System            \u2502\n\u2502 fastapi-dockerized      \u2502 Dockerized FastAPI Item           \u2502\n\u2502                         \u2502 Management API                    \u2502\n\u2502 fastapi-empty           \u2502 No description                    \u2502\n\u2502 fastapi-async-crud      \u2502 Async Item Management API Server  \u2502\n\u2502 fastapi-psql-orm        \u2502 Dockerized FastAPI Item           \u2502\n\u2502                         \u2502 Management API with PostgreSQL    \u2502\n\u2502 fastapi-default         \u2502 Simple FastAPI Project            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/using-templates/#template-descriptions","title":"Template Descriptions","text":""},{"location":"user-guide/using-templates/#1-fastapi-default","title":"1. <code>fastapi-default</code>","text":"<p>Simple FastAPI Project</p> <ul> <li>Basic FastAPI setup with essential features</li> <li>Item management with mock data</li> <li>Perfect for learning and simple APIs</li> <li>Includes basic CRUD operations</li> </ul> <p>Best for:</p> <ul> <li>FastAPI beginners</li> <li>Simple web APIs</li> <li>Learning and prototyping</li> </ul>"},{"location":"user-guide/using-templates/#2-fastapi-async-crud","title":"2. <code>fastapi-async-crud</code>","text":"<p>Async Item Management API Server</p> <ul> <li>Fully asynchronous FastAPI application</li> <li>Advanced CRUD operations with async/await</li> <li>Better performance for I/O operations</li> <li>Mock data storage with async patterns</li> </ul> <p>Best for:</p> <ul> <li>High-performance applications</li> <li>I/O intensive operations</li> <li>Modern async Python development</li> </ul>"},{"location":"user-guide/using-templates/#3-fastapi-custom-response","title":"3. <code>fastapi-custom-response</code>","text":"<p>Async Item Management API with Custom Response System</p> <ul> <li>Custom response models and formatting</li> <li>Advanced error handling</li> <li>Pagination support</li> <li>Custom HTTP status codes and responses</li> </ul> <p>Best for:</p> <ul> <li>APIs requiring specific response formats</li> <li>Advanced error handling needs</li> <li>Custom business logic in responses</li> </ul>"},{"location":"user-guide/using-templates/#4-fastapi-dockerized","title":"4. <code>fastapi-dockerized</code>","text":"<p>Dockerized FastAPI Item Management API</p> <ul> <li>Full Docker containerization</li> <li>Production-ready deployment setup</li> <li>Multi-stage Docker builds</li> <li>Environment-based configuration</li> </ul> <p>Best for:</p> <ul> <li>Production deployments</li> <li>Containerized environments</li> <li>DevOps and CI/CD pipelines</li> </ul>"},{"location":"user-guide/using-templates/#5-fastapi-psql-orm","title":"5. <code>fastapi-psql-orm</code>","text":"<p>Dockerized FastAPI Item Management API with PostgreSQL</p> <ul> <li>PostgreSQL database integration</li> <li>SQLAlchemy ORM with Alembic migrations</li> <li>Docker Compose for local development</li> <li>Full database CRUD operations</li> </ul> <p>Best for:</p> <ul> <li>Database-driven applications</li> <li>Production-grade data storage</li> <li>Complex data relationships</li> </ul>"},{"location":"user-guide/using-templates/#6-fastapi-empty","title":"6. <code>fastapi-empty</code>","text":"<p>Minimal FastAPI Project</p> <ul> <li>Bare minimum FastAPI setup</li> <li>No pre-built features</li> <li>Clean slate for custom development</li> </ul> <p>Best for:</p> <ul> <li>Starting from scratch</li> <li>Minimal dependencies</li> <li>Custom architecture requirements</li> </ul>"},{"location":"user-guide/using-templates/#creating-a-project-from-template","title":"Creating a Project from Template","text":"<p>Use the <code>startdemo</code> command to create a project from a template:</p> <pre><code>$ fastkit startdemo\nEnter the project name: my-blog-api\nEnter the author name: John Doe\nEnter the author email: john@example.com\nEnter the project description: Blog API with PostgreSQL\n\nAvailable Templates:\n           fastapi-default\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Description \u2502 Simple FastAPI       \u2502\n\u2502             \u2502 Project              \u2502\n\u2502 Stack       \u2502 FastAPI, Uvicorn     \u2502\n\u2502 Database    \u2502 Mock Data            \u2502\n\u2502 Features    \u2502 Basic CRUD           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n           fastapi-psql-orm\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Description \u2502 Dockerized FastAPI   \u2502\n\u2502             \u2502 Item Management API  \u2502\n\u2502             \u2502 with PostgreSQL      \u2502\n\u2502 Stack       \u2502 FastAPI, PostgreSQL, \u2502\n\u2502             \u2502 SQLAlchemy, Docker   \u2502\n\u2502 Database    \u2502 PostgreSQL           \u2502\n\u2502 Features    \u2502 Full ORM, Migrations \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect template (fastapi-default, fastapi-async-crud, fastapi-custom-response, fastapi-dockerized, fastapi-psql-orm, fastapi-empty): fastapi-psql-orm\n\n           Project Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Project Name \u2502 my-blog-api         \u2502\n\u2502 Author       \u2502 John Doe            \u2502\n\u2502 Author Email \u2502 john@example.com    \u2502\n\u2502 Description  \u2502 Blog API with       \u2502\n\u2502              \u2502 PostgreSQL          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n       Template Dependencies\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Dependency 1 \u2502 fastapi           \u2502\n\u2502 Dependency 2 \u2502 uvicorn           \u2502\n\u2502 Dependency 3 \u2502 sqlalchemy        \u2502\n\u2502 Dependency 4 \u2502 alembic           \u2502\n\u2502 Dependency 5 \u2502 psycopg2-binary   \u2502\n\u2502 Dependency 6 \u2502 python-dotenv     \u2502\n\u2502 Dependency 7 \u2502 pytest            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nAvailable Package Managers:\n                   Package Managers\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PIP    \u2502 Standard Python package manager            \u2502\n\u2502 UV     \u2502 Fast Python package manager                \u2502\n\u2502 PDM    \u2502 Modern Python dependency management        \u2502\n\u2502 POETRY \u2502 Python dependency management and packaging \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSelect package manager (pip, uv, pdm, poetry) [uv]: uv\nDo you want to proceed with project creation? [y/N]: y\n\n\u2728 FastAPI project 'my-blog-api' from 'fastapi-psql-orm' has been created successfully!\n</code></pre>"},{"location":"user-guide/using-templates/#template-features-comparison","title":"Template Features Comparison","text":"Feature Default Async CRUD Custom Response Dockerized PostgreSQL ORM Empty Basic FastAPI \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 Mock Data \u2705 \u2705 \u2705 \u2705 \u274c \u274c Async Support Basic \u2705 \u2705 \u2705 \u2705 \u274c Custom Responses \u274c \u274c \u2705 \u274c \u274c \u274c Docker \u274c \u274c \u274c \u2705 \u2705 \u274c Database Mock Mock Mock Mock PostgreSQL None ORM \u274c \u274c \u274c \u274c SQLAlchemy \u274c Migrations \u274c \u274c \u274c \u274c Alembic \u274c Testing \u2705 \u2705 \u2705 \u2705 \u2705 \u274c Best For Learning Performance Custom APIs Production Database Apps Custom"},{"location":"user-guide/using-templates/#template-specific-setup","title":"Template-Specific Setup","text":""},{"location":"user-guide/using-templates/#using-fastapi-psql-orm","title":"Using <code>fastapi-psql-orm</code>","text":"<p>This template includes full PostgreSQL setup. After creation:</p> <ol> <li>Start PostgreSQL with Docker:</li> </ol> <pre><code>$ cd my-blog-api\n$ docker-compose up -d postgres\nStarting my-blog-api_postgres_1 ... done\n</code></pre> <ol> <li>Run database migrations:</li> </ol> <pre><code>$ source .venv/bin/activate\n$ alembic upgrade head\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade -&gt; bedcdc35b64a, first alembic\n</code></pre> <ol> <li>Start the API server:</li> </ol> <pre><code>$ fastkit runserver\nINFO:     Uvicorn running on http://127.0.0.1:8000\n</code></pre>"},{"location":"user-guide/using-templates/#using-fastapi-dockerized","title":"Using <code>fastapi-dockerized</code>","text":"<p>This template provides full Docker support:</p> <ol> <li>Build the Docker image:</li> </ol> <pre><code>$ cd my-dockerized-api\n$ docker build -t my-dockerized-api .\nSuccessfully built abc123def456\nSuccessfully tagged my-dockerized-api:latest\n</code></pre> <ol> <li>Run the container:</li> </ol> <pre><code>$ docker run -p 8000:8000 my-dockerized-api\nINFO:     Uvicorn running on http://0.0.0.0:8000\n</code></pre>"},{"location":"user-guide/using-templates/#using-fastapi-custom-response","title":"Using <code>fastapi-custom-response</code>","text":"<p>This template includes advanced response handling:</p> <ol> <li>Custom response models:</li> </ol> <pre><code>from src.helper.pagination import PaginatedResponse\nfrom src.schemas.base import StandardResponse\n\n@router.get(\"/\", response_model=PaginatedResponse[Item])\ndef read_items(skip: int = 0, limit: int = 10):\n    items = items_crud.get_multi(skip=skip, limit=limit)\n    total = items_crud.count()\n\n    return PaginatedResponse(\n        data=items,\n        total=total,\n        page=skip // limit + 1,\n        pages=(total + limit - 1) // limit\n    )\n\n@router.post(\"/\", response_model=StandardResponse[Item])\ndef create_item(item: ItemCreate):\n    new_item = items_crud.create(item)\n    return StandardResponse(\n        data=new_item,\n        message=\"Item created successfully\",\n        status_code=201\n    )\n</code></pre> <ol> <li>Enhanced error handling:</li> </ol> <pre><code>from src.helper.exceptions import ItemNotFoundError, ValidationError\n\n@router.get(\"/{item_id}\", response_model=StandardResponse[Item])\ndef read_item(item_id: int):\n    try:\n        item = items_crud.get(item_id)\n        return StandardResponse(data=item)\n    except ItemNotFoundError:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"Item with id {item_id} not found\"\n        )\n</code></pre>"},{"location":"user-guide/using-templates/#template-project-structure","title":"Template Project Structure","text":"<p>Each template follows a consistent but customized structure:</p>"},{"location":"user-guide/using-templates/#fastapi-default-structure","title":"<code>fastapi-default</code> Structure","text":"<pre><code>my-project/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 core/config.py\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 api.py\n\u2502   \u2502   \u2514\u2500\u2500 routes/items.py\n\u2502   \u251c\u2500\u2500 crud/items.py\n\u2502   \u251c\u2500\u2500 schemas/items.py\n\u2502   \u2514\u2500\u2500 mocks/mock_items.json\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 scripts/\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"user-guide/using-templates/#fastapi-psql-orm-structure","title":"<code>fastapi-psql-orm</code> Structure","text":"<pre><code>my-project/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u251c\u2500\u2500 config.py\n\u2502   \u2502   \u2514\u2500\u2500 db.py\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 api.py\n\u2502   \u2502   \u251c\u2500\u2500 deps.py\n\u2502   \u2502   \u2514\u2500\u2500 routes/items.py\n\u2502   \u251c\u2500\u2500 crud/items.py\n\u2502   \u251c\u2500\u2500 schemas/items.py\n\u2502   \u251c\u2500\u2500 alembic/\n\u2502   \u2502   \u251c\u2500\u2500 env.py\n\u2502   \u2502   \u2514\u2500\u2500 versions/\n\u2502   \u2514\u2500\u2500 utils/\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 scripts/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 alembic.ini\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"user-guide/using-templates/#customizing-templates","title":"Customizing Templates","text":"<p>After creating a project from a template, you can customize it:</p>"},{"location":"user-guide/using-templates/#1-add-new-routes","title":"1. Add New Routes","text":"<pre><code>$ fastkit addroute my-blog-api posts\n$ fastkit addroute my-blog-api users\n$ fastkit addroute my-blog-api comments\n</code></pre>"},{"location":"user-guide/using-templates/#2-modify-configuration","title":"2. Modify Configuration","text":"<p>Edit <code>src/core/config.py</code> to match your needs:</p> <pre><code>from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    PROJECT_NAME: str = \"My Blog API\"\n    VERSION: str = \"1.0.0\"\n    API_V1_STR: str = \"/api/v1\"\n\n    # Database settings (for PostgreSQL templates)\n    DATABASE_URL: str = \"postgresql://user:password@localhost/dbname\"\n\n    # Security settings\n    SECRET_KEY: str = \"your-secret-key-here\"\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n</code></pre>"},{"location":"user-guide/using-templates/#3-add-environment-variables","title":"3. Add Environment Variables","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code># .env\nPROJECT_NAME=My Blog API\nVERSION=1.0.0\nDEBUG=True\n\n# Database (for PostgreSQL templates)\nDATABASE_URL=postgresql://user:password@localhost:5432/myblogdb\nPOSTGRES_USER=user\nPOSTGRES_PASSWORD=password\nPOSTGRES_DB=myblogdb\n\n# Security\nSECRET_KEY=your-super-secret-key-here\nACCESS_TOKEN_EXPIRE_MINUTES=30\n</code></pre>"},{"location":"user-guide/using-templates/#template-testing","title":"Template Testing","text":"<p>Each template comes with pre-configured tests:</p> <pre><code>$ cd my-blog-api\n$ source .venv/bin/activate\n$ python -m pytest\n\n======================== test session starts ========================\ntests/test_items.py::test_create_item PASSED\ntests/test_items.py::test_read_items PASSED\ntests/test_items.py::test_read_item PASSED\ntests/test_items.py::test_update_item PASSED\ntests/test_items.py::test_delete_item PASSED\n======================== 5 passed in 0.23s ========================\n</code></pre>"},{"location":"user-guide/using-templates/#template-development-workflow","title":"Template Development Workflow","text":""},{"location":"user-guide/using-templates/#1-choose-the-right-template","title":"1. Choose the Right Template","text":"<ul> <li>Learning/Simple APIs: <code>fastapi-default</code></li> <li>High Performance: <code>fastapi-async-crud</code></li> <li>Custom Response Formats: <code>fastapi-custom-response</code></li> <li>Production Deployment: <code>fastapi-dockerized</code></li> <li>Database Applications: <code>fastapi-psql-orm</code></li> <li>Custom Architecture: <code>fastapi-empty</code></li> </ul>"},{"location":"user-guide/using-templates/#2-create-and-setup","title":"2. Create and Setup","text":"<pre><code>$ fastkit startdemo\n# Follow the prompts\n$ cd your-project\n$ source .venv/bin/activate\n</code></pre>"},{"location":"user-guide/using-templates/#3-development","title":"3. Development","text":"<pre><code># Start development server\n$ fastkit runserver\n\n# Run tests\n$ python -m pytest\n\n# Add new features\n$ fastkit addroute your-project new-resource\n</code></pre>"},{"location":"user-guide/using-templates/#4-deployment","title":"4. Deployment","text":"<p>For production templates (<code>fastapi-dockerized</code>, <code>fastapi-psql-orm</code>):</p> <pre><code># Build for production\n$ docker build -t your-app .\n\n# Deploy with Docker Compose\n$ docker-compose up -d\n</code></pre>"},{"location":"user-guide/using-templates/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/using-templates/#1-choose-templates-wisely","title":"1. Choose Templates Wisely","text":"<ul> <li>Start with simpler templates for learning</li> <li>Use database templates for data-driven apps</li> <li>Use Docker templates for production deployments</li> </ul>"},{"location":"user-guide/using-templates/#2-environment-management","title":"2. Environment Management","text":"<ul> <li>Always use <code>.env</code> files for configuration</li> <li>Never commit sensitive data to version control</li> <li>Use different environments for development/production</li> </ul>"},{"location":"user-guide/using-templates/#3-customization-strategy","title":"3. Customization Strategy","text":"<ul> <li>Add new routes using <code>fastkit addroute</code></li> <li>Modify existing code to fit your business logic</li> <li>Keep the project structure organized</li> </ul>"},{"location":"user-guide/using-templates/#4-testing","title":"4. Testing","text":"<ul> <li>Run tests regularly during development</li> <li>Add tests for new features you implement</li> <li>Use the provided test structure as a guide</li> </ul>"},{"location":"user-guide/using-templates/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/using-templates/#database-connection-issues-postgresql-templates","title":"Database Connection Issues (PostgreSQL templates)","text":"<p>If you can't connect to PostgreSQL:</p> <ol> <li>Check Docker is running:</li> </ol> <pre><code>$ docker ps\n</code></pre> <ol> <li>Verify PostgreSQL container:</li> </ol> <pre><code>$ docker-compose logs postgres\n</code></pre> <ol> <li>Check environment variables:</li> </ol> <pre><code>DATABASE_URL=postgresql://user:password@localhost:5432/dbname\n</code></pre>"},{"location":"user-guide/using-templates/#docker-build-failures","title":"Docker Build Failures","text":"<p>If Docker build fails:</p> <ol> <li>Check Dockerfile syntax</li> <li>Verify all files are present</li> <li>Check Docker daemon is running</li> </ol>"},{"location":"user-guide/using-templates/#missing-dependencies","title":"Missing Dependencies","text":"<p>If you get import errors:</p> <ol> <li> <p>Activate virtual environment: <pre><code>$ source .venv/bin/activate\n</code></pre> </p> </li> <li> <p>Install dependencies: <pre><code>$ pip install -r requirements.txt\n</code></pre> </p> </li> </ol>"},{"location":"user-guide/using-templates/#next-steps","title":"Next Steps","text":"<p>Now that you understand templates:</p> <ol> <li>Your First Project: Build a complete application</li> <li>Adding Routes: Expand your template-based project</li> <li>CLI Reference: Master all available commands</li> </ol> <p>Template Tips</p> <ul> <li>Templates provide excellent starting points, not final solutions</li> <li>Customize templates to match your specific requirements</li> <li>Study template code to learn FastAPI best practices</li> <li>Use version control to track your customizations</li> </ul>"}]}