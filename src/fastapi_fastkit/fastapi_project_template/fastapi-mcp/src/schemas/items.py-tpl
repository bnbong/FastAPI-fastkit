"""
Pydantic schemas for items endpoints.
"""
from typing import Optional
from pydantic import BaseModel, Field


class ItemBase(BaseModel):
    """Base item schema."""
    name: str = Field(..., min_length=1, max_length=100, description="Item name")
    description: Optional[str] = Field(None, max_length=500, description="Item description")
    price: float = Field(..., gt=0, description="Item price")
    tax: Optional[float] = Field(None, ge=0, description="Item tax")


class ItemCreate(ItemBase):
    """Schema for creating a new item."""
    pass


class ItemUpdate(BaseModel):
    """Schema for updating an item."""
    name: Optional[str] = Field(None, min_length=1, max_length=100)
    description: Optional[str] = Field(None, max_length=500)
    price: Optional[float] = Field(None, gt=0)
    tax: Optional[float] = Field(None, ge=0)


class ItemResponse(ItemBase):
    """Schema for item response."""
    id: int = Field(..., description="Item ID")
    owner_id: str = Field(..., description="Item owner ID")

    class Config:
        """Pydantic configuration."""
        from_attributes = True


class ItemListResponse(BaseModel):
    """Schema for item list response."""
    items: list[ItemResponse]
    total: int
    page: int
    page_size: int

    class Config:
        """Pydantic configuration."""
        from_attributes = True


class AuthToken(BaseModel):
    """Schema for authentication token."""
    access_token: str
    token_type: str


class UserLogin(BaseModel):
    """Schema for user login."""
    username: str
    password: str


class UserInfo(BaseModel):
    """Schema for user information."""
    user_id: str
    username: str
    active: bool = True
