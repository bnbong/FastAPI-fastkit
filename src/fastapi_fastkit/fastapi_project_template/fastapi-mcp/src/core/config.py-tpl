"""
Application configuration settings.
"""
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyHttpUrl, ConfigDict, field_validator
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    """Application settings configuration."""

    PROJECT_NAME: str = "FastAPI MCP Project"
    VERSION: str = "0.1.0"
    API_V1_STR: str = "/api/v1"

    # Server settings
    HOST: str = "0.0.0.0"
    PORT: int = 8000
    DEBUG: bool = False

    # CORS settings
    BACKEND_CORS_ORIGINS: List[AnyHttpUrl] = []

    # MCP settings
    MCP_ENABLED: bool = True
    MCP_MOUNT_PATH: str = "/mcp"
    MCP_TITLE: str = "FastAPI MCP Server"
    MCP_DESCRIPTION: str = "FastAPI endpoints exposed as MCP tools"

    # Authentication settings
    SECRET_KEY: str = "your-secret-key-here"
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30

    # API Key for MCP authentication (optional)
    MCP_API_KEY: Optional[str] = None

    @field_validator("BACKEND_CORS_ORIGINS", mode="before")
    @classmethod
    def assemble_cors_origins(cls, v: Union[str, List[str]]) -> Union[List[str], str]:
        """Assemble CORS origins from environment variable."""
        if isinstance(v, str) and not v.startswith("["):
            return [i.strip() for i in v.split(",")]
        elif isinstance(v, (list, str)):
            return v
        raise ValueError(v)

    @property
    def all_cors_origins(self) -> List[str]:
        """Get all CORS origins."""
        return self.BACKEND_CORS_ORIGINS

    model_config = ConfigDict(
        case_sensitive=True,
        env_file=".env"
    )


settings = Settings()
