"""
Tests for items API endpoints.
"""
import pytest
from fastapi.testclient import TestClient


def test_get_items(client: TestClient):
    """Test getting items without authentication."""
    response = client.get("/api/v1/items/")
    assert response.status_code == 200
    data = response.json()
    assert "items" in data
    assert "total" in data
    assert "page" in data
    assert "page_size" in data


def test_get_items_with_pagination(client: TestClient):
    """Test getting items with pagination."""
    response = client.get("/api/v1/items/?page=1&page_size=2")
    assert response.status_code == 200
    data = response.json()
    assert len(data["items"]) <= 2
    assert data["page"] == 1
    assert data["page_size"] == 2


def test_get_item_by_id(client: TestClient):
    """Test getting a specific item by ID."""
    response = client.get("/api/v1/items/1")
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == 1
    assert "name" in data
    assert "price" in data


def test_get_item_not_found(client: TestClient):
    """Test getting a non-existent item."""
    response = client.get("/api/v1/items/999")
    assert response.status_code == 404


def test_create_item_without_auth(client: TestClient, test_item):
    """Test creating item without authentication."""
    response = client.post("/api/v1/items/", json=test_item)
    assert response.status_code == 401


def test_create_item_with_auth(client: TestClient, test_item, auth_headers):
    """Test creating item with authentication."""
    response = client.post("/api/v1/items/", json=test_item, headers=auth_headers)
    assert response.status_code == 201
    data = response.json()
    assert data["name"] == test_item["name"]
    assert data["price"] == test_item["price"]
    assert "id" in data
    assert "owner_id" in data


def test_create_item_invalid_data(client: TestClient, auth_headers):
    """Test creating item with invalid data."""
    invalid_item = {
        "name": "",  # Empty name should fail
        "price": -10,  # Negative price should fail
    }
    response = client.post("/api/v1/items/", json=invalid_item, headers=auth_headers)
    assert response.status_code == 422


def test_update_item_without_auth(client: TestClient):
    """Test updating item without authentication."""
    update_data = {"name": "Updated Item"}
    response = client.put("/api/v1/items/1", json=update_data)
    assert response.status_code == 401


def test_update_item_with_auth(client: TestClient, auth_headers):
    """Test updating item with authentication."""
    update_data = {"name": "Updated Item", "price": 199.99}
    response = client.put("/api/v1/items/1", json=update_data, headers=auth_headers)
    # Note: This might fail if the item doesn't belong to the test user
    # In a real scenario, you would need proper test data setup


def test_delete_item_without_auth(client: TestClient):
    """Test deleting item without authentication."""
    response = client.delete("/api/v1/items/1")
    assert response.status_code == 401


def test_delete_item_not_found(client: TestClient, auth_headers):
    """Test deleting non-existent item."""
    response = client.delete("/api/v1/items/999", headers=auth_headers)
    assert response.status_code == 404
