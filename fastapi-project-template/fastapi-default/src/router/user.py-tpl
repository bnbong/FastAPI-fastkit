# --------------------------------------------------------------------------
# The module defines User router.
# --------------------------------------------------------------------------
from . import *

from src.helper.global_data import mock_user_data
from src.crud.user import get_mock_user_data
from src.schemas import ResponseSchema
from src.schemas.user import UserSchema, UserCreate, UserUpdate


router = APIRouter(
    prefix="/user",
)


def generate_new_user_id():
    if mock_user_data:
        return max(_user["id"] for _user in mock_user_data) + 1
    return 1


@router.post(
    "/",
    summary="Create a new user.",
    status_code=status.HTTP_201_CREATED,
    response_model=UserSchema,
)
async def create_user_route(
    data: UserCreate,
    request: Request,
):
    try:
        new_user = create_mock_user(data)
        response = ResponseSchema(
            timestamp=datetime.utcnow().isoformat() + "Z",
            status=201,
            code="HTTP-201",
            path=str(request.url),
            message=UserSchema(**new_user),
        )
        return response
    except InternalException as e:
        return JSONResponse(
            status_code=e.status,
            content=e.to_response(path=str(request.url)).model_dump(),
        )


@router.get(
    "/{id}",
    summary="Get a user info",
    description="Inquires information about a specific user.",
    response_model=ResponseSchema[UserSchema],
)
async def get_user_route(id: UUID, request: Request):
    try:
        user = get_mock_user_data(id)
        response = ResponseSchema(
            timestamp=datetime.utcnow().isoformat() + "Z",
            status=200,
            code="HTTP-200",
            path=str(request.url),
            message=UserSchema(**user),
        )
        return response
    except InternalException as e:
        return JSONResponse(
            status_code=e.status,
            content=e.to_response(path=str(request.url)).model_dump(),
        )


@router.patch(
    "/{id}",
    summary="Update a user.",
    status_code=status.HTTP_200_OK,
    response_model=UserSchema,
)
async def update_user_route(
    id: UUID,
    data: UserUpdate,
):
    try:
        user = get_mock_user_data(id)
        if user["username"] != request_user:
            raise InternalException(
                message="ERROR : You do not have permission to modify.", error_code=ErrorCode.UNAUTHORIZED
            )
        user.update(data.dict(exclude_unset=True))
        user["modifiedAt"] = datetime.utcnow().isoformat() + "Z"
        mock_user_data[mock_user_data.index(user)] = user
        response = ResponseSchema(
            timestamp=datetime.utcnow().isoformat() + "Z",
            status=200,
            code="HTTP-200",
            path=str(request.url),
            message=UserSchema(**user),
        )
        return response
    except InternalException as e:
        return JSONResponse(
            status_code=e.status,
            content=e.to_response(path=str(request.url)).model_dump(),
        )


@router.delete(
    "/{id}",
    summary="Delete a user.",
    status_code=status.HTTP_204_NO_CONTENT,
)
async def delete_user_route(id: UUID):
    try:
        user = get_mock_user_data(id)
        if user["username"] != request_user:
            raise InternalException(
                message="ERROR : You do not have permission to delete.", error_code=ErrorCode.UNAUTHORIZED
            )
        mock_user_data.remove(user)
        return JSONResponse(status_code=status.HTTP_204_NO_CONTENT, content="")
    except InternalException as e:
        return JSONResponse(
            status_code=e.status,
            content=e.to_response(path=str(request.url)).model_dump(),
        )
